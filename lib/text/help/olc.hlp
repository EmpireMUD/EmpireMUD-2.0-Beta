OLC .OLC "DOT OLC" "DOT-OLC"

EmpireMUD .olc: An on-line creation system for editing your world.

Usage:  .<type> <command>
        .<command>

The .olc system allows quick, easy in-game editing of objects, mobiles, crafts,
and more. The editor doesn't take you out of the game like some other OLC
systems, so you still have access to help files and public channels.

If you don't like the '.' command, you can also use "olc" instead. If you do,
you must type a space after the command.

Upper immortals can control the olc permissions of builders with the OLC
CONTROLS.

Available types are:
 .abil - abilities               .adv - adventures
 .arch - archetypes              .attack - attack messages
 .aug - augments
 .b - buildings                  .book - books
 .c - crafts                     .class - classes
 .crop - crops                   .ev - events
 .f - factions                   .g - globals
 .gen - generics                 .m - mobiles
 .map - map tiles/interiors      .morph - morphs
 .o - objects                    .prog - empire progression goal
 .q - quests                     .r - room templates
 .sect - map sectors             .shop - shops
 .skill - skills                 .soc - socials
 .t - scripts/triggers           .v - vehicles

Basic commands:
 . - typing '.' by itself shows your current editor
 abort - close your current editor WITHOUT SAVING
 copy <from vnum> <to vnum> - creates a copy of something and opens the editor
 delete <vnum> - deletes a vnum from the database, with all copies of it
 edit <vnum> - loads that vnum into the editor
 list <from vnum> <to vnum> - lists everything in that vnum range
 search <vnum> - see where a thing is used by other things
 fullsearch <args> - a deeper search provided for some tyepes
 audit <vnum/range> - find common errors automatically
 save - save your open editor and close it

Examples:
 > .o edit 1500
 > olc object edit 1500
 > .m list 50-60

In the editor display, anything in angle brackets is also the name of the
command to edit it. For example, <&yname&0> can be edited by typing .name and
the name you want to set. This label changes from yellow to green if the item
has been changed from its default. For blind players, an asterisk appears
before the label name.

For notes on the mud's building rules, see HELP BUILDING GUIDE.
 
See also: OLC CONTROLS, OLC BUILDINGS, OLC CRAFTS, OLC CROPS, OLC FACTIONS,
   OLC GLOBALS, OLC MOBILES, OLC OBJECTS, OLC SECTORS, MAP OLC, OLC GENERICS,
   OLC SHOPS, OLC ATTACKS
See also: OLC ABORT, OLC AUDIT, OLC COPY, OLC DELETE, OLC EDIT, OLC FREE, 
   OLC LIST, OLC SAVE, OLC SEARCH, OLC LICENSE, TEXT EDITOR, VNUM
#d
"OLC ABBREVIATIONS" "OLC ABBREVS" ADV BLD BDG CFT CRP MOB OBJ PRG QST RMT SCT SOC TRG

Sometimes abbreviations are used for core "thing" types, like mobs. Here are
some common ones:

abil - ability
adv - adventure
arch - archetypes
attack - attack messages
aug - augment
bld (or bdg) - building (these include designated rooms)
cft - craft
cls - class
crp - crop
ev/evt - event
fct - faction
gen - generic
glb - global
mob - mobile/npc
mph - morph
npc - non-player character (mob)
prog/prg - empire progression goal
obj - object
qst - quest
rmt - room template
sct - sector/terrain
shop - shop
skl - skill
soc - social
trg - trigger
veh - vehicle
#d
"OLC LICENSE" "OLC RIGHTS"

All content created for an EmpireMUD using its OLC (OnLine Creation) system
becomes the property of the game for which it was created. EmpireMUD will not
remove the author's credit on adventure zones or other content, and major
contributors may appear in the game credits.

Content builders must use original ideas, concepts, and characters. They must
not copy, steal, or otherwise unlawfully use the intellectual property of
others, except as explicitly allowed by the original author.

A person who created content for EmpireMUD, but no longer wants EmpireMUD to
use that content, may request that the content be removed. However, EmpireMUD
is under no obligation to do so.
#d
BUILDING "BUILDING GUIDE" "BUILDING PARADIGM" "BUILDING CONTENT" "CONTENT BUILDING"

Content for EmpireMUD is built using the .olc system, which provides editors
for adventures, buildings (and designated rooms), craft (and building) recipes,
crops, mobs, objects, room templates, sectors, and triggers. This document
describes the game's current guidelines for building that content. For help
on the editors instead, see HELP OLC.

** Editor Notes **

Adventures (ADVEDIT):
- You should use the CAN-DELAY-LOAD flag whenever possible. This will reduce
  work (and lag) from having many copies of the adventure by not loading the
  interior until a player arrives. However, some types of adventures won't work
  correctly if they don't load immediately (like the Magiterranean Whirlwind).
- When you set a min/max level for the adventure, mobs and items that don't
  have their own level limits will inherit the limits from the adventure.
- If you plan to use obj/room scripts that will do scaled damage, you should
  set one of the LOCK-LEVEL flags on the adventure, otherwise the game might
  not have a good level to use for those scripts. Mob scripts don't require it.
- The !NEARBY flag should only be used on zones where a player shouldn't find
  evidence of them nearby, like a thieves' den.
- Adventure scripts will ONLY run if they are 'Adventure Cleanup' scripts.

Archetypes (ARCHEDIT):
- Each set of archetypes has its own rules.
- If your EmpireMUD wants to add races, cultures, or other groupings, you
  can use new archetype types.
- 'Origins' should have a total of 11 attribute points (3 2 2 2 1 1).
- 'Origins' should have a total of 30 skill points; 'Hobbies' should have 5.
- 'Origins' should provide gear for: head, clothes, legs, feet, wield, hold.
- The hold slot is always a long-lasting light, like the newbie torch (2104).
- You should only set the BASIC flag on very simple archetypes. Most archetypes
  should only appear in the extended list.
- Lore is optional. If you have it, make sure it ends with no punctuation.

Augments (AUGEDIT):
- Augment names should be all lowercase.
- You should always require either an ability, or a certain object (or both) on
  each augment. No augments should be available without at least one of those.
- If you use the "requiresobject" option, that object will only be consumed on
  use if it is also in the resource list. Otherwise, having the object means
  a re-usable augment.
- Unlike crafts, it is safe to use SCALABLE items as resources and requires-
  objects, because augments are instant and non-refundable.
- CUMULATIVE-PRC and CHOOSE-LAST are not compatible. If you want a 100% last-
  choice for a cumulative set, give it 100% non-cumulative and the choose-last
  flag. If no cumulative choice is picked, it will be chosen.

Buildings (BEDIT):
- Designated rooms are also built in the building editor, using the ROOM flag.
- If a building has at least 1 Citizen, players can also set it as their home.
- If you change the triggers on a building/room, live copies are NOT auto-
  matically updated. You should use the "util resetbuildingtriggers" command if
  you want to reset triggers on live copies of the building.
- If you use a completion trigger to set up a building's interior, you should
  have the trigger detach itself upon finishing. It's an unnecessary use of
  processing time and RAM to leave triggers attached if they are guaranteed to 
  never run again.
- See BUILDING-VEHICLES

Classes (CLASSEDIT):
- EmpireMUD is not currently using 'classes' at all, but they are still
  included as features for muds that want to implement them.
- A player will get assigned the class with the most matching skills, so adding
  a 100/100/75 class would give them a more specific version of the 100/100.
- Abilities can be on more than one class and more than one role within a class
  but you CANNOT assign an ability to both a class and a skill -- it would
  count toward purchased abilities in that skill tree.

Crafts (CEDIT):
- Soups are made using the COOK type and the SOUP flag. Instead of choosing an
  item to make, you choose a liquid, and the recipe will require a container
  of water to make the soup in.
- To make a recipe item, build an item ("an old recipe") of type RECIPE, and
  set its recipe vnum to the craft. Your craft must have the LEARNED flag.
  Players must still meet other requirements, such as requiresability, to make
  the craft once they have learned it. If you want to constrain the level of
  the item it makes, put min/max levels on the item.
- To make an item that can be combined with another item, for example a spear-
  head that can be crafted into a spear, create a craft and set its requires-
  object to the spearhead (just like a recipe item, above). Then, also set the
  spearhead item as a resource to make the craft, too. You'll only be able to
  craft it when the spearhead is in your inventory, but it will consume the
  spearhead when you make it.
- Scalable objects should not be used as resources or required objects for
  craft recipes. These items aren't stored, so if they're refunded, they will
  scale to their minimum level and lose any modifications.
- SMELT crafts usually have a timer of 4.
- There are two ways to require a tool: the <tool> field, which requires you
  have one equipped, or the 'tool' resource type, which requires a tool in
  the player's inventory that can be spent to craft.
- If you flag a craft TAKE-REQUIRED-OBJ, that object will be refunded if you
  cancel the craft, or if you dismantle the building/vehicle -- unless the
  object is flagged 1-USE.

Crops (CROPEDIT):
- Crop names are always lowercase because they are used to build sentences.
  They should also be plural (e.g. "apples", "rice").
- We don't usually give the crops different seasonal icons, but you can.
- The map region only matters if the crop grows in the wild (no !WILD flag).
- Crops should have a FORAGE interaction for a small single food item.
- Crops should have a HARVEST interaction for a plantable large item.
- Use the PICK interaction on orchards, with quantity equal to the depletion
  limit, and the HARVEST interaction everything else with normal quantities.
- Orchard crops need a CHOP interaction if they will give trees.
- Players foraging on any tile have a chance to find the forage item from any
  wild crop in the area, if they get nothing back from the sector's own forage
  list.

Factions (FEDIT):
- The REP-FROM-KILLS flag causes you to lose reputation if you kill a mob who
  belongs to this faction or its allies (SHARED-GAINS relationship), and gain
  repationship if you kill a mob from an enemy faction (INVERSE-GAINS). It
  doesn't matter if that other faction has the REP-FROM-KILLS flag or not.
- Two related factions don't have to have identical relationship flags, but
  there aren't very many good reasons not to.
- Reputation levels go Despised, Hated, ... Venerated, Revered. The Despised/
  Revered endcaps are good for min/max limits on factions. However, when
  checking faction reputation in quests and scripts, you should use the
  Hated/Venerated. Despised/Revered don't have ranges, and players can 'bump
  out' of those ranges by gaining/losing even 1 reputation point.
- See HELP FACTION SCRIPTING for tips on writing scripts.

Generics (GENEDIT):
- Core content appears in low-numbered vnums, but new generics should usually
  be in the vnum block of the adventure that adds them.
- Core liquids are in the 0-99 vnum range.
- Core resource actions are in the 1000-1099 vnum range.
- Core cooldowns are in the 2000-2999 vnum range.
- Core affects are in the 3000-3999 range.

Globals (GEDIT):
- All global tables must be approved by the head builder, because they apply
  to the entire game rather than just one adventure.
- If a global is set ADVENTURE-ONLY, it will only apply to mobs (etc.) in the
  adventure which its vnum falls into.
- In most cases (but not Mine Data), more than one global can trigger at the
  same time. This means two global loot tables might apply to one mob kill.
  You can lower the chance of an entire global set being checked by setting the
  percent on the global itself. If its percent fails, the interactions won't
  even be checked.
- If you use the CUMULATIVE-PRC flag, the game rolls a 0.01 - 100% chance once,
  and tracks the total percentages of each matching global until the first one
  that passes. No additional cumulative globals will pass at all, but globals
  that are not cumulative may still also trigger.
- The cumulative percent is always checked in ascending order of vnum. We
  acknowledge that this is not necessarily the best approach, and are open to
  suggestions on how to improve it.
- See also: MINE DATA GLOBAL, MOB INTERACTIONS GLOBAL

Map (MAPEDIT):
- Immortals are not generally permitted to make edits to the map. However,
  small aberrations may be fixed, and it's ok to make tiny (few-tile) edits
  for mortals if there is a good reason (and won't provide any kind of game
  advantage for the player).

Mobs (MEDIT):
- The most significant keyword should always be first. A black bat should put
  "bat" first. Handyman Joe should probably put "Joe" first. The first keyword
  may be used for sentence-building.
- If you don't set a min/max level on the mob, it may inherit them from the
  adventure zone it's in. Otherwise, they may scale to any level at all.
- We usually don't want mobs to be able to scale to any level, so mobs that
  spawn outside of adventure zones should almost alway shave a min/max set.
- Mobs that use the #n tag to pick from a generic name list will be assigned
  a random sex if you leave their sex "neutral".
- The HARD flag means a mob needs two players at its level, or one very good
  player.
- The GROUP flag will require a full group of 4 players at its level, or 3
  players working very hard, or perhaps 2 extremely good players.
- A mob with HARD and GROUP is a major boss fight and may take a lot of work
  even for a full 4-player group.
- ANIMAL mobs will take double damage from players with Huntsman.
- Consider using a must-fight script (like a Leave trigger with "return 0")
  rather than the AGGR flag.
- If your mob spawns in a dark adventure, strongly consider giving it INFRA.
- Animal mobs usually need a BUTCHER and SKIN interaction.

Morphs (MORPHEDIT):
- Be sure to set the SCRIPT-ONLY flag if your morph isn't meant to show up in
  player morph lists.
- If you use a required object and the CONSUME-OBJ flag, be sure not to use a
  scalable item. Scalable items will refund at the wrong level.
- If the morph requires a synergy ability, you should also set the CHECK-SOLO
  flag. This is necessary to use it in the Solo role.
- If you use the #n code to pass through the morph's real name, put it in the
  short and/or long description, but not the keywords. You should not combine
  the #n code with the ANIMAL flag (which makes it a disguise morph).

Objects (OEDIT):
- The most significant keyword should always be first. A fiery torch should put
  "torch" first. Joe's amazing magical wand should put "wand" first. The first
  keyword may be used to build sentences such as "You attack with your wand."
- Most equipment should be set SCALABLE, and there are very few acceptable
  reasons not to do so. We prefer you rely on the scaling engine rather than
  picking numbers for an object. See HELP ITEM SCALING.
- If you don't set a min/max level on the object, it will inherit the min/max
  from the adventure zone it spawns in. If it spawns outside an adventure zone,
  you should strongly consider a min/max on the object.
- Setting an item to ENCHANTED will make it scale higher, but players will not
  be able to enchant it themselves.
- Most equipment should be set bind-on-equip, included crafted items, so that
  a player can't use them for a while and then re-sell them. Crafters will
  prefer that each player has to buy a new item from, and it will also help to
  encourage players to adventure for their own gear instead of getting hand-me-
  downs from their alts.
- Items from boss fights and most higher-end adventure items should be set
  bind-on-pickup so that players must earn them for themselves. This is a
  "should" rule rather than a "must" rule, but expect the head builder to
  review your use of bind flags and ask you to justify them. You can also use
  bind-on-pickup to encourage players to do adventures for themselves, even at
  low levels.
- Only reasonably small or simple weapons should have the HOLD wear flag (in
  addition to WIELD). We don't let players wield two huge axes.
- Even if a weapon normally takes two hands to wield, don't set the TWO-
  HANDED flag unless you want it to be a big big weapon. This flag requires an
  ability that is only available at level 100, to certain classes.
- Storage is only used for resources and common items. Scalable and enchanted
  items will never be storable in normal storage. You don't have to set any
  storage locations for an item to be stored in "warehouse storage".
- If an item is used as a building resource, you should give it custom messages
  for build-to-char and build-to-room.
- The COMBINE interaction should always use 1 exclusion set, as it will extract
  the original item if the interaction succeeds, and it's usually not safe to
  run additional interactions.
- Ammo items that cause debuffs will use an 'affect' generic with the same
  vnum as the ammo, if one exists.
- Potions should have a locked level (min equal to max) to be storable.
- Rope components can be used to tie up players and animals. They should always
  be locked to just 1 level, because they'll be downscaled when returned.
- Basic resources should include a plural version of their main keyword, too.

Empire Progress Goals (PROGEDIT):
- Goals that are PURCHASABLE should not have cost or tasks.
- Do not use goal names starting with 'Buy', 'Completed', or any progress type.
  Players may not be able to get info on them using the 'progress' command.

Quests (QEDIT):
- You can create more complex quests by chaining simple quests.
- The VISIT-* task types do not work as prereqs; only as tasks.
- For low-level quests, reward order may matter. Give skill exp/levels BEFORE
  reward items, as the scale level may go up.
- If you use the QUEST-CHAIN reward type, put it last. It will look better
  at the end.
- If you set REPEAT-PER-INSTANCE, you should almost always also set the
  EXPIRES-AFTER-INSTANCE flag. This way, the player will always have a version
  from their current instance.
- When you use REPEAT-PER-INSTANCE, the COMPLETED-QUEST and NOT-COMPLETED tasks
  will only count quests that were/not completed in the same instance. This
  allows you to create complex chains or mutually-exclusive quests that reset
  with each new instance.
- The REPEAT-PER-INSTANCE feature can be somewhat muddled if players start a
  new instance without finishing the previous one, as the game is not designed
  for this scenario and they player may end up with a mixture of quests from
  the two instances. If you have a good solution for this problem, suggest it
  to Paul (paul@empiremud.net). The current advice is to not worry about it and
  hope players don't get themselves into these confusing situations.
- Daily quests automatically repeat once per 'daily cycle' if their 'repeat' is
  set to never/immediately. You can also set longer repeat timers on them; they
  will still count toward the daily limit but respect the long repeat time.
- Empire-only quests will also match "not in an empire" if the mob/room and
  player are both in no empire.
- Empire-only quests have no effect if the start/end point is an object.
- If multiple DAILY quests share the same 'daily cycle', only one of them is
  available per day. Any unique integer can be a daily cycle, but for the sake
  of cleanliness, you should pick the vnum of one of the quests on the cycle.
- For tasks and prerequisites, any requirements you add are "OR" by default
  (any matching requirement from the list lets the character pass the check).
  If you want them to be "AND" requirements, you need to set a group letter on
  them.

Room Templates (REDIT):
- Don't confuse room templates with the designated rooms that players can add
  to their buildings; those are made in the building editor. Room templates are
  only for adventure zones.
- If your rooms are DARK (or OUTDOOR but not LIGHT), you should consider giving
  your mobs INFRA.
- You can use "random" direction exits to make an adventure's layout change
  from instance to instance.
- If your adventure is set on a ship, you can use the port/starboard/fore/aft
  directions. Actually, you can use them even if it's not, but that might be
  silly.
- If you use the ROTATABLE flag on your adventure itself, the directions of
  your exits can be rotated so the zone has the same shape, but a different
  orientation in each instance. Random exits aren't really affected by this.
  Ship directions like "starboard" are also not affected by this, as starboard
  is the same direction no matter which way a ship faces.

Sectors (SECTEDIT):
- The IS-ADVENTURE, MAP-BUILDING, and INSIDE-ROOM flags are for very specific
  special use, and shouldn't be used on new sectors. However, they won't really
  do anything.
- Please provide a useful list of commands for any new sector. For example, if
  you add any DIG interaction, put "dig" on the commands list.

Shops (SHOPEDIT):
- no tips yet

Skills (SKILLEDIT):
- See HELP ABILITY POINTS for a breakdown of how many points a player gets in
  each skill tree. Use this to "gate" abilities and prevent players from having
  too many powerful abilities at once.
- Remember that players can only level up an ability from the level you assign
  it to, to the cap for that level range (50, 75, 100). You need to provide
  several abilities at the 50 and 75 marks so that players can level past these
  points.
- An ability assigned at level 50 can be purchased by someone who does not
  specialize past 50. If they choose to specialize, that ability can be used to
  level the skill from there.
- The skill description should be short (40-50 characters), written like a
  sentence, and with no punctuation. It is displayed on the "skills" command.
- Abilities can be on more than one class and more than one role within a class
  but you CANNOT assign an ability to both a class and a skill -- it would
  count toward purchased abilities in that skill tree.

Socials (SOCEDIT):
- Players must meet all the requirements for a social to use it.
- If a player types a social that has multiple versions, they get the one that
  has the most requirements. If they qualify for more than one same-named
  social with the same number of requirements, one is chosen at random.

Triggers and Scripts (TRIGEDIT):
- Scripts must be formatted with /f -- this will also ensure your if/end and
  while/done tags all match.
- Each time you change a script's "types", it will reset its percent or other
  type-specific fields. Those fields also won't appear until types are set.
- If your script is confusing, please add comments to it (using *).
- If a mob or room trigger uses scaled commands like %damage% or %aoe%, you
  should ensure that it's used in an adventure zone with a LOCK-LEVEL flag,
  otherwise the game may not be able to determine a scaled level. Objects that
  were dropped as loot by mobs should also already have scaled levels. Mob
  scripts also almost always have a valid scaled level, even if if not in a
  level-locked adventure zone.
- Adventure zone scripts that use mgoto (or any room-targeting commands) must
  use room targets like i1234 to target by room template vnum instead of live
  room vnum. This will cause it to go to the current instance's version of a
  room template. It only works for room templates in the same adventure zone.
- If a script loads an object or mob, and it's not in a level-locked adventure
  zone, the script may also need to scale the obj's/mob's level itself.
- Do not put a "%quest% finish" in a trigger that's attached to an object
  that requires that quest. The object will be extracted during the "finish"
  and it will interrupt the execution of your trigger.
- Consume triggers on poisons or arrows MUST return 0 if they purge the %self%
  items. You can also check "if %target%" to be sure you have someone to hit
  in these triggers.

Vehicles (VEDIT):
- Keywords should always have the most significant word first (the noun). This
  keyword is preserved when the vehicle is renamed.
- Only set an icon on a vehicle if it should be visible on the map; in most
  cases you should leave this blank.
- Vehicles only have an interior (are boardable) if the "interior room"
  property is set.
- The IN flag will modify the SIT flag, and will also change how the vehicle
  appears when you're inside it.
- The movement flags (DRIVING, SAILING, FLYING) only matter when combined with
  LEADABLE or an interior room. Otherwise there is no way to move the vehicle.
- The DRAGABLE flag always allows a vehicle to be dragged on land, never any
  other terrain.
- A vehicle is effectively a chair if it has SIT but no movement flags.
- Vehicles take 10% health damage each year ONLY if they require yearly
  maintenance (or are incomplete). A vehicle with only 1 hitpoint won't last
  long.
- When a vehicle takes at least 10% of its max hitpoints in damage, it will
  also add 1 year's maintenance to its repair needs. If it has no yearly
  maintenance set, it will add a "pouch of nails" instead.
- If a vehicle takes damage that's less than 10% of its hitpoints, it still
  needs repair but doesn't require any additional resources.
- You should generally avoid putting object storage on moving vehicles.
- See BUILDING-VEHICLES
#d
"OLC LEVELS" "OLC SCALING" "OLC SCALE"

There are several ways you can set levels for things, and level will cascade
from Adventure to Mob to Object.

When the game scales an object, it checks the level limits on the object itself
first. If either the min or max are 0, they will inherit the min or max from
the adventure they are in.

An object is scaled to the level of the mob who dropped it as loot, or who
loaded it, so the object's level may also be limited by the mob's level if the
object doesn't have its own level limits. Remember that mobs aren't usually
scaled until combat begins, but they can be pre-scaled by the adventure flags
LOCK-LEVEL-ON-ENTER or LOCK-LEVEL-ON-COMBAT if you need the mob scaled without
combat.

When a mob scales, it also first checks its own min/max scale levels, and if
it doesn't have its own min or max, it will inherit one from the adventure it
is in.

See also: BUILDING GUIDE
#d
ABILEDIT "OLC ABILITIES" "OLC ABILITY" "ABILITY EDITOR"

Usage:  .abil <command>
        .command

The .olc ability editor allows you to configure the data for various abilities.
Many types of abilities can be configured in this editor. See ABILEDIT types
for a list of ability types; these also have help files with more information,
such as ABILEDIT BUFF.

All commands in the editor are highlighted in yellow/green and placed inside
<angle braces>. You can get help on these commands by typing:
  &yHELP ABILEDIT <COMMAND>&0

You can close an open editor with .abort or .save.

Example:
> .abil edit 123
> .name Test Ability
> .save

For notes on the mud's building rules, see HELP BUILDING GUIDE.

See also: OLC, OLC ABORT, OLC EDIT, OLC EDITOR, OLC SAVE
#d
"ABILEDIT ACTIONS" "ABILITY ACTIONS"

Usage:  .data add action <type>

These are things that happen when the ability is successful.

Action types:
 &capply poison&0 - If using a poison, applies it to the target (separate from
   the chance to apply when using the WEAPON-HIT flag).
 &cclose portal&0 - Will close both sides of a targeted portal.
 &cclose to melee&0 - Character and victim will both drop from ranged to melee.
 &cdetect hide&0 - Will show hidden characters. Requires a room target. Sends
   per-char messages for each hidden character.
 &cdetect earthmeld&0 - Will show earthmelded characters. Requires a room
   target. Sends per-char messages for each hidden character.
 &cdetect players around&0 - Find other players in near the user (or in same
   city). Use $1 for the location in per-char messages to display the target.
   Uses RANGE data, defaults to normal "where" range.
 &cdetect adventures around&0 - Find DETECTABLE adventures nearby (or same
   city). Use $1 for the tile name and $2 for the adventure in spec-to
   messages. Uses RANGE data, defaults to normal "nearby" range.
 &cdevastate area&0 - Collect resources from nearby tiles. Use $1 for the tile
   name in per-item messages. Uses RANGE data, default 3 if not given.
 &cdisenchant obj&0 - Remove enchantments from an item. Runs the DISENCHANT
   interaction on the object (and globals) for a chance at something back.
   Sends per-item messages when those interactions give an item.
 &chide&0 - Attempts to hide, modified by the Hide-Upgrade ptech. Has its own
   medium difficulty check without the ptech.
 &cmagic growth&0 - Triggers this map evolution, if possible. Use spec-to when
   the evolution works with $1 as the old sector name and $2 as the new one.
 &cpurify&0 - Removes flagged skills and vampire status from the target. Use in
   conjuction with the 'can purify target' limitation.
 &cpush back to ranged combat&0 - For abilities like 'kite', pushes a character
   away from the user if in combat. Targeting self pushes back everyone;
   otherwise only the target(s). Anyone pushed back shows a per-char message.
 &cput to sleep&0 - Target is put to sleep.
 &cremove debuffs&0 - Removes debuffs (except self-debuffs and penalties).
 &cremove drunk&0 - Cancels any drunkenness on the target.
 &cremove all DoTs&0 - Remove damage-over-time effects.
 &cremove physical DoTs&0
 &cremove magical DoTs&0
 &cremove fire DoTs&0
 &cremove poison DoTs&0
 &crescue all&0 - People hitting the target will hit the actor instead.
 &crescue one&0 - One person hitting the target will hit the actor instead.
 &cset fighting target&0 - Ensures the user is attacking the victim specifically.
 &ctaunt&0 - Target will switch combat focus to the actor.

Example action abilities: 116 Cleanse, 209 Outrage

See also: OLC ABILITIES, ABILEDIT DATA
#d
"ABILEDIT AFFECTS" "ABILEDIT AFFECT"

Usage:  .affects [add | remove] <flag>

For buff abilities, these are affect flags that are placed on the target of the
ability. For passive-buff abilities, these affects are always on.

See also: AFFECT FLAGS, OLC ABILITIES, BUFF ABILITY
#d
"ABILEDIT AFFECTVNUM" "ABILEDIT AFFECT VNUM"

Usage:  .affectvnum <vnum | none>

For buff abilities, this determines which 'affect' (generic) to use. The affect
determines what text is shown on the 'affects' command or when the ability
wears off.

If you don't specify an ability, it will just say 'buff' and will have no wear-
off message.

If you use the LIMIT-CROWD-CONTROL flag, using this buff will cancel it on
other mobs in the same room. For example, sapping 1 mob cancels anyone else
you have sapped.

See also: OLC ABILITIES, BUFF ABILITY, ABILEDIT FLAGS
#d
"ABILEDIT HOOK" "ABILEDIT HOOKS" "ABILEDIT HOOKS" "ABILITY HOOKS" "HOOKED ABILITIES" "HOOK ABILITIES"

Usage:  .hook add <type> <percent> [value]
        .hook remove <number | all>

The 'hook' field is for ability hooks -- conditions which can cause this
ability to trigger. A hooked ability can only run once per execution, meaning
abilities never trigger each other in circles. This also means abilities that
target multiple things will only trigger a hooked ability once (including
an ability with multiple summons). Hooked abilities may never use the OVER-TIME
flag.

Hooked abilities may have their own costs and cooldowns; they will generally
be skipped if you don't meet those requirements. Without costs or cooldowns,
the ability runs for free when its hook occurs.

Available types of hooks are:
 &cAbility&0 - Triggered by an ability successfully executing, targeting the same
   targets if possible.
 &cAttack&0 - Triggered by any attack, targeting the attack's target.
 &cAttack-Type&0 - Triggered by an attack, targeting its target. See ATTACK TYPES.
 &cDamage-Type&0 - Triggered by dealing damage, targeting the damage's victim.
   Types are &yphysical&0, &ymagical&0, &yfire&0, &ypoison&0, &ydirect&0.
 &cDying&0 - Triggered when the character begins to die.
 &cKill&0 - Triggered by any kill, targeting self (e.g. buff on kill).
 &cMelee-Attack&0 - Triggered by any melee attack, targeting the attack's target.
 &cRanged-Attack&0 - By any ranged attack, targeting the attack's target.
 &cRespawn&0 - Triggered after the character respawns from death.
 &cResurrect&0 - Triggered after the character is resurrected.
 &cWeapon-Type&0 - Triggered by any &yblunt&0, &ysharp&0, or &ymagic&0 attack,
   targeting the attack's target.

If the hook would normally target an enemy, but this ability only targets
yourself, only targets the room, or has the IGNORE target flag, the target will
change. Use this, for example, to have an ability that buffs you when you deal
fire damage.

Hooked abilities send normal &cpre-&0, &ctarg-&0, &cself-&0, and &cfail-&0
messages. You can set custom messages to * to silence them, as usual.

See also: OLC ABILITIES
#d
"ABILEDIT APPLY" "ABILEDIT APPLIES"

Usage:  .apply add <value> <apply>
        .apply change <number> <value | apply> <new value>
        .apply remove <number | all>

For buff abilities, these are the various traits that are changed by the buff.
The values should be positive for buffs, and negative for debuffs.

For passive-buff abilities, these applies are always on.

Unlike object applies, using a negative apply will NOT provide a bonus for the
other positive applies.

For a list of the applies, see: HELP OEDIT APPLY

See also: OLC ABILITIES, BUFF ABILITY
#d
"ABILEDIT ATTACK" "ABILEDIT ATTACKS" "ATTACK ABILITY"

An ATTACK ability is one that merely hits with the weapon in the character's
wield slot.

This is often paired with the STOP-ON-MISS flag to apply buffs or conjure items
only if the attack succeeds.

Example attack abilities: 155 Jab, 209 Outrage

Not to be confused with: ABILEDIT ATTACK TYPE
See also: OLC ABILITIES
#d
"ABILEDIT ATTACKTYPE" "ABILEDIT ATTACK TYPE"

Usage:  .attacktype <name | vnum>

This determines the attack message that a damage ability sends. You can look up
attacks with "vnum attack <name>" or create them with the .attack editor.

See also: OLC ABILITIES, DAMAGE ABILITY
#d
"ABILEDIT BUFF ABILITY" "BUFF ABILITY" "BUFF ABILITIES"

The BUFF ability type means that the ability gives some affects to the target.
This includes 'debuffs', which give negative abilities to enemies.

You must always set the VIOLENT flag on a debuff. Also supports the TOGGLE
flag for self-buffs.

Buff abilities have the following properties:
 <&yshortduration&0> How long it lasts (at low skill level).
 <&ylongduration&0> How long it lasts (at high skill level).
 <&yaffects&0> Affect flags to set.
 <&yapply&0> Trait modifiers to give.
 <&yaffectvnum&0> Which affect (generic) to use for the buff.

Example buff abilities: 1 Fly, 97 Bash, 166 Foresight, 205 Master Survivalist

See also: OLC ABILITIES, ABILEDIT TYPES
#d
"ABILEDIT BUILDING-DAMAGE ABILITY" "BUILDING-DAMAGE ABILITY" "BUILDING-DAMAGE ABILITIES" "BUILDING DAMAGE ABILITY" "ABILEDIT BUILDING DAMAGE ABILITY"

The BUILDING-DAMAGE type is capable of dealing damage to both buildings and
vehicles, depending on the targets you set on the ability.

You should always set the VIOLENT flag on this as well as the "distrust from
hostile" effect and the "valid siege target" limitation.

Messages:
 Sent first: &cpre-self-to-char&0 and &cpre-self-to-room&0 (both optional)
 Sent on each tick for building targets: &cself-to-char&0 and &cself-to-room&0
 Sent on each tick for vehicle targets: &ctarg-to-char&0 and &ctarg-to-room&0
 Sent on failure for building targets: &cfail-self-to-char&0 and &cfail-self-to-room&0
 Sent on failure for vehicle targets: &cfail-targ-to-char&0 and &cfail-targ-to-room&0

Example building-damage abilities: 172 Siege Ritual

See also: OLC ABILITIES, ABILEDIT TYPES
#d
"ABILEDIT COMPANION ABILITY" "COMPANION ABILITY" "COMPANION ABILITIES"

The COMPANION ability type adds 1 or more mobs to the player's 'companions'
command. Players can summon one of these at a time.

Companion abilities have the following properties:
 <&ydata&0> Add the SUMMON-MOB data type to grant new companions.
            - You can set level limits on the mob.
            - The mob will be CHARMED.

Notes:
- Companion abilities will use the &ctarg-to-char&0 and &ctarg-to-room&0 custom
  messages when a player summons the companion. &c$n&0 represents the player
  and &c&N&0 represents the companion. For fails, use &cfail-self-to-char&0 and
  &cfail-self-to-room&0. For pre-ability messages, use &cpre-self-to-char&0 and
  &cpre-self-to-room&0.
- Cannot use the INVISIBLE flag for messaging.

When a companion is summoned, it automatically gets the SPAWNED, !LOOT, !EXP,
and !DRINK-BLOOD flags.

Example companion abilities: 122 Familiar, 138 Bodyguard

See also: OLC ABILITIES, ABILEDIT TYPES, COMPANION
#d
"ABILEDIT CONJURE LIQUID ABILITY" "ABILEDIT CONJURE-LIQUID ABILITY" "CONJURE LIQUID ABILITY" "CONJURE-LIQUID ABILITY" "CONJURE LIQUID ABILITIES" "CONJURE-LIQUID ABILITIES" CONJURE-LIQUID

The CONJURE-LIQUID ability type means that the ability will fill a drink
container object with a liquid.

This type of ability must always target objects. If you want to create a liquid
in the room, use a conjure-object ability instead, with a puddle object.

This ability supports both the 'conjure' command and its own command. In both
cases, it must be set to target an object. It supports the cost-per-amount
setting, in case the amount of liquid is important.

This type of ability also supports a second argument for the amount of liquid,
in case the player doesn't wish to conjure the maximum amount. The amount they
specify cannot be more than the interaction quantity or the amount they can
afford.

Conjure-liquid abilities have the following properties:
 <&ycommand&0> May be set to "conjure" to add to the conjure command instead of
    its own command.
 <&ycostperamount&0> You can optionally base the cost on how much of a liquid
    is conjured.
 <&yinteractions&0> Determine which liquid will be conjured. You must set at
    least 1 LIQUID-CONJURE interaction, and only 1 should succeed. The quantity
    value of this interaction is the maximum that can be conjured.
 <&ytargets&0> Must target an object.

This type of ability uses the &ctarg-to-*&0 custom messages with the &y$p&0 token for
the targeted object.

Example conjure-liquid abilities: 107 Veintap

See also: OLC ABILITIES, ABILEDIT TYPES, INTERACTIONS, CONJURE
#d
"ABILEDIT CONJURE OBJECT ABILITY" "ABILEDIT CONJURE-OBJECT ABILITY" "CONJURE OBJECT ABILITY" "CONJURE-OBJECT ABILITY" "CONJURE OBJECT ABILITIES" "CONJURE-OBJECT ABILITIES" CONJURE-OBJECT

The CONJURE-OBJECT ability type means that the ability will create one or more
items.

Objects will go to the player's inventory unless they do not have the TAKE wear
bit. This will only work if there's at least 1 slot in the player's inventory
(2 for a large item). Multiple items may over-fill the inventory if only 1
space was available.

This ability supports both the 'conjure' command and its own command. It does
not have a target -- you must set the &gIGNORE&0 target.

Conjure-object abilities have the following properties:
 <&ycommand&0> May be set to "conjure" to add to the conjure command instead of
    its own command.
 <&yinteractions&0> Determine which object(s) will be conjured. You must set at
    least 1 OBJECT-CONJURE interaction.

Messages:
 Sent first: &cpre-self-to-char&0 and &cpre-self-to-room&0 (both optional)
 Sent when each item appears: &cper-item-to-char&0 and &cper-item-to-room&0
   Using &y$p&0 for the item. These messages are also optional.
 Sent on failure only if no pre-messages were sent: &cfail-self-to-char&0 and
   &cfail-self-to-room&0

Example conjure-liquid abilities: 1019 Conjure Fruit

See also: OLC ABILITIES, ABILEDIT TYPES, INTERACTIONS, CONJURE
#d
"ABILEDIT CONJURE VEHICLE ABILITY" "ABILEDIT CONJURE-VEHICLE ABILITY" "CONJURE VEHICLE ABILITY" "CONJURE-VEHICLE ABILITY" "CONJURE VEHICLE ABILITIES" "CONJURE-VEHICLE ABILITIES" CONJURE-VEHICLE

The CONJURE-VEHICLE ability type means that the ability will create one or more
vehicles in the room.

This ability supports both the 'conjure' command and its own command. It does
not require or use a target. It does not have a target -- you must set the
&gIGNORE&0 target.

Conjure-vehicle abilities have the following properties:
 <&ycommand&0> May be set to "conjure" to add to the conjure command instead of
    its own command.
 <&yinteractions&0> Determine which vehicle(s) will be conjured. You must set at
    least 1 VEHICLE-CONJURE interaction.

Messages:
 Sent first: &cpre-self-to-char&0 and &cpre-self-to-room&0 (both optional)
 Sent when each item appears: &cper-veh-to-char&0 and &cper-veh-to-room&0
   Using &y$V&0 for the item. These messages are also optional.
 Sent on failure only if no pre-messages were sent: &cfail-self-to-char&0 and
   &cfail-self-to-room&0

Example conjure-vehicle abilities: 1018 Shimmering Anvil

See also: OLC ABILITIES, ABILEDIT TYPES, INTERACTIONS, CONJURE
#d
"ABILEDIT CRAFT ABILITY" "CRAFT ABILITY" "CRAFTING ABILITY" "CRAFT ABILITIES"

The CRAFT ability type indicates that an ability is only used to make crafts.
This type of ability has no "command" or other special properties.

Example craft abilities: 51 Forge, 248 Exarch Crafts

See also: OLC ABILITIES, ABILEDIT TYPES
#d
"ABILEDIT COMMAND"

Usage:  .command <word | none>

Adding a command makes the ability usable. Its exact use depends on what
type(s) you set on the ability. Commands must be a single word, and should
NEVER share the name with a game command.

Players can only use this command if they have this ability. You can use
'skill buy <your skill name>' to buy and test the ability.

Some commands have special behavior instead:
 &cchant&0 - Add this ability to the player's chant command.
 &cconjure&0 - Add this ability to the player's conjure command.
 &critual&0 - Add this ability to the player's ritual command.

See also: OLC ABILITIES, CHANT, CONJURE, RITUAL
#d
"ABILEDIT COOLDOWN" "ABILEDIT CDTIME"

Usage:  .cooldown <vnum | none> [seconds]
        .cdtime <seconds>

These two properties determine what cooldown an ability has, if any. The vnum
must be a cooldown generic.

Cooldowns are used to balance how powerful an ability is, by limiting how often
it can be used.

See also: COOLDOWN GENERICS, OLC ABILITIES
#d
"ABILEDIT COST" "ABILEDIT COSTTYPE" "ABILEDIT COST TYPE" "ABILEDIT COSTPERSCALEPOINT" "ABILEDIT COST PER SCALE POINT"

Usage:  .cost <amount> [health | move | mana | blood]
        .costperscalepoint <amount>
        .costtype <health | move | mana | blood>

These two commands determine how much it costs to use an ability. If the
ability is free, just set the cost to 0.

You can also set the cost to be based on the scale of the ability. There are
approximately 4 scale points per 100 levels (before modifiers). This feature
allows you to add cost to stronger abilities.

Costs are part of balancing an ability. A more powerful ability should have a
higher cost.

See also: OLC ABILITIES
#d
"ABILEDIT COSTPERAMOUNT" "ABILEDIT COST PER AMOUNT"

Usage:  .costperamount <amount>

Some types ability support a 'cost per amount' modifier. This generally the
amount of damage, healing, etc.

For example, if the cost per amount is 0.1 and the ability will deal 100
damage, it costs an extra 10.

See also: OLC ABILITIES, ABILEDIT COST
#d
"ABILEDIT COSTPERTARGET" "ABILEDIT COST PER TARGET"

Usage:  .costpertarget <amount>

When an ability can target multiple characters, it supports an optional 'cost
per target' modifier, so each target will cost more, including the first
target.

For example, if the cost per target is 15 and the ability affects two
characters, it costs an extra 30.

If a player is too low on mana/move points for all possible targets, the
ability will hit as many as possible and stop when the player cannot afford
another target.

See also: OLC ABILITIES, ABILEDIT COST
#d
"ABILEDIT CRAFT ABILITY" "CRAFT ABILITY"

The CRAFT ability type indicates that it is used for crafting/building items.
There are no special ability properties for this type. This ability can be
assigned to a craft in the .craft editor's 'requiresability' field.

See also: OLC ABILITIES
#d
"ABILEDIT CUSTOM" "ABILEDIT CUSTOM MESSAGES"

Usage:  .custom add <type> <message>
        .custom change <number> <type | message> <value>
        .custom move <number> <up | down>
        .custom remove <number | all>
        .custom sort

(See also: ABILEDIT CUSTOM ABILITIES)

You can set custom messages on abilities. Different types of abilities may use
different messages; see the help files for each ability type for more info.
These messages may use the tokens $n/$e/$s/$m for name/he/his/him for the
player using the ability, and capitalized letters for the target.

If you set more than one message of the same type, one will be chosen at
random each time -- except OVER-TIME messages, which will play in sequential
order.

Some messages have defaults that will show if you do not set them as custom
messages. For abilities, the defaults can be prevented by setting a custom
message that only contains * (asterisk).

Message types:
 &cself-to-char&0 - Shown to the actor when the ability targets himself (or
   targets nobody).
 &cself-to-room&0 - Shown to the room when the ability targets self/nobody.
 &ctarg-to-char&0 - Shown to the actor when the ability targets a character
   or object.
 &ctarg-to-vict&0 - Shown to the victim when the ability targets a char/obj.
 &ctarg-to-room&0 - Shown to the rest of the room when targeting a char/obj.
 &ccounter-to-char&0 - To the actor when a counterspell cancels the ability.
 &ccounter-to-vict&0 - Shown to the ability's victim after the counterspell.
 &ccounter-to-room&0 - Shown to the room after the counterspell.
 &cfail-self-to-char&0 - Shown to the actor when the ability fails targeting
   himself (or targets nobody).
 &cfail-self-to-room&0 - To room when the ability fails targeting self/nobody.
 &cfail-targ-to-char&0 - To actor when the ability fails targeting a character.
 &cfail-targ-to-vict&0 - To victim when the ability fails targeting a character.
 &cfail-targ-to-room&0 - To room when it fails targeting a character.
 &cpre-self-to-char&0 - To actor before an ability executes, when targeting self/nobody.
 &cpre-self-to-room&0 - To room before an ability executes, when targeting self/nobody.
 &cpre-targ-to-char&0 - To actor before an ability executes, when targeted.
 &cpre-targ-to-vict&0 - To victim before an ability executes, when targeted.
 &cpre-targ-to-room&0 - To room before an ability executes, when targeted.
 &cper-veh-to-char&0 - To actor on types like conjure-vehicle, per vehicle.
 &cper-veh-to-room&0 - To room on conjure-vehicle; use $V for the vehicle.
 &cper-item-to-char&0 - To actor on types like conjure-object, per item.
 &cper-item-to-room&0 - To room on types like conjure-object, per item.
 &cover-time-longdesc&0 - How the player appears during an OVER-TIME ability.
 &ctoggle-to-char&0 - To actor when turning off a TOGGLE ability.
 &ctoggle-to-room&0 - To room when turning off a TOGGLE ability.
 &cper-char-to-char&0 - To actor when some abilities hit multiple characters.
 &cper-char-to-vict&0 - To target when some abilities hit multiple characters.
 &cper-char-to-room&0 - To actor when some abilities hit multiple characters.
 &cspec-to-char&0 - Special messaging on some abilities.
 &cspec-to-vict&0 - Special messaging on some abilities, to the target.
 &cspec-to-room&0 - Special messaging on some abilities, to the room.
 &cno-argument&0 - Shown when the player does not type an argument.
 &cot-self-to-char&0 - Over-time ability messages, showing every few seconds.
 &cot-self-to-room&0
 &cot-targ-to-char&0
 &cot-targ-to-vict&0
 &cot-targ-to-room&0
 &cimmune-self-to-char&0 - To actor when immune to their own ability.
 &cimmune-targ-to-char&0 - To actor when other target is immune to the ability.
 &cno-target&0 - Shown when the ability target is not found.

For messages to help test abilities, see HELP ABILEDIT TESTING.

See also: OLC ABILITIES, ABILEDIT CUSTOM ABILITIES, DOLLAR SIGN CODES
#d
"ABILEDIT CUSTOM ABILITIES" "ABILEDIT CUSTOM ABILITY" "CUSTOM ABILITIES" "CUSTOM ABILITY"

A CUSTOM ability is one that is hard-coded, not configured through the ability
engine. This refers to a small number of abilities that are too complex to
be managed by this system, usually due to complicated arguments or options.

Example custom abilities: 136 Inspire, 177 Mirrorimage, 240 Confer

See also: OLC ABILITIES, ABILEDIT TYPES
#d
"ABILEDIT DAMAGE ABILITY" "DAMAGE ABILITY" "DAMAGE ABILITIES"

The DAMAGE ability type is an ability that deals damage directly to the target,
without a hit/dodge roll or an attack.

You must always set the VIOLENT flag on a damage ability.

DAmage abilities have the following properties:
 <&yattacktype&0> Determines the attack messages.
 <&ydamagetype&0> What type of damage it does.

Example damage abilities: 3 Backstab, 39 Critical Backstab, 308 Wilderblaze

See also: OLC ABILITIES, ABILEDIT TYPES
#d
"ABILEDIT DAMAGETYPE" "ABILEDIT DAMAGE TYPE"

Usage:  .damagetype <type>

This determines what type of damage the ability deals. Damage type affects
the target's ability to block, and affects which resistances protect against
it.

See also: OLC ABILITIES, DAMAGE ABILITY, DOT ABILITY
#d
"ABILEDIT DATA" "ABILEDIT SUMMON-MOB" "ABILEDIT PAINT-COLOR" "ABILEDIT RANGE"

Usage:  .data add <type> <name | vnum>
        .data remove <number | all>

The 'data' field is used by different types of abilities. Available types are:
 &cPTECH&0 - Player technologies. Used by the PTECH ability type.
 &cEFFECT&0 - Something happens when the ability activates. See ABILITY EFFECTS
 &cREADY-WEAPON&0 - Adds a weapon to the player's 'ready' command.
 &cSUMMON-MOB&0 - Adds a mob to a companion/summon ability.
 &cLIMITATION&0 - Adds a limitation to the ability. See ABILEDIT LIMITATIONS
 &cPAINT-COLOR&0 - See PAINT ITEM for list of colors.
 &cACTION&0 - Performs action(s) when successful. See ABILEDIT ACTIONS
 &cRANGE&0 - Used by some actions, as noted.
 &cPARENT&0 - Grants this ability if player has its parent. See ABILEDIT PARENT
 &cSUPERCEDED-BY&0 - A better version of this ability. SEE ABILEDIT SUPERCEDE

See also: ABILEDIT TYPES, ABILITY EFFECTS, PLAYER TECHNOLOGIES, OLC ABILITIES
#d
"ABILEDIT DIFFICULTY"

Usage:  .difficulty <type>

Some abilities have a chance to fail. This setting determines how hard the
ability is. If an ability can fail, you should set custom fail messages.

For targeted abilities, they do not fail if the target is asleep or can't see
you (unless it has the DIFFICULT-ANYWAY flag).

See also: ABILEDIT CUSTOM, OLC ABILITIES, ABILEDIT FLAGS
#d
"ABILEDIT DOT ABILITY" "DOT ABILITY" "DOT ABILITIES"

The DOT ability type deals damage over time. If you set the maxstacks number
very high, you should also lower the scale property.

You must always set the VIOLENT flag on a DoT.

DoT abilities have the following properties:
 <&yshortduration&0> How long it lasts (at low level).
 <&ylongduration&0> How long it lasts (at class level).
 <&ymaxstacks&0> How many times this DoT can stack.
 <&yaffectvnum&0> Which affect (generic) to use for the DoT.

Example DoT abilities: 98 Cut Deep, 125 Skybrand, 155 Jab

See also: OLC ABILITIES, ABILEDIT SCALE, ABILEDIT TYPES
#d
"ABILEDIT FLAGS" "ABILITY FLAGS"

Usage:  .flags [add | remove] <flags>

The following ability flags are available:
 &cVIOLENT&0 - Causes combat; can't be used on allies. You MUST set this flag
   on offensive abilities or ones that harm the target.
 &cCOUNTERSPELLABLE&0 - Can trigger an opponent's counterspell (used for magic).
 &cTOGGLE&0 - Using this ability on twice  yourself will end its affect (for free).
 &cINVISIBLE&0 - Shows no message if the actor can't be seen, instead of 'Someone'.
 &c!ENGAGE&0 - Will not automatically add you to combat when used, if it succeeds.
 &cRANGED&0 - Can be used during ranged combat without giving a melee error.
 &c!ANIMAL&0 - Cannot be used in animal form.
 &c!INVULNERABLE&0 - Cannot be used while invulnerable (e.g. mistform).
 &cCASTER-ROLE&0 - Bonus for caster role, weaker without it.
 &cHEALER-ROLE&0 - Bonus for healer role, weaker without it.
 &cMELEE-ROLE&0 - Bonus for melee role, weaker without it.
 &cTANK-ROLE&0 - Bonus for tank role, weaker without it.
 &cRANGED-ONLY&0 - Cannot be used in melee combat.
 &cIGNORE-SUN&0 - For a vampire ability, won't check sunlight.
 &cUNSCALED-BUFF&0 - Uses exact apply values rather than scaling them.
 &cLIMIT-CROWD-CONTROL&0 - Cancels the same affectvnum on other mobs in the room.
 &cNOT-IN-COMBAT&0 - Ability cannot be used in combat even if min-position is low.
 &cONE-AT-A-TIME&0 - For some ability types, prevents use when already active.
 &cOVER-TIME&0 - Like a ritual or chant; see ABILEDIT OVER-TIME
 &cSPOKEN&0 - Ability is spoken aloud and is blocked by the SILENT room affect.
 &cREPEAT-OVER-TIME&0 - Over-time ability auto-repeats if successful.
 &cCUMULATIVE-BUFF&0 - Buff can stack its effect.
 &cCUMULATIVE-DURATION&0 - Buff can stack its duration.
 &cWEAPON-HIT&0 - Counts as a weapon hit (applies poison, etc).
 &cDIFFICULT-ANYWAY&0 - Checks difficulty even if the target can't see you.
 &cNOT-IN-DARK&0 - Cannot be used in the dark unless you can see.
 &cUNSCALED-PENALTY&0 - Negative buff attributes do not scale; positives do.
 &cSTOP-ON-MISS&0 - Attack, Damage, or Restore abilities that miss won't
   perform their other types, such as buffs or conjures.
 &cREDUCED-ON-EXTRA-TARGETS&0 - For multi-targeting, scaled down 50% after the
   first target.
 &cUSE-SKILL-BELOW-MAX&0 - If the ability comes from a skill, will use only the
   skill's level if the player isn't at the skill's maximum level.
 &cUNREMOVABLE-BUFF&0 - Buff/debuff is marked as cast by the target so it
   cannot be removed with the 'remove debuffs' action.
 &cBUFF-SELF-NOT-TARGET&0 - Buff portion of the ability targets the user while
   everything else hits the ability's target.

See also: OLC ABILITIES, ABILEDIT AFFECTVNUM
#d
"ABILEDIT FULLSEARCH"

Usage:  .abil fullsearch -<field> <argument> <...>

This command allows you to search for abilities matching certain criteria. You
can specify multiple fields if you want. Any arguments that don't start with a
dash (-) are matched to the ability's keywords and other text.

Fields:
  &c-action&0 - Search a specific type from ABILEDIT ACTIONS
  &c-affects&0 - see HELP AFFECT FLAGS
  &c-apply&0 - see HELP APPLIES
  &c-attacktype&0 - see HELP ABILEDIT ATTACK TYPE
  &c-costtype&0 - health, mana, move, or blood
  &c-custom&0 - has a specific type, see HELP ABILEDIT CUSTOM
  &c-damagetype&0 - see HELP ABILEDIT DAMAGE TYPE
  &c-difficulty&0 - see HELP ABILEDIT DIFFICULTY
  &c-effect&0 - Search a specific type from ABILEDIT EFFECTS
  &c-flagged&0, &cunflagged&0 - see HELP ABILEDIT FLAGS
  &c-gainhooks&0 - see HELP ABILEDIT GAIN HOOKS
  &c-immunities&0 - see HELP AFFECT FLAGS
  &c-limitation&0 - Search a specific type from ABILEDIT LIMITS
  &c-linkedtrait&0 - see HELP APPLIES
  &c-mincooldown&0, &c-maxcooldown&0 - cooldown time within these limits
  &c-mincost&0, &c-maxcost&0 - base cost within these limits
  &c-mincostperscalepoint&0, &c-maxcostperscalepoint&0 - scaled cost limits
  &c-mincostperamount&0, &c-maxcostperamount&0 - cost per amount limits
  &c-mincostpertarget&0, &c-maxcostpertarget&0 - cost per target limits
  &c-minduration&0, &c-maxduration&0 - short/long duration within these limits
  &c-minposition&0, &c-maxposition&0 - required position within these limits
  &c-paintcolor&0 - Search a specific paint color in ability data (PAINT ITEM has the list)
  &c-ptech&0 - see HELP PTECH
  &c-scale&0, &c-scaleunder&0, &c-scaleover&0 - scale percent within these limits
  &c-targets&0 - see HELP ABILEDIT TARGETS
  &c-tools&0 - required tools, see HELP TOOL TYPES
  &c-type&0 - see HELP ABILEDIT TYPE
  &c-waittype&0 - see HELP ABILEDIT WAIT TYPE
  &c-vmin&0, &c-vmax&0 - VNUM range limits

Examples:
 > .abil fullsearch -type PLAYER-TECH -ptech Swimming
 > .abil fullsearch -flagged RANGED -flagged RANGED-ONLY
 > .abil fullsearch -scaleover 50 -scaleunder 99 -vmin 10000 -vmax 10099

To search other fields, you can generally use the normal "search" option for
other OLC types. For example, to find all abilities with a certain cooldown,
use ".gen search 1234".
#d
"ABILEDIT GAINHOOKS" "ABILEDIT GAIN HOOKS" "GAIN HOOKS"

Usage:  .gainhooks [add | remove] <flags>

This tells the ability when to trigger skill gain. Abilities with commands also
gain experience when their commands are used.

Available gain hooks:
 &cONLY-WHEN-AFFECTED&0 - Below flags will only happen when the ability's affect
   is on.
 &cMELEE&0 - Gains when you hit in melee combat.
 &cRANGED&0 - Gains when you hit in ranged combat.
 &cDODGE&0 - Gains when you dodge an attack.
 &cBLOCK&0 - Gains when you block an attack.
 &cTAKE-DAMAGE&0 - Gains when you take damage.
 &cPASSIVE-FREQUENT&0 - Gains every 5 seconds.
 &cPASSIVE-HOURLY&0 - Gains every 75 seconds (game hour).
 &cONLY-DARK&0 - Only gains if it's dark here.
 &cONLY-LIGHT&0 - Only gains if it's NOT dark here.
 &cONLY-VS-ANIMAL&0 - Only gains if the ability is being used against an animal.
 &cVAMPIRE-FEEDING&0 - Gains when feeding on someone.
 &cMOVING&0 - Gains when the player moves.
 &cONLY-USING-READY-WEAPON&0 - Only when using a ready-weapon from the ability.
 &cONLY-USING-SUMMONED-MOB&0 - Only if player has a follower from the ability.
 &cNOT-WHILE-ASLEEP&0 - Will not trigger skill gain while sleeping.
 &cDYING&0 - Called when the player dies, before auto-resurrect.
 &cDO-HEAL&0 - Called when the player performs a healing ability.

See also: OLC ABILITIES
#d
"ABILEDIT IMMUNITIES" "ABILEDIT IMMUNITY"

Usage:  .immunities [add | remove] <flag>

These are affect flags that make the target immune to this ability. For
example, the IMMUNE-PHYSICAL-DEBUFFS immunity means mobs with that flag can't
be targeted by this ability.

Any affect flag can be used for this.

See also: AFFECT FLAGS, OLC ABILITIES
#d
"ABILEDIT LIMITATIONS" "ABILEDIT LIMITS" "ABILITY LIMITATIONS" "ABILITY LIMITS"

Usage:  .data add limitation <type>

Limitation types:
 &cally permission at target&0 - Has ally (or better) access at the target location.
 &ccan purify target&0 - Target is valid for a purify ability.
 &ccan teleport here&0 - Current room does not block teleport.
 &ccan teleport target&0 - Target room does not block teleport.
 &ccan use as ally&0 - Current room must be unclaimed or you are an ally (or better).
 &ccan use as guest&0 - Current room must be unclaimed or you have guest access (or better).
 &ccan use as member&0 - Current room must be unclaimed or owned by your empire.
 &ccheck city found time&0 - Fails if the target city is not established yet.
 &ccheck obj binding&0 - Ensures item target is not bound to someone else.
 &cdisarmable target&0
 &cguest permission at target&0 - Has guest (or better) access at the target location.
 &chave an empire&0 - Must be a member of any empire.
 &cin a city&0 - Must be in any city (tile must also be claimed).
 &cin combat&0 - Must be fighting someone.
 &cin role&0 - Actor must be in a certain role.
 &cindoors&0 - Must be used indoors (including inside buildings on the map).
 &citem type <TYPE>&0 - Obj target must be a specific type.
 &cmember permission at target&0 - Has member access at the target location.
 &cno witnesses&0 - Nobody is watching.
 &cno witnesses hide&0 - Nobody is watching unless you're good at hiding.
 &cnot being attacked&0 - No characters in combat are targeting the actor.
 &cnot being attacked melee&0 - Nobody targeting the actor in melee range.
 &cnot being attacked mobile melee&0 - Nobody targeting the actor in melee range
   who's not immobilized (for kite).
 &cnot distracted&0 - User does not have DISTRACTED affect.
 &cnot god target&0 - Target player must not be a god or immortal.
 &cnot here&0 - Target cannot be in same room.
 &cnot immobilized&0 - User does not have IMMOBILIZED affect.
 &cobj flagged&0 - Object has a certain flag (see OEDIT FLAGS).
 &cobj not flagged&0 - Object does not have a certain flag.
 &con a barrier tile&0 - Must be used on a barrier (wall) tile.
 &con a road&0 - Must be used on a road tile.
 &con the map&0 - Must be used on the map (includes the main room of buildings).
 &coutdoors&0 - Must be used outdoors (including some adventure rooms).
 &cown the tile&0 - Your empire must own the location.
 &cpaintable building&0 - Must be used on a building the player can paint.
 &ctarget being attacked&0 - Target must have someone hitting them.
 &ctarget has any DoT&0 - Target must be afflicted by a DoT.
 &ctarget has DoT type&0 - Target must have a certain type of DoT.
 &ctarget has mana&0 - Target must have mana (non-caster mobs don't count).
 &ctarget is vampire&0 - Target must be a vampire.
 &ctarget not foreign empire npc&0 - Target cannot be an NPC from another empire.
 &cterraform approval&0 - Check if the player needs/has approval for this.
 &cusing any poison&0 - Player must have poison ready.
 &cvalid siege target&0 - Any vehicle or room target must be ok to attack.
 &cwield any weapon&0 - Character is wielding any weapon and is not disarmed.
 &cwield attack type&0 - Wielding a weapon with a specific attack type. See
   WEAPON TYPES for a list or use "vnum attack".
 &cwield weapon type&0 - Wielding a weapon with a specific weapon type: blunt,
   sharp, or magic.
 &cwithin range&0 - Compares distance to the target against RANGE data.

See also: OLC ABILITIES, ABILEDIT DATA
#d
"ABILEDIT LINK ABILITY" "LINK ABILITY" "LINK ABILITIES"

The LINK ability type has no real properties of its own. Its purpose is to help
create complex abilities, for example by checking immunities on a target before
an ability that targets one's self.

The best example is 315 Splash Blood, which is a helper for ability
314 Red Mist. Splash Blood hooks on any physical damage against a target but
has a !DRINK-BLOOD immunity flag. If this immunity is present, nothing else
happens. If not, it will chain to 314 Red Mist, which targets the player to
restore blood. Red Mist cannot check the immunity itself because its target is
the player who's attacking, not the victim of the attack. Splash Blood fills in
the middle link for this.

See also: OLC ABILITIES
#d
"ABILEDIT LINKEDTRAIT" "ABILEDIT LINKED TRAIT"

Usage:  .linkedtrait <trait | none>

Linking an ability to a trait makes the ability more powerful based on how
close the actor is to his/her cap in that trait.

This selector uses the same list of traits as applies, but only traits that
have a cap will provide a bonus.

The following traits cannot be used: &rHEALTH-REGEN, MOVE-REGEN, MANA-REGEN,
AGE, MAX-MOVE, HEAL-OVER-TIME, MAX-HEALTH, MAX-MANA, INVENTORY, MAX-BLOOD,
CRAFTING, BLOOD-UPKEEP&0

See also: OLC ABILITIES, APPLIES
#d
"ABILEDIT MASTERYABILITY" "ABILEDIT MASTERY ABILITY"

Usage:  .masterability <ability>

The mastery ability is a separate ability which boosts the performance of this
ability if a player has both. For example, many crafting abilities have linked
mastery abilities that result in the (superior) flag on crafts.

Scalable abilities that aren't crafts get a 25% boost from masteries.

MASTERY is also an ability type, for marking abilities that only give mastery
to other abilities. This type of ability has no inherent properties.

Example mastery abilities: 194 Master Tailor

See also: OLC ABILITIES, ABILEDIT TYPES
#d
"ABILEDIT MAXSTACKS" "ABILEDIT MAX STACKS"

Usage:  .maxstacks <number>

This is the number of times a DoT can stack. Each time the DoT would be
applied, it refreshes the duration. It also adds 1 to the stack count, if it's
below the maximum number. Total damage is multiplied by the stack count.

If maxstacks is higher, the 'scale' property should be lower. Conversely, if
maxstacks is low, the scale could be higher.

See also: OLC ABILITIES, DOT ABILITY, ABILEDIT SCALE
#d
"ABILEDIT MINPOSITION"

Usage:  .minposition <position>

This is the minimum position a character must be in to use the ability. For
most abilities, this is "resting", "fighting", or "standing". This applies to
command abilities as well as companion, summon, and ready weapon abilities.

See also: POSITIONS, OLC ABILITIES
#d
"ABILEDIT MORPH ABILITY" "ABILEDIT MORPH ABILITIES" "MORPH ABILITY" "MORPH ABILITIES"

The MORPH ability type marks an ability that gives the player new morph forms.
The data for morphs is not configured in the ability editor, however. Morphs
are assigned to the ability inside the morph editor. This type of ability has
no other properties.

Example morph abilities: 4 Wolf Form, 215 Animal Forms

See also: OLC ABILITIES, OLC MORPHS, MORPHEDIT REQUIRES ABILITY
#d
"ABILEDIT MULTI" "ABILEDIT MULTIPLE TARGETS" "MULTIPLE TARGETS ABILITIES"

Abilities may target more than one person. These abilities apply their full
scaling points to each target; it's important to ensure the cost and scaling
settings accommodate how powerful they can be.

Targets: Use one or more of the following targets to indicate who it hits:
 &cALLIES-MULTI&0 - All allies in the room including group members and empiremates.
 &cGROUP-MULTI&0 - Members of your own group (and their companions).
 &cANY-MULTI&0 - All characters in the room.
 &cENEMIES-MULTI&0 - All enemies in the room, including most neutral mobs.
 &yMULTI-CAN-SEE&0 - This modifier will only hit targets if you can see them.

Costs: These abilities may be priced in different ways. Sometimes a flat cost
is appropriate, and other times you should rely on the <costpertarget> field.

Messaging: These should generally start with &cpre-self-to-&0 messages. Each
character hit will trigger &ctarg-to-&0 messages except the player using the
ability, who instead has &cself-to-&0 messages. If combined with the OVER-TIME
flag, &cot-self-to-&0 messages are used (because there is no target character
until the end of the over-time action).

Immunity: If the ability has immunity flags that match characters who would be
targeted by the ability, the player will see "Name is immune" messages for
those characters, but no fail messages. Immune characters do not add to the
cost even if there is a cost-per-target, but the ability's base cost will still
be charged if all possible targets are immune (unlike a single-target ability)
as the pre-messages have already been displayed.

See also: OLC ABILITIES
#d
"ABILEDIT NAME"

Usage:  .name <name>

This lets you set an ability's name. Names should have each word capitalized
and should be relatively short.

By convention, active abilities (ones with their own commands) almost always
have the same name one-word name as the command they will use.

When a player types an ability name (e.g. to buy the ability), the game looks
for exact matches first and then tries a multi-abbreviation approach, where
each word typed by the user is matched sequentially. For example, "hor fo"
matches "Horrid Form".

See also: OLC ABILITIES
#d
"SECTEDIT NOTES"

Usage:  .notes

This text field allows you to set notes that are only visible in the OLC editor
and via the 'stat' command. You can put any information you want in the notes.

See also: OLC, STAT
#d
"ABILEDIT OVER-TIME" "ABILEDIT OVER TIME" "OVER TIME ABILITY" "OVER-TIME ABILITY"

Using the OVER-TIME flag on an ability causes it to take multiple turns, like a
chant or ritual. These abilities cannot be used in combat and require that the
player be standing, regardless of your minimum position setting.

Most types of abilities support this flag. You can set any command name you
like, but if you set the command to "ritual" or "chant", it will add the
ability to the player's ordinary ritual or chant command.

The length of the over-time ability is determined by the number of to-char
messages it has. It uses the ot-self-to- and ot-targ-to- messages. Set as
many of these messages as you like and they will be played in order. The first
message is played when the ability starts and the last one is played as it
ends. Any message that only contains an asterisk (*) will take an action turn,
but won't show a message for that turn.

For example, Ritual of Burdens would be set up with these messages:
 1. [ot-self-to-char] You whisper your burdens into the air...
 2. [ot-self-to-char] *
 3. [ot-self-to-char] You feel the weight of the world lift from your shoulders!
 4. [ot-self-to-room] $n whispers $s burdens into the air...
 5. [ot-self-to-room] *
 6. [ot-self-to-room] $n seems uplifted!

When the ritual completes, it will display the final ot- message and then will
display a self-to- or targ-to- message, if one exists (but will not show the
default message if not). If the REPEAT-OVER-TIME flag is set, the ability will
also immediately show the first ot- message again, too.

You can set how a player appears while performing the ability when someone
types "look" in the room by setting an over-time-longdesc custom message with
$n for their name.

Over-time abilities can NOT have ability hooks. That is, you cannot chain into
an over-time action. Non-over-time abilites can, however, chain from over-time
ones.

See also: OLC ABILITIES, CHANT, RITUAL
#
"ABILEDIT PAINT BUILDING ABILITY" "ABILEDIT PAINT-BUILDING ABILITY" "PAINT BUILDING ABILITY" "PAINT-BUILDING ABILITY" "PAINT BUILDING ABILITIES" "PAINT-BUILDING ABILITIES"

A PAINT-BUILDING ability applies a color to the building. This requires at
least one PAINT-COLOR data entry; more than 1 results in a random choice.
It always targets the room -- you must set a &gROOM&0 target flag.

For a list of paint colors, see HELP PAINT ITEM

Example paint-building abilities: 186 Ritual of Defense

See also: OLC ABILITIES, ABILEDIT TYPES
#d
"ABILEDIT PARENT" "PARENT ABILITY" "CHILD ABILITY" "CHAINED ABILITIES"

Usage:  .data add parent <ability>

Some abilities are too complex to be handled by just 1 ability entry. Using a
combination of PARENT data and ABILITY hooks, it is possible to create more
complex abilities.

When an ability has a parent in its data, players who have that parent ability
automatically gain the other one. An ability with parents may not be added to
a skill or synergy -- it is ONLY granted if the player has at least one of its
parent abilities.

These abilities -- ones granted for free this way -- are not shown to the
player unless they have a command, in which case they're shown on the "skills"
command.

Many abilities with parent data will also have an ability hook for the same
ability as their parent, causing them to trigger whenever the parent ability
goes off. If so, they will be shown on the "ability info" for the parent, like
all abilities with hooks.

Abilities can have more than one type, so you only need to use a 2nd ability
with a parent relationship if the two effects are incompatible -- if they have
different targets, different durations, or different limitations. If those
things are the same, for example an ability that damages someone and gives them
a debuff, it can be accomplished with one ability instead of two.

Possible uses of parent-child abilities:
- More complex abilities (debuff you, buff me)
- Proc for more damage with a 2nd ability at higher difficulty
- Grant a related command with an ability

See also: OLC ABILITIES, ABILEDIT DATA, ABILEDIT HOOK
#d
"ABILEDIT PASSIVE-BUFF ABILITY" "PASSIVE-BUFF ABILITY" "PASSIVE-BUFF ABILITIES" "PASSIVE BUFF ABILITY"

The PASSIVE-BUFF ability type means that the ability applies stats to the
player at all times. These abilities cannot be turned off.

Buff abilities have the following properties:
 <&yaffects&0> Affect flags to set.
 <&yapply&0> Trait modifiers to give.
 <&ylinkedtrait&0> Optional: Higher stats in this trait give a better buff.

Note: Passive-buff abilities are not affected by the 'solo' role's limitation
on being alone; they will remain active.

Example passive-buff abilities: 0 Gift of Nature, 228 Noble Bearing

See also: OLC ABILITIES, ABILEDIT TYPES, PASSIVES
#d
"ABILEDIT PLAYER-TECH ABILITY" "PTECH ABILITY" "PTECH ABILITIES" "PLAYER-TECH ABILITY" "PLAYER-TECH ABILITIES" "PLAYER TECH ABILITY" "PLAYER TECHNOLOGY" "PLAYER TECHNOLOGIES" PTECH "ABILEDIT PTECH" PTECHS

Usage:  .data add ptech <type>

The PLAYER-TECH ability type means that the ability gives a constant effect to
the player. This effect is always on and has no cost. You can use more than one
tech on the same ability. You can use these techs to build fun new abilities,
or reconfigure existing abilities.

Available techs are:
 &cArmor-Heavy&0 * - Can wear heavy armor items (tank).
 &cArmor-Light&0 * - Can wear light armor items (melee).
 &cArmor-Mage&0 * - Can wear mage armor items (caster/healer).
 &cArmor-Medium&0 * - Can wear medium armor items (solo/pvp).
 &cBlock&0 * - Can use shields and block melee attacks with them.
 &cBlock-Ranged&0 * - Can block ranged attacks with shields (requires Block).
 &cBlock-Magical&0 * - Can block magical attacks with shields (requires Block).
 &cBonus-vs-Animals&0 - Extra combat damage when the victim is an animal.
 &cButcher-Upgrade&0 * - Butcher always succeeds.
 &cCustomize-Building&0 * - Can customize buildings.
 &cDeep-Mines&0 * - Mines are 50% larger.
 &cDual-Wield&0 - Gets an offhand attack at a reduced accuracy.
 &cFastcasting&0 * - Wits reduces lag from non-combat abilities rather than
    improving combat speed.
 &cFast-Find&0 * - Dig, gather, and pick are faster.
 &cFish-Command&0 *
 &cForage-Command&0 *
 &cHarvest-Upgrade&0 * - More items received from harvest.
 &cHide-Upgrade&0 * - Guarantees hide and protects from normal 'search'.
 &cInfiltrate&0 * - Allows the player to enter claimed/restricted buildings.
 &cInfiltrate-Upgrade&0 * - Raises the success of infiltrate.
 &cLarger-Light-Radius&0 - +1 light radius (prefer NIGHT-VISION apply instead).
 &cLight-Fire&0 * - Can light torches/fires without any tools.
 &cMap-Invis&0 *^ - Can't be seen at a distance on the map.
 &cMill-Upgrade&0 * - Increases the number of items received from mill.
 &cNavigation&0 * - Orients the map and directions correctly.
 &c!Hunger&0 - Will not get hungry.
 &c!Poison&0 * - Total immunity to poisons.
 &c!Thirst&0 - Will not get thirsty.
 &c!Track-City&0 * - Leaves no tracks in the city or indoors.
 &c!Track-Wild&0 * - Leaves no tracks in the wild, outside of cities.
 &cPickpocket&0 *^ - Can use the pickpocket command/interaction.
 &cPoison&0 *^ - Can use poisons in combat.
 &cPoison-Upgrade&0 * - Improves the effect of all poisons (requires Poison).
 &cPortal&0 * - Can open normal portals at the correct buildings; shorter sickness.
 &cPortal-Upgrade&0 * - Can open longer-range portals (if you can open portals).
 &cRanged-Combat&0 * - Can use a ranged weapon.
 &cRiding&0 * - Can ride/mount.
 &cRiding-Flying&0 * - Can use flying mounts on all terrain (requires Riding).
 &cRiding-Upgrade&0 * - Can travel on rough terrain and ocean (requires Riding).
 &cRough-Terrain&0 * - Can travel between two rough tiles (like mountains).
 &cSee-Chars-In-Dark&0 - Can see people in the room with no light.
 &cSee-Objs-In-Dark&0 - Can see objects in the room with no light.
 &cSee-Inventory&0 * - Can see other players' inventories.
 &cShear-Upgrade&0 * - Increases the number of items received from shear.
 &cSteal-Upgrade&0 * - Can steal from vaults too.
 &cSwimming&0 * - Can move on water tiles with no boat.
 &cTwo-Handed-Mastery&0 * - Bonus damage from two-handed weapons.
 &cWhere-Upgrade&0 * - Increases the range of the 'where' command.
 &cDodge-Cap&0 - Improves the player's maximum dodge percent.
 &cSkinning-Upgrade&0 - Skinning always succeeds.
 &cBarde&0 - Can barde animals.
 &cHerd-Command&0 *
 &cMilk-Command&0 *
 &cShear-Command&0 *
 &cTame-Command&0 *
 &cBite-Melee-Upgrade&0 - Bite lowers cooldown, doesn't taunt, and has a Dot, 
    if in Melee/Solo roles.
 &cBite-Tank-Upgrade&0 - Bite loses the dodge penalty in Tank/Solo and always
    taunts if in Tank role.
 &cBite-Steal-Blood&0 - Bite steals a small amount of blood.
 &cSee-In-Dark-Outdoors&0 - Can see in dark rooms if outdoors.
 &cHunt-Animals&0 * - Can use the 'hunt' command, on animals.
 &cClock&0 * - Can tell the time.
 &cCalendar&0 * - Knows the date.
 &cMint-Command&0 *
 &cTan-Command&0 *
 &cNo-Purify&0 - Player cannot be purified.
 &cVampire-Sun-Immunity&0 * - Vampire powers now work in the sun.
 &cGather-Command&0 *
 &cChop-Command&0 *
 &cDig-Command&0 *
 &cHarvest-Command&0 *
 &cPick-Command&0 *
 &cQuarry-Command&0 *
 &cDrink-Blood-Faster&0 - Vampires drink blood at 2x the speed.
 &cSummon-Materials&0 * - Can use the 'summon materials' command. Supports
    custom pre-retrieve messages using self-to-char and self-to-room.
 &cCustomize-Vehicle&0 * - Can use 'customize vehicle'.
 &cPlant-Crops&0 * - Can use the 'plant' command.
 &cChip-Command&0 *
 &cSaw-Command&0 *
 &cScrape-Command&0 *
 &cMap-Memory&0 * - Remembers blocked/dark tiles on look/scan.
 &cSearch-Command&0 *^
 &cTrack-Command&0 *
 &cResist-Poison&0 * - Reduced effect from poisons.
 &cVampire-Bite&0 *^ - Can use bite for blood, if a vampire, rather than the social.
 &cEnemy-Buff-Details&0 * - Can see full details using 'affects' on others.
 &cConceal-Equipment&0 * - Others cannot see your equipment on 'look'.
 &cConceal-Inventory&0 * - Others cannot see your inventory on 'look'.
 &cFlee-Upgrade&0 * - Increased chance to flee.
 &cFaster-Melee-Combat&0 * - Slight speed boost in melee combat.
 &cFaster-Ranged-Combat&0 * - Slight speed boost in ranged combat.
 &cRiding-Swap-Anywhere&0 * - Can mount-swap without a stable.
 &cRiding-Release-Mount&0 * - Can release mounts as mobs.
 &cRework-Command&0 * - Player can rework items.
 &cBite-Regeneration&0 * - Rapid HMV regeneration while drinking blood.
 &cSteal-Command&0 *^ - Allows 'steal'.

* Techs marked with an asterisk trigger ability gains on their own without gain hooks.
^ Techs marked with a carat support difficulty settings on the ability.

Example player-tech abilities: 18 Search, 143 Steal

See also: OLC ABILITIES, ABILEDIT DATA, ABILEDIT TYPES
#d
"ABILEDIT READY-WEAPONS ABILITY" "READY-WEAPONS ABILITY" "READY-WEAPONS ABILITIES" "READY WEAPONS ABILITY" "READY-WEAPON ABILITY" "READY WEAPON ABILITIES"

The READY-WEAPONS ability type enables the player to summon items directly to
their wield, hold, or ranged slot. These are temporary weapons and should be
set to disappear when removed.

Ready-weapon abilities may have their own command, or the can add to the
player's 'ready' command. This type supports the TOGGLE flag, which removes
the weapon from the equipment slot if the command is typed again while still
using it.

Ready-Weapons abilities have the following:
 <&ycommand&0> If the ability is adding options to the 'ready' command, set its
   command to 'ready' (or leave it blank). If it has its own command, use that
   instead.
 <&ydata&0> Add the READY-WEAPON data type to grant weapons.
   - You should usually set the 1-USE flag on the weapon.
   - Only weapons and ranged weapons can be used.
   - If a weapon has HOLD but not WIELD, it will equip to the hold slot.
     Otherwise, it will only equip to the wield slot.
 <&ygainhooks&0> This set of gain hooks gives experience when fighting with
   the weapons from this ability: MELEE RANGED ONLY-USING-READY-WEAPON
 <&yminposition&0> Determine if they can ready a new weapon in combat.
 <&ytargets&0> If there's only one weapon in the data, or it will pick at
   random from the data, set the IGNORE target. If they choose from the list,
   set the STRING target instead.
 <&ymasteryability&0> A mastery ability will cause the readied weapon to be
   superior in quality.

Messages:
- The ready command will use the &cself-to-char&0 and &cself-to-room&0 custom
  messages.
- For pre-ability messages, use &cpre-self-to-char&0 and &cpre-self-to-room&0.
- For the actual summoning of the item, it uses &cper-item-to-char&0 and
  &cper-item-to-room. &y$n&0 represents the player and &y&p&0 represents the
  weapon.
- For fails, use &cfail-self-to-char&0 and &cfail-self-to-room&0.
- With the TOGGLE flag, you may set &ctoggle-to-char&0 and &ctoggle-to-room&0,
  but it may be better to set &gremove-to-char&0 and &gremove-to-room&0 on the
  weapon itself because they are also displayed if the player removes the
  weapon.

Example ready-weapon abilities: 6 Ready Blood Weapons, 8 Claws

See also: OLC ABILITIES, ABILEDIT TYPES, READY
#d
"ABILEDIT POOLTYPE" "ABILEDIT POOL TYPE"

Usage:  .pooltype <health | mana | move | blood | any>

This determines which pool a RESTORE ability will affect. If you set it to
'any', the player will choose which to restore from health, mana, or move
(not blood).

See also: RESTORE ABILITY
#d
"ABILEDIT RESOURCE ABILITY" "ABILEDIT RESOURCE ABILITIES" "RESOURCE ABILITY" "RESOURCE ABILITIES"

The RESOURCE ability type marks an ability as mainly related to resource-gain.
This type of ability does not have properties of its own, but it's often used
through other editors to give the player access to more things.

For example, ability 70 Find Herbs is used in the interaction list of many
sectors (terrains) to restrict who can get herbs by using 'pick' there. Here's
an example of that interaction:
 1. PICK: 125-max iridescent blue iris (1206) 8.33% (p)
 2. PICK: 125-max sack of fiveleaf (1201) 100.00% (p) (Ability: Find Herbs)
 3. PICK: 125-max small flower (123) 100.00% (p)

With those interactions, all players find the iris at 8.33%, but someone with
Find Herbs will get fiveleaf the rest of the time, while someone without it
finds only small flowers.

See also: OLC ABILITIES
#d
"ABILEDIT RESOURCECOST" "ABILEDIT RESOURCE COST"

Usage:  .resource add <type> <amount> <vnum/name>
        .resource change <number> <quantity | vnum | name | flags> <value>
        .resource remove <number | all>
        .resource move <number> <up | down>

This command sets the resources required to use the ability.

See HELP OLC RESOURCES for more information.

See also: OLC ABILITIES, RESOURCE ACTIONS
#d
"ABILEDIT RESTORE ABILITY" "ABILEDIT RESTORATION ABILITY" "RESTORE ABILITIES" "RESTORATION ABILITIES"

The RESTORE ability type gives some health, mana, moves, or blood to the target
when used. It can also offer the user the choice of health, mana, or moves
(they cannot choose blood).

Properties of restore abilities:
 <&ypooltype&0> Which pool it restores, or "any" to let the user pick.

Messaging:
- Uses regular &cself-to-char&0 or &ctarg-to-char&0 messages, but will append
  the amount that was restored.

Example restore abilities: 27 Regenerate, 110 Heal Friend, 111 Heal Party

See also: OLC ABILITIES, ABILEDIT TYPES
#d
"ABILEDIT RESURRECT ABILITY" "ABILEDIT RESURRECTION" "RESURRECT ABILITIES" "RESURRECTION ABILITIES"

The RESURRECT ability offers resurrection to a dead player or corpse target.
If the caster is in combat, the resurrected player will receive a boost to
health, mana, moves, hungry, and thirst.

For vampires, blood is reduced to 20% after resurrection.

If the ability can target the character themselves while dead, the offer step
is skipped.

Targeted resurrection messages:
 &ctarg-to-char&0 - Send to the caster when starting to resurrect.
 &ctarg-to-vict&0 - Sent to the target, no matter where they are.
 &ctarg-to-room&0 - Sent to the room the caster is in.

Self-resurrection messages:
 &cself-to-char&0 - Sent to the caster when resurrecting.
 &cself-to-room&0 - Sent to teh room the caster is in when resurrecting.

When the resurrection completes, it also sends:
 &cspec-to-char&0 - Sent to the person being resurrected.
 &cspec-to-room&0 - Sent ot the room the person resurrects in with $n as the
   person being resurrected (not the caster).

Example resurrect abilities: 219 Resurrect, 242 Deathrise

See also: OLC ABILITIES, OFFERS
#d
"ABILEDIT ROOM AFFECT ABILITY" "ABILEDIT ROOM-AFFECT ABILITY" "ROOM AFFECT ABILITY" "ROOM-AFFECT ABILITY" "ROOM AFFECT ABILITIES" "ROOM-AFFECT ABILITIES"

The ROOM-AFFECT ability type means that the ability will place an effect on the
room. This type of ability cannot be combined with buff or passive-buff
abilities. It always targets the room -- you must set a &gROOM&0 target flag.

These support the TOGGLE flag if the player can choose to end them.

Properties of room-affect abilities:
 <&yshortduration&0> How long it lasts (at low skill level).
 <&ylongduration&0> How long it lasts (at high skill level).
 <&yaffects&0> Room affect flags to set.
 <&yaffectvnum&0> Which affect (generic) to use for the affect.

Example room-affect abilities: 11 Darkness, 186 Ritual of Defense

See also: OLC ABILITIES, ABILEDIT TYPES, ROOM AFFECTS
#d
"ABILEDIT SCALE"

Usage:  .scale <percent>

This allows you to make an ability more or less powerful. Be warned: game
balance relies on abilities being in balance with each other. If you increase
the 'scale' on an ability, you should also increase its cost and/or cooldown.

See also: ABILEDIT COOLDOWN, ABILEDIT COST, OLC ABILITIES
#d
"ABILEDIT SHORTDURATION" "ABILEDIT SHORT DURATION" "ABILEDIT LONGDURATION" "ABILEDIT LONG DURATION" "ABILEDIT DURATIONS"

Usage:  .shortduration <seconds | unlimited>
        .longduration <seconds | unlimited>

For buff/dot abilities, this is how long the effect lasts. Short duration
applies when the actor has the skill at a low level. Long duration is used when
the ability's assigned skill is at its max level. It the ability isn't from a
skill tree, short duration is used under level 100.

Be careful with unlimited duration buffs -- these should always be self-only
toggles. DoTs cannot have unlimited duration.

If an ability only has one duration, that duration is always used. You can also
choose to set both durations to the same amount of time.

See also: OLC ABILITIES, BUFF ABILITIES, DOT ABILITIES
#d
"ABILEDIT SUMMON ABILITY" "SUMMON ABILITY" "SUMMON ABILITIES" "ABILEDIT SUMMON-ANY ABILITY" "SUMMON-ANY ABILITY" "SUMMON-ANY ABILITIES" "ABILEDIT SUMMON-RANDOM ABILITY" "SUMMON-RANDOM ABILITY" "SUMMON-RANDOM ABILITIES"

The SUMMON-* ability types add 1 or more mobs to the player's 'summon' command.
Players can have a limited number of followers at a time, including ones from
summons.

Summon abilities have the following properties:
 <&ycommand&0> Summons may have their own command or may share the 'summon'
              command.
 <&ylinkedtrait&0> Optional: If you set a linked trait, more than one mob may
              be summoned at a time if that trait is high.
 <&ytargets&0> Use IGNORE for SUMMON-RANDOM and STRING for SUMMON-ANY.
 <&ydata&0> Add the SUMMON-MOB data type to grant new mobs.
            - A SUMMON-ANY ability allows the player to choose which mob from
              the ability's data. If using the 'summon' command, they're
              summoned by mob name rather than ability name.
            - A SUMMON-RANDOM ability chooses at random and, if using the
              'summon' command, is summoned by ability name.
            - You can set level limits on the mob.
 <&yflags&0> The ONE-AT-A-TIME flag will block new summons while any mobs from
              the ability data are in the room and either following you or
              following nobody (ones following other players are ignored).

Notes:
- Summoned mobs silently follow the player. Use a trigger like #9804 to cancel
  it using mfollow if you don't want this.
- If you want the summoned mob to be charmed, use a trigger like #9805.
- Setting a linked trait will increase the number of summons but it's really
  only implemented for base attributes like Strength and Wits.
- There is a limit on the number of mobs in the room at a time, which will
  block some summons. All summons that use the 'summon' command are prevented
  by this limit. Summons with their own command will still allow you to summon
  1 mob and, in this case, should usually have the ONE-AT-A-TIME flag.

Messaging:
- Displays &cpre-self-to-char&0 and &cpre-self-to-room&0 first, then &cself-to-char&0
  and &cself-to-room&0 if it succeeds.
- Displays &cfail-self-to-char&0 and &cfail-self-to-room&0 if it fails.
- Successful summons each send &cper-char-to-char&0 and &cper-char-to-room&0
  messages.

When a mob is summoned, it automatically gets the SPAWNED, !LOOT, and !EXP
flags.

Example summon abilities: 168 Summon Swift, 34 Summon Animals

See also: OLC ABILITIES, ABILEDIT TYPES, COMPANION
#d
"ABILEDIT SUPERCEDE" "ABILEDIT SUPERCEDED-BY" "SUPERCEDING ABILITIES" "SUPERCEDED-BY ABILITIES"

The SUPERCEDED-BY ability data indicates that another ability replaces this
one. If the player tries to use an ability and they also have the one it's
superceded by, they automatically use that one instead. Generally both
abilities should have the same command.

This is used, for example, to improve the player's "heal" command:
 [109] Heal - A basic ability that only heals the user.
 [110] Heal Friend - A slightly cheaper heal that also heals others.
 [111] Heal Party - An even better heal that can target the whole group.

See also: OLC ABILITIES, ABILEDIT DATA
#d
"ABILEDIT TARGETS"

Usage:  .targets [add | remove] <flag>

This determines what targets an ability has.

Character targets:
 &ySELF-ONLY&0 - Targets the user.
 &cCHAR-ROOM&0 - A character in the room with the actor.
 &cCHAR-WORLD&0 - A character anywhere in the world.
 &cCHAR-CLOSEST&0 - The closest person with that name.

Object targets:
 &cOBJ-INV&0 - An object in your inventory.
 &cOBJ-ROOM&0 - An object on the ground.
 &cOBJ-WORLD&0 - An object anywhere.
 &cOBJ-EQUIP&0 - An object you're wearing.

Room targets:
 &cROOM-HERE&0 - Targets the room you're in.
 &cROOM-ADJACENT&0 - A room in a given direction.
 &cROOM-EXIT&0 - The room outside (from a building or vehicle).
 &cROOM-HOME&0 - The player's home, if any.
 &cROOM-RANDOM&0 - A random room (up to the distance from RANGE data).
 &cROOM-RANDOM-CAN-USE&0 - A random room the player has at least guest
   permission in (up to the distance from RANGE data).
 &cROOM-CITY&0 - A city (center) in the player's empire, by city name.
 &cROOM-COORDS&0 - Any room by coordinates.

Vehicle targets:
 &cVEH-ROOM&0 - A vehicle (or vehicle-style building) in the room.
 &cVEH-WORLD&0 - A vehicle anywhere.

Multiple targets (see ABILEDIT MULTI):
 &cALLIES-MULTI&0 - Can target all allies.
 &cGROUP-MULTI&0 - Can target whole group.
 &cANY-MULTI&0 - Can target all characters in the room.
 &cENEMIES-MULTI&0 - Can target all enemies.

Miscellaneous targets:
 &cIGNORE&0 - Has no automatic targets.
 &cSTRING&0 - An argument is required, but not a traditional target.

Modifier flags (use in combination with the above flags):
 &yFIGHT-SELF&0 - Targets self if no argument while fighting.
 &yFIGHT-VICTIM&0 - Targets victim if no argument while fighting.
 &yNOT-SELF&0 - Character target cannot be self.
 &yNOT-ALLY&0 - Cannot target an ally.
 &yNOT-ENEMY&0 - Cannot target an enemy.
 &yDEAD-OK&0 - Can target dead people (otherwise they are invalid).
 &yMULTI-CAN-SEE&0 - For multi-targeting, must be able to see each target.

See also: OLC ABILITIES
#d
"ABILEDIT TELEPORT ABILITY" "TELEPORT ABILITY" "TELEPORT ABILITIES"

The TELEPORT ability type moves the player from one room to another. It can
target any target type.

If you use the ROOM-RANDOM or ROOM-RANDOM-CAN-USE target, you must set a RANGE
in the ability's data. This range will only apply to random targets unless you
also add the "within range" limitation, which will apply it to all targets.

Messages when teleporting to rooms:
 Sent at the start: &cpre-self-to-char&0 and &cpre-self-to-room&0
 Sent right before teleporting: &cself-to-char&0 and &cself-to-room&0
 Sent after self-to-char with bad target: &cfail-self-to-char&0 and &cfail-self-to-room&0
 Sent when appearing: &cspec-to-char&0 and &spec-to-room&0

Messages when teleporting to targets:
 Sent at the start: &cpre-targ-to-char&0 &cpre-targ-to-vict&0 &cpre-targ-to-room&0
 Sent right before teleporting: &ctarg-to-char&0 &ctarg-to-vict&0 and &ctarg-to-room&0
 Sent after targ-to-char with bad target: &cfail-targ-to-char&0 &cfail-targ-to-vict&0 and &cfail-targ-to-room&0
 Sent when appearing: &cspec-to-char&0 &cspec-to-vict&0 and &spec-to-room&0
 Note: &c-to-vict&0 messages are sent even from another room.

Messages:
 Sent first: &cpre-self-to-char&0 and &cpre-self-to-room&0 (both optional)
 Sent when each item appears: &cper-item-to-char&0 and &cper-item-to-room&0
   Using &y$p&0 for the item. These messages are also optional.
 Sent on failure only if no pre-messages were sent: &cfail-self-to-char&0 and
   &cfail-self-to-room&0

Example teleport abilities: 146 Escape, 153 Shadowstep, 188 City Teleportation

See also: OLC ABILITIES, ABILEDIT TYPES
#d
"ABILEDIT TESTING"

This help file assists with building the correct set of messages for an
ability. Many types of abilities can send several types of messages and one of
the trickiest parts of building an ability is setting the correct ones.

Add the following messages to your ability, save it, and use it to see which
ones are displayed. These commands will add the full set of messages:

.cust add self-to-char self-to-char
.cust add self-to-room self-to-room
.cust add targ-to-char targ-to-char $N
.cust add targ-to-vict targ-to-vict
.cust add targ-to-room targ-to-room
.cust add counter-to-char counter-to-char $N
.cust add counter-to-vict counter-to-vict
.cust add counter-to-room counter-to-room
.cust add fail-self-to-char fail-self-to-char
.cust add fail-self-to-room fail-self-to-room
.cust add fail-targ-to-char fail-targ-to-char $N
.cust add fail-targ-to-vict fail-targ-to-vict
.cust add fail-targ-to-room fail-targ-to-room
.cust add pre-self-to-char pre-self-to-char
.cust add pre-self-to-room pre-self-to-room
.cust add pre-targ-to-char pre-targ-to-char $N
.cust add pre-targ-to-vict pre-targ-to-vict
.cust add pre-targ-to-room pre-targ-to-room
.cust add per-veh-to-char per-veh-to-char $V
.cust add per-veh-to-room per-veh-to-room
.cust add per-item-to-char per-item-to-char $p
.cust add per-item-to-room per-item-to-room
.cust add over-time-longdesc over-time-longdesc
.cust add toggle-to-char toggle-to-char
.cust add toggle-to-room toggle-to-room
.cust add per-char-to-char per-char-to-char $N
.cust add per-char-to-vict per-char-to-vict
.cust add per-char-to-room per-char-to-room
.cust add spec-to-char spec-to-char $N
.cust add spec-to-vict spec-to-vict
.cust add spec-to-room spec-to-room
.cust add no-argument no-argument
.cust add ot-self-to-char ot-self-to-char start
.cust add ot-self-to-room ot-self-to-room start
.cust add ot-targ-to-char ot-targ-to-char start
.cust add ot-targ-to-vict ot-targ-to-vict start
.cust add ot-targ-to-room ot-targ-to-room start
.cust add ot-self-to-char ot-self-to-char end
.cust add ot-self-to-room ot-self-to-room end
.cust add ot-targ-to-char ot-targ-to-char end
.cust add ot-targ-to-vict ot-targ-to-vict end
.cust add ot-targ-to-room ot-targ-to-room end
.cust add immune-self-to-char immune-self-to-char
.cust add immune-targ-to-char immune-targ-to-char $N

See also: ABILEDIT CUSTOM
#d
"ABILEDIT TYPES" "ABILITY TYPES"

Usage:  .types add <type> [weight]
        .types change <type> <weight>
        .types remove <type>

Ability types determine how they behave, and open up additional editor options.
The 'weight' of an ability type determines what percentage of scaling points it
receives, similar to the applies on objects, morphs, etc.

Weights can be 0, meaning they don't take any scaling points from other types.
Any type with a weight of 0 should still get 1 point worth of effect.

The following types are available (each has its own help file):
 &cACTION&0 - Executes and action; see ABILEDIT ACTIONS.
 &cATTACK&0 - Perform a normal weapon attack; often paired with STOP-ON-MISS.
 &cAUGMENT&0 - Used for augments/enchanting. No inherent properties.
 &cBUFF&0 - Puts affects on characters.
 &cBUILDING-DAMAGE&0 - Damages a vehicle or building.
 &cCOMPANION&0 - Adds 1 or more mobs to the player's 'companions' command.
 &cCONJURE-LIQUID&0 - Creates liquid in a drink container.
 &cCONJURE-OBJECT&0 - Creates one or more items.
 &cCONJURE-VEHICLE&0 - Create a vehicle in the room.
 &cCRAFT&0 - Used for craft/building recipes. No inherent properties.
 &cCUSTOM&0 - Ability is hard-coded, not parameterized.
 &cDAMAGE&0 - Deals direct damage.
 &cDOT&0 - Adds a damage-over-time effect.
 &cLINK&0 - Helper type for complex hook abilities.
 &cMASTERY&0 - No inherent properties; just a label where applicable.
 &cMORPH&0 - Ability has morphs that require it.
 &cPAINT-BUILDING&0 - Applies a coat of paint to the buliding.
 &cPASSIVE-BUFF&0 - Applies stats to the player all the time.
 &cPTECH&0 - Various 'techs' that players get from abilities.
 &cREADY-WEAPONS&0 - Adds weapons to the player's 'ready' command.
 &cRESOURCE&0 - Used for resources, e.g. on interaction restrictions.
 &cRESTORE&0 - Gives some health, move, mana, or blood points.
 &cRESURRECT&0 - Offers resurrection; see ABILEDIT RESURRECT.
 &cROOM-AFFECT&0 - Similar to a buff, for the room.
 &cSUMMON-ANY&0 - Player chooses from a list of mobs to summon.
 &cSUMMON-RANDOM&0 - Player summons a random mob from this list.
 &cTELEPORT&0 - Teleports the player; see ABILEDIT TELEPORT.

See also: OLC ABILITIES, BUFF ABILITY, CRAFT ABILITY, DAMAGE ABILITY,
   DOT ABILITY, PLAYER-TECH ABILITY, PASSIVE-BUFF ABILITY, etc.
#d
"ABILEDIT WAITTYPE" "ABILEDIT WAIT TYPE" "WAIT TYPES"

Usage:  .waittype <type>

The wait type is how long the character has "command lag" after using this
ability. These are standardized wait times, so you select them from a list
based on what type of ability you're making.

Most waits are currently 1.25 seconds.

Choose the wait type that best fits your ability:
  &cNONE&0 - no wait
  &cABILITY&0 - basic ability (not combat)
  &cCOMBAT-ABILITY&0 - combat ability (like kick)
  &cCOMBAT-SPELL&0 - combat spell
  &cMOVEMENT&0 - basic movement, based on riding etc; wait time based on
     terrain, abilities, and traits
  &cSPELL&0 - a basic spell (not a combat spell); Fastcasting reduces this wait
  &cOTHER&0 - anything else that needs a wait

See also: COMMAND LAG, OLC ABILITIES
#d
"ABILITY EFFECTS" "ABILEDIT EFFECTS"

Usage:  .data add effect <type>

Some abilities have 'effects' which happen when the ability is activated. These
happen at the beginning of the ability.

Available effect types are:
 &cdismount&0 - The player will be dismounted
 &cdistrust from hostile&0 - Triggers distrust from the target's empire

See also: ABILEDIT DATA
#d
"ADVEDIT AUTHOR"

Usage:  .author <name>

This allows you to set the name of the author of the zone, which is used to
give credit to the original builder.

See also: OLC ADVENTURES
#d
"ADVEDIT CASCADE" "ADVEDIT UNCASCADE" CASCADE UNCASCADE

Usage:  .adv cascade <adventure vnum>
        .adv uncascade <adventure vnum>

The cascade command will apply the adventure's min/max levels to all the mobs
and objects in the adventure that don't already have their own min/max. This
command will ignore any mob/item that already has either a min or max level.

The uncascade command removes the min/max level from all mobs and objects whose
min/max are identical to the adventure's own settings.

Both commands ignore objects that don't have the SCALABLE flag.

See also: OLC ADVENTURES
#d
"ADVEDIT DESCRIPTION"

Usage:  .description

The adventure description is shown to players who request information about the
adventure.

The description is set in the string editor. You should use /fi to format it
with indent inside the string editor.

See also: OLC ADVENTURES, STRING EDITOR
#d
"ADVEDIT ENDVNUM" "ADVEDIT END VNUM" "ADVEDIT STARTVNUM" "ADVEDIT START VNUM"

Usage:  .startvnum <vnum>
        .endvnum <vnum>

The vnum range determines which room templates are loaded when the instance is
instantiated. All rooms in the adventure must fall within this vnum range.

Only high-level immortals can edit the vnums of an adventure. Lower-level imms
may edit other properties of their own adventures.

See also: OLC ADVENTURES
#d
"ADVEDIT FLAGS" "ADVENTURE FLAGS"

Usage:  .flags [add | remove] <flags>

The following adventure flags are available:
 &cIN-DEVELOPMENT&0 - The adventure will not be instantiated in the world.
 &cLOCK-LEVEL-ON-ENTER&0 - Instance level locks when a player enters.
 &cLOCK-LEVEL-ON-COMBAT&0 - Instance level locks when a player fights.
 &c!NEARBY&0 - Instances do not show up when players type nearby.
 &cROTATABLE&0 - Each instance will have a random orientation (whole zone rotates).
 &cCONFUSING-RANDOMS&0 - The instancer will not logically match random exits.
 &c!NEWBIE&0 - Will not spawn on newbie islands.
 &cNEWBIE-ONLY&0 - Only spawns on newbie islands.
 &cNO-MOB-CLEANUP&0 - Won't despawn mobs that got out of the instance on cleanup.
 &cEMPTY-RESET-ONLY&0 - Won't reset while players are inside.
 &cCAN-DELAY-LOAD&0 - Saves memory by not loading until a player arrives for the
    first time.
 &cIGNORE-WORLD-SIZE&0 - Won't adjust the number of instances based on the world.
 &cIGNORE-ISLAND-LEVELS&0 - Will spawn on an island without checking player levels.
 &cCHECK-OUTSIDE-FIGHTS&0 - Makes sure nobody is fighting a mob from the instance
 &c   outside the adventure, before despawning.
 &cGLOBAL-NEARBY&0 - Shows the nearest location from any distance.
 &cDETECTABLE&0 - Can be detected with the ability action "detect adventures around".

See also: ADVEDIT MINLEVEL, OLC ADVENTURES, OLC REMOVEINDEV
#d
"ADVEDIT LIMIT" "INSTANCE LIMIT"

Usage:  .limit <number>

This number controls how many copies of an adventure can exist in the world
at a time. The number you set here is used on default EmpireMUDs with roughly
a 300000-tile world. Your MUD automatically adjusts the instance limit if you
have a larger or smaller world than that.

If you want a fixed number of instances with no adjusting, set the
IGNORE-WORLD-SIZE flag on the adventure.

See also: ADVEDIT FLAGS, OLC ADVENTURES
#d
"ADVEDIT BDG-EXISTING" "ADVEDIT LINK BDG-EXISTING" "ADVEDIT LINKING BDG-EXISTING"

Usage:  .linking add BDG-EXISTING <building vnum> <dir> [flags]

This adds an exit, in the direction of your choice (or "random"), to an exist-
ing building in the world. If you don't set the CLAIMED-OK flag, it will only
target unclaimed buildings, which may be rarer depending on player behavior.

CAUTION: this will NOT work well with "open"-style buildings, such as
fountains, because they can't have normal exits. If you want to connect an
adventure to an open building, use PORTAL-BDG-EXISTING instead.

See also: ADVEDIT LINKING, VNUM
#d
"ADVEDIT BDG-NEW" "ADVEDIT LINK BDG-NEW" "ADVEDIT LINKING BDG-NEW"

Usage:  .linking add BDG-NEW <building vnum> <dir> "<build on>" ["build facing"] [flags]

This will construct a new building somewhere in the world. The direction you
specify will be the direction of the exit from the building into the adventure
zone. The building may face a random direction.

You must specify flags for what type of terrain it can be built upon. In most
cases, you must also specify the type(s) of terrain it must be built facing.
Both of these are the same as the "buildon" and "buildfacing" flags from the
craft and sector editors; see &yHELP SECTEDIT BUILDFLAGS&0.

CAUTION: If you use this with an "open" building such as a fountain, there will
be no entrance to the interior templated rooms. This is usually undesirable
(use PORTAL-BDG-NEW instead), but it can also be used to create map-only
adventures.

CAUTION: You must not use designated rooms (or any "building" with the ROOM
flag) for this, because they can't be built on the map.

See also: ADVEDIT LINKING, SECTEDIT BUILDFLAGS, VNUM
#d
"ADVEDIT EVENT-RUNNING" "ADVEDIT LINK EVENT-RUNNING" "ADVEDIT LINKING EVENT-RUNNING"

Usage:  .linking add EVENT-RUNNING <event vnum>

This linking rule means the event can only spawn when a certain event is
running. It will also auto-complete all instances if they are open and the
event is not running.

See also: ADVEDIT LINKING
#d
"ADVEDIT IN-VEHICLE-EXISTING" "ADVEDIT LINK IN-VEHICLE-EXISTING" "ADVEDIT LINKING IN-VEHICLE-EXISTING"

Usage:  .linking add IN-VEHICLE-EXISTING <vehicle vnum> [flags]

The adventure will be the interior of an existing vehicle in the world, meaning
that when a player types "board <vehicle>" or "enter <vehicle>", they will be
placed inside the adventure.

If a vehicle already has an interior, it will not qualify for this linking
rule. To link to the existing interior of a vehicle, link to a room (building)
that's used in that vehicle with a BDG-EXISTING linking rule.

The vehicle must be unclaimed unless the CLAIMED-OK flag is set. After the
adventure ends, the vehicle will be left behind.

See also: ADVEDIT LINKING, VNUM
#d
"ADVEDIT IN-VEHICLE-NEW-BDG-EXISTING" "ADVEDIT LINK IN-VEHICLE-NEW-BDG-EXISTING" "ADVEDIT LINIKING IN-VEHICLE-NEW-BDG-EXISTING"

Usage:  .linking add IN-VEHICLE-NEW-BDG-EXISTING <vehicle vnum> <building vnum> [flags]

The adventure will be the interior of a new vehicle, placed at an existing
building (or interior room) somewhere in the world. When a player types 
"board <vehicle>" or "enter <vehicle>", they will be placed inside the
adventure.

After the adventure ends, the vehicle will vanish unless you remove its
*TEMPORARY flag.

See also: ADVEDIT LINKING, VNUM
#d
"ADVEDIT IN-VEHICLE-NEW-BDG-NEW" "ADVEDIT LINK IN-VEHICLE-NEW-BDG-NEW" "ADVEDIT LINKING IN-VEHICLE-NEW-BDG-NEW"

Usage:  .linking add IN-VEHICLE-NEW-BDG-NEW <vehicle vnum> <building vnum> "<build on>" "[build facing]" <[flags]

The adventure will be the interior of a new vehicle, placed at a new building
which is build on the map based on your build-on and build-facing flags. When a
player types "board <vehicle>" or "enter <vehicle>", they will be placed
inside the adventure.

If you use multiple build-on or build-facing flags, they must be in quotes.
If there are no build-facing flags (for an open building), use an empty pair
of quotes: ""

After the adventure ends, the vehicle will vanish unless you remove its
*TEMPORARY flag.

See also: ADVEDIT LINKING, VNUM, CEDIT BUILDON, CEDIT BUILDFACING
#d
"ADVEDIT IN-VEHICLE-NEW-CROP" "ADVEDIT LINK IN-VEHICLE-NEW-CROP" "ADVEDIT LINKING IN-VEHICLE-NEW-CROP"

Usage:  .linking add IN-VEHICLE-NEW-CROP <vehicle vnum> <crop vnum> [flags]

The adventure will be the interior of a new vehicle, which is placed at a crop
tile somewhere in the world. When a player types "board <vehicle>" or
"enter <vehicle>", they will be placed inside the adventure.

After the adventure ends, the vehicle will vanish unless you remove its
*TEMPORARY flag.

See also: ADVEDIT LINKING, VNUM
#d
"ADVEDIT IN-VEHICLE-NEW-WORLD" "ADVEDIT LINK IN-VEHICLE-NEW-WORLD" "ADVEDIT LINKING IN-VEHICLE-NEW-WORLD"

Usage:  .linking add PORTAL-VEHICLE-NEW-CROP <vehicle vnum> <sector vnum> [flags]

The adventure will be the interior of a new vehicle, which is placed at at tile
of the given sector somewhere in the world. When a player types
"board <vehicle>" or "enter <vehicle>", they will be placed inside the
adventure.

After the adventure ends, the vehicle will vanish unless you remove its
*TEMPORARY flag.

See also: ADVEDIT LINKING, VNUM
#d
"ADVEDIT NOT-NEAR-SELF" "ADVEDIT LINK NOT-NEAR-SELF" "ADVEDIT LINKING NOT-NEAR-SELF"

Usage:  .linking add NOT-NEAR-SELF <distance>

This linking rule limits all other rules based on distance. You can use it to
keep the same adventure from spawning two copies in close proximity.

All distances are measured in map tiles. Setting a NOT-NEAR-SELF of 50 would
mean no two copies of the adventure will link within 50 tiles of each other.

See also: ADVEDIT LINKING
#d
"ADVEDIT PORTAL-CROP" "ADVEDIT LINK PORTAL-CROP" "ADVEDIT LINKING PORTAL-CROP"

Usage:  .linking add PORTAL-CROP <crop vnum> <portal-in vnum> <portal-out vnum> [flags]

This will spawn a portal somewhere in the world, matching the crop of your
choice. You must provide portal object vnums for the in- and out-portals, but
it is okay if both are the same.

Remember that the portals don't have to be called portals. You could use "a
strange door in the side of the tree", and the messages would look correct
when players type "enter door" or "enter tree".

See also: ADVEDIT LINKING, VNUM
#d
"ADVEDIT PORTAL-WORLD" "ADVEDIT LINK PORTAL-WORLD" "ADVEDIT LINKING PORTAL-WORLD"

Usage:  .linking add PORTAL-WORLD <sector vnum> <portal-in vnum> <portal-out vnum> [flags]

This will spawn a portal somewhere in the world, matching the sector of your
choice. You must provide portal object vnums for the in- and out-portals, but
it is okay if both are the same.

Remember that the portals don't have to be called portals. You could use "a
strange door in the side of the tree", and the messages would look correct
when players type "enter door" or "enter tree".

CAUTION: if you choose a sector like "Building", the portal will be able to
spawn in any building. You should NEVER use the "Adventure Room" sector, as
spawning an adventure inside of random adventures will have strange side-
effects, such as trapping players in the 2nd adventure.

See also: ADVEDIT LINKING, VNUM
#d
"ADVEDIT PORTAL-BDG-EXISTING" "ADVEDIT LINK PORTAL-BDG-EXISTING" "ADVEDIT LINKING PORTAL-BDG-EXISTING"

Usage:  .linking add PORTAL-BDG-EXISTING <building vnum> <portal-in vnum> <portal-out vnum> [flags]

This will spawn a portal in a random building (or designated room) matching the
vnum you set here. You must provide portal object vnums for the in- and out-
portals, but it is okay if both are the same.

Remember that the portals don't have to be called portals. You could use "a
trapdoor in the floor", and the messages would look correct when players type
"enter trapdoor".

See also: ADVEDIT LINKING, VNUM
#d
"ADVEDIT PORTAL-BDG-NEW" "ADVEDIT LINK PORTAL-BDG-NEW" "ADVEDIT LINKING PORTAL-BDG-NEW"

Usage:  .linking add PORTAL-BDG-NEW <building vnum> <portal-in vnum> <portal-out vnum> "<build on>" "[build facing]" [flags]

This will first create a building on the map, and then spawn a portal inside
it. You must provide portal object vnums for the in- and out-portals, but it
is okay if both are the same.

You must specify flags for what type of terrain it can be built upon. In most
cases, you must also specify the type(s) of terrain it must be built facing.
Both of these are the same as the "buildon" and "buildfacing" flags from the
craft and sector editors; see &yHELP SECTEDIT BUILDFLAGS&0.

Remember that the portals don't have to be called portals. You could use "a
trapdoor in the floor", and the messages would look correct when players type
"enter trapdoor".

CAUTION: You must not use designated rooms (or any "building" with the ROOM
flag) for this, because they can't be built on the map.

See also: ADVEDIT LINKING, SECTEDIT BUILDFLAGS, VNUM
#d
"ADVEDIT PORTAL-VEHICLE-EXISTING" "ADVEDIT LINK PORTAL-VEHICLE-EXISTING" "ADVEDIT LINKING PORTAL-VEHICLE-EXISTING"

Usage:  .linking add PORTAL-VEHICLE-EXISTING <vehicle vnum> <portal-in vnum> <portal-out vnum> [flags]

The adventure spawns as a portal at an existing vehicle in the world. This will
not affect the vehicle or its interior, but the portal will move with the
vehicle.

You must provide portal object vnums for the in- and out-portals, but it is
okay if both are the same. Remember that the portals don't have to be called
portals. You could use "a strange door in the side of the tree", and the
messages would look correct when players type "enter door" or "enter tree".

The vehicle must be unclaimed unless the CLAIMED-OK flag is set. After the
adventure ends, the vehicle will be left behind.

See also: ADVEDIT LINKING, VNUM
#d
"ADVEDIT PORTAL-VEHICLE-NEW-BDG-EXISTING" "ADVEDIT LINK PORTAL-VEHICLE-NEW-BDG-EXISTING" "ADVEDIT LINKING PORTAL-VEHICLE-NEW-BDG-EXISTING"

Usage:  .linking add PORTAL-VEHICLE-NEW-BDG-EXISTING <vehicle vnum> <building vnum> <portal-in vnum> <portal-out vnum> [flags]

The adventure spawns as a portal at a new vehicle, which is placed at an
existing building (or interior room). The portal will move with the vehicle.

You must provide portal object vnums for the in- and out-portals, but it is
okay if both are the same. Remember that the portals don't have to be called
portals. You could use "a strange door in the side of the tree", and the
messages would look correct when players type "enter door" or "enter tree".

After the adventure ends, the vehicle will vanish unless you remove its
*TEMPORARY flag.

See also: ADVEDIT LINKING, VNUM
#d
"ADVEDIT PORTAL-VEHICLE-NEW-BDG-NEW" "ADVEDIT LINK PORTAL-VEHICLE-NEW-BDG-NEW" "ADVEDIT LINKING PORTAL-VEHICLE-NEW-BDG-NEW"

Usage:  .linking add PORTAL-VEHICLE-NEW-BDG-NEW <vehicle vnum> <building vnum> <portal-in vnum> <portal-out vnum> "<build on>" "[build facing]" <[flags]

The adventure spawns as a portal at a new vehicle, which is placed at a new
building, constructed on the map based on build rules. The portal will move
with the vehicle.

You must provide portal object vnums for the in- and out-portals, but it is
okay if both are the same. Remember that the portals don't have to be called
portals. You could use "a strange door in the side of the tree", and the
messages would look correct when players type "enter door" or "enter tree".

If you use multiple build-on or build-facing flags, they must be in quotes.
If there are no build-facing flags (for an open building), use an empty pair
of quotes: ""

After the adventure ends, the vehicle will vanish unless you remove its
*TEMPORARY flag.

See also: ADVEDIT LINKING, VNUM, CEDIT BUILDON, CEDIT BUILDFACING
#d
"ADVEDIT PORTAL-VEHICLE-NEW-CROP" "ADVEDIT LINK PORTAL-VEHICLE-NEW-CROP" "ADVEDIT LINKING PORTAL-VEHICLE-NEW-CROP"

Usage:  .linking add PORTAL-VEHICLE-NEW-CROP <vehicle vnum> <crop vnum> <portal-in vnum> <portal-out vnum> [flags]

The adventure spawns as a portal at a new vehicle, which is placed at a crop
tile somewhere in the world. The portal will move with the vehicle.

You must provide portal object vnums for the in- and out-portals, but it is
okay if both are the same. Remember that the portals don't have to be called
portals. You could use "a strange door in the side of the tree", and the
messages would look correct when players type "enter door" or "enter tree".

After the adventure ends, the vehicle will vanish unless you remove its
*TEMPORARY flag.

See also: ADVEDIT LINKING, VNUM
#d
"ADVEDIT PORTAL-VEHICLE-NEW-WORLD" "ADVEDIT LINK PORTAL-VEHICLE-NEW-WORLD" "ADVEDIT LINKING PORTAL-VEHICLE-NEW-WORLD"

Usage:  .linking add PORTAL-VEHICLE-NEW-WORLD <vehicle vnum> <sector vnum> <portal-in vnum> <portal-out vnum> [flags]

The adventure spawns as a portal at a new vehicle, which is placed at a tile of
the given sector somewhere in the world. The portal will move with the vehicle.

You must provide portal object vnums for the in- and out-portals, but it is
okay if both are the same. Remember that the portals don't have to be called
portals. You could use "a strange door in the side of the tree", and the
messages would look correct when players type "enter door" or "enter tree".

After the adventure ends, the vehicle will vanish unless you remove its
*TEMPORARY flag.

See also: ADVEDIT LINKING, VNUM
#d
"ADVEDIT TIME-LIMIT" "ADVEDIT LINK TIME-LIMIT" "ADVEDIT LINKING TIME-LIMIT"

Usage:  .linking add TIME-LIMIT <minutes> [flags]

This linking option allows you to force the adventure to de-spawn after a
certain amount of time. You can also despawn an adventure early using the
%adventurecomplete% command in a script.

Adventures will never de-spawn while players are still inside.

Adventures should ALMOST ALWAYS have this option set. If they can spawn on
claimed land, it is required, in order to ensure the adventure eventually
de-spawns.

See also: ADVEDIT LINKING, %ADVENTURECOMPLETE%
#d
"ADVEDIT LINKING" ""ADVEDIT LINK" "ADVEDIT LINK RULE" "LINKING RULES" "LINK RULES"

Usage: linking add <type> <data> [flags]
       linking change <number> <field> <value>
       linking remove <number | all>

Linking rules help the game engine determine where to link instances of an
adventure. You can add as many linking rules as you like; it will spawn
instances in any place that matches any rule.

See specific help files for each type: &yHELP ADVEDIT <TYPE>&0
 &cBDG-EXISTING&0: Link from an existing building or interior room.
 &cBDG-NEW&0: Builds the building on the map and links from it (no interior rooms).
 &cPORTAL-WORLD&0: Portal appears in a matching sector.
 &cPORTAL-BDG-EXISTING&0: Portal appears in an existing building or interior room.
 &cPORTAL-BDG-NEW&0: Builds the building on the map and puts a portal in it (no
    interior rooms).
 &cPORTAL-CROP&0: Portal appears on a matching crop tile.
 &cTIME-LIMIT&0: Removes instances after a certain number of minutes expire.
 &cNOT-NEAR-SELF&0: Prevent the adventure from linking near other copies of itself.
 &cEVENT-RUNNING&0: This adventure can only spawn when a specific event is running.
 &cPORTAL-VEHICLE-EXISTING&0: Portal appears at an existing vehicle.
 &cPORTAL-VEHICLE-NEW-BDG-EXISTING&0: Portal and new vehicle at existing building.
 &cPORTAL-VEHICLE-NEW-BDG-NEW&0: Portal and new vehicle at new building.
 &cPORTAL-VEHICLE-NEW-CROP&0: Portal and new vehicle at a crop.
 &cPORTAL-VEHICLE-NEW-WORLD&0: Portal and new vehicle at a sector.
 &cIN-VEHICLE-EXISTING&0: Link as the interior of existing vehicle.
 &cIN-VEHICLE-NEW-BDG-EXISTING&0: Interior of new vehicle at existing building.
 &cIN-VEHICLE-NEW-BDG-NEW&0: Interior of new vehicle at new building.
 &cIN-VEHICLE-NEW-CROP&0: Interior of new vehicle at a crop.
 &cIN-VEHICLE-NEW-WORLD&0: Interior of new vehicle at a sector.

Available flags:
 &cCLAIMED-OK&0 - Can link to claimed locations (default: unclaimed only).
 &cCITY-ONLY&0 - Only links to claimed tiles in cities.
 &c!CITY&0 - Will not link to claimed tiles in cities.
 &cCLAIMED-ONLY&0 - Will only link to claimed tiles.
 &cCONTINENT-ONLY&0 - Only spawns on islands with the CONTINENT flag.
 &cNO-CONTINENT&0 - Will not spawn on continents.

Portals require a portal object for both the entrance and exit (they may be
the same object). Existing buildings may also be interior rooms, but new
building rules require a normal map building (one without the ROOM flag).

For types requiring build-on or build-facing, you should include the set of
build flags in quotes ("plains desert") if you use more than one. For the full
list of build flags, see HELP SECTEDIT BUILDFLAGS.

See also: OLC ADVENTURES, SECTEDIT BUILDFLAGS, VNUM
#d
"ADVEDIT MAXLEVEL" "ADVEDIT MAX LEVEL" "ADVEDIT MINLEVEL" "ADVEDIT MIN LEVEL"

Usage:  .maxlevel <number>
        .minlevel <number>

These settings control the minimum and maximum levels for an adventure zone.
These are set in terms of players' composite level (the level number given by
their skills and gear).

Adventures whose minimum level is over 25 will not spawn on newbie islands.
Islands will only spawn adventures that are within 50 levels of the players
who live on/visit those islands (but continents spawn all levels).

The OLC LEVELS help file has additional notes on how to choose levels.

You can use the 'cascade' editor command to copy levels from the adventure to
its mobs and objects.

See also: OLC ADVENTURES, OLC LEVELS, ADVEDIT CASCADE
#d
"ADVEDIT NAME"

Usage:  .name <name>

This lets you set the name of the adventure. The names should be reasonably
short (less than 1 line) and concise. Usually, these are written in title case
(the first letter of each word is uppercase).

Example names:
 > Magiterranean: The Grove
 > Ruins: Bandit Camp

See also: OLC ADVENTURES
#d
"ADVEDIT PLAYERLIMIT" "ADVEDIT PLAYER LIMIT"

Usage:  .playerlimit <number>

This allows you to restrict the number of players who may be inside an
adventure at one time.

Setting it to 0 means no-limit. The maximum group size is 4, so that is a safe
limit on most adventures.

See also: OLC ADVENTURES
#d
"ADVEDIT RESET" "ADVEDIT RESET TIME" "ADVEDIT RESETTIME"

Usage:  .reset <minutes>

This sets the time between adventure zone resets. Each time the zone resets,
it may spawn more mobs and objects.

You may set a reset time of 0 if the adventure should never reset once it has
been instantiated.

See also: OLC ADVENTURES
#d
"ADVEDIT TEMPERATURE" "BEDIT TEMPERATURE" "REDIT TEMPERATURE" "SECTEDIT TEMPERATURE"

Usage:  .temperature <type>

This field determines how warm or cold the area will be. Most of these are
relative to the temperature of the tile the adventure/building/room or sector
is on.

A room template will override the adventure's setting unless the room is set
to "use climate", which will then defer to the adventure setting.

Available temperature types:
 &cuse climate&0 - Inherits its temperature from the climate of the tile it's on.
 &calways comfortable&0 - Player receives no temperature penalties.
 &cmilder&0 - Temperature is milder (less hot/cold) than local area.
 &charsher&0 - Temperature is harsher (more hot/cold).
 &cfreezing&0 - Always extremely cold (high penalties).
 &ccold&0 - Always cold (low penalties).
 &ccool&0 - Always cool (no penalties).
 &ccooler&0 - Cooler than the local area.
 &ccooler when hot&0 - Cooler than the local area when temperature is over 0.
 &cneutral&0 - Temperature is between hot and cold.
 &cwarm&0 - Always warm (no penalties).
 &cwarmer&0 - Warmer than the local area.
 &cwarmer when cold&0 - Warmer than the local area when temperature is below 0.
 &chot&0 - Always hot (low penalties).
 &csweltering&0 - Always extremely hot (high penalties).

See also: OLC ADVENTURES, OLC BUILDINGS, OLC ROOM TEMPLATES, TEMPERATURE
#d
"AFFECT FLAGS" "AFF FLAGS" "AFFECT BITS" "AFF BITS"

The following affect flags are available:
 &cBLIND&0 - Unable to see.
 &cMAJESTY&0 - Hard to attack (based on Charisma or, if from an ability, the
   linked trait on that ability).
 &cINFRA&0 - Can see in the dark (glowing red eyes).
 &cSNEAK&0 - Cannot be seen while moving.
 &cHIDE&0 - Cannot be seen in room (without search).
 &c*CHARM&0 - NPC will take orders from its master -- do not use this on items.
 &cINVIS&0 - Can't be seen, except by magic.
 &cIMMUNE-PHYSICAL-DEBUFFS&0 - Immune to any 'physical' debuffs.
 &cSENSE-HIDE&0 - Can see hidden people.
 &c!PHYSICAL&0 - Immune to physical damage -- do not use this on items.
 &c!TARGET&0 - Cannot be targeted in the room -- do not use this on items.
 &c!SEE&0 - Cannot be seen in the room at all -- do not use this on items.
 &cFLY&0 - Is flying.
 &c!ATTACK&0 - Cannot be attacked -- do not use this on items.
 &cIMMUNE-MAGICAL-DEBUFFS- Immune to any 'magical' debuffs.
 &cDISARMED&0 - Has lost their weapon -- do not use this on items.
 &cHASTE&0 - Has the effect of the Hasten ability.
 &cIMMOBILIZED&0 - Cannot move -- do not use this on items.
 &cSLOW&0 - Combat speed reduced, like the Slow spell.
 &cSTUNNED&0 - Can't participate in combat or move -- do not use this on items.
 &cSTONED&0 - Sees the world in strange, trippy colors.
 &c!BLOOD&0 - Cannot spend blood points.
 &cDEATHSHROUD&0 - Appears as a corpse and cannot act -- do not use this on items.
 &cEARTHMELD&0 - Submerged in the earth and can't take normal actions -- do not use this on items.
 &cMUMMIFY&0 - Immune to attack and cannot act -- do not use this on items.
 &cSOULMASK&0 - Players cannot see affect details on character.
 &cNO-TRACKS&0 - Does not leave tracks.
 &cIMMUNE-POISON-DEBUFFS&0 - Immune to any 'poison' debuffs.
 &cIMMUNE-MENTAL-DEBUFFS&0 - Immune to any 'mental' debuffs.
 &c!STUN&0 - Immune to stun effects.
 &c!DRINK-BLOOD&0 - Can't be bitten/sired by vampires.
 &cDISTRACTED&0 - Cannot perform timed actions.
 &cHARD-STUNNED&0 - A stun that cannot be cleansed and does not trigger immunity.
 &cIMMUNE-DAMAGE&0 - Cannot take damage -- do not use this on items.
 &c!WHERE&0 - Cannot be found using the 'where' command.
 &cWATERWALK&0 - Does not need to swim and doesn't drown. Unlike the AQUATIC mob
   flag, this allows it to move on both water and land.
 &cLIGHT&0 - Character provides light to the room.
 &cPOOR-REGENS&0 - Players regenerate very slowly. Mobs won't regenerate.
 &cSLOWER-ACTIONS&0 - Timed actions (e.g. chopping) are slower.
 &cHUNGRIER&0 - Player becomes hungry faster.
 &cTHIRSTIER&0 - Player becomes thirsty faster.
 &cIMMUNE-TEMPERATURE&0 - Player does not suffer effects of heat or cold.
 &cAUTO-RESURRECT&0 - Will resurrect on death.
 &cCOUNTERSPELL&0 - Will cancel the next counterspellable ability then remove its
   affect. If applied by an ability, will also trigger skill gain and hooks.
#d
ARCHEDIT "OLC ARCHETYPES" "ARCHETYPE OLC" "ARCHETYPE EDITOR"

Usage:  .arch <command>
        .<command>

The .olc archetype editor is a powerful tool for creating and editing player
archetypes (character creation options). It provides a simple in-game menu with
contextual choices to design any archetype.

All commands in the editor are highlighted in yellow/green and placed inside
<angle braces>. You can get help on these by typing: &yHELP ARCHEDIT <COMMAND>&0

You can close an open editor with .abort or .save.

Example:
 > .arch edit 99
 > .name Silent Assassin
 > .skill add Stealth 30
 > .save

For notes on the mud's building rules, see HELP BUILDING GUIDE.

See also: OLC, OLC ABORT, OLC EDIT, OLC EDITOR, OLC SAVE
#d
"ARCHEDIT ATTRIBUTES"

Usage:  .attribute <type> <number>
        .attribute <copy> <archetype vnum>

Each of a player's archetypes adds to their attributes. By design, the
starting attributes should be low. Players will earn higher attributes using
gear and abilities.

An attribute can be positive, negative, or zero. Players will get the sum of
the attributes from all their archetypes (with guaranteed minimum levels, if
they end up too low).

All of the stock Origin archetypes have starting attributes totalling 11 (one
at 3, two at 1, and the rest at 2).

See also: OLC ARCHETYPES
#d
"ARCHEDIT DESCRIPTION"

Usage:  .description <text>

The archetype description should be a short phrase that indicates what type
of character it is meant for. Descriptions should not be longer than about
half a line of text.

See also: OLC ARCHETYPES
#d
"ARCHEDIT FEMALERANK" "ARCHEDIT FEMALE RANK" "ARCHEDIT MALERANK" "ARCHEDIT MALE RANK"

Usage:  .femalerank <name>
        .malerank <name>

These set the default rank when a player of this archetype founds an empire.
Two rank names are available in case the name is gender-specific (Lord, Lady).
However, it's also ok to set the same name for both.

See also: OLC ARCHETYPES
#d
"ARCHEDIT FLAGS"

Usage:  .flags [add | remove] <flags>

Archetype flags are properties that affect how the archetype behaves.

Available flags:
 &cIN-DEV&0 - Cannot be chosen or displayed.
 &cBASIC&0 - Shows up in the basic set of archetypes (others must be searched).
 &cLOCKED&0 - Requires the player/account to unlock it via a quest reward.

See also: OLC ARCHETYPES
#d
"ARCHEDIT GEAR" "GEDIT GEAR"

Usage:  .gear add <slot | inventory> <vnum>
        .gear copy <from type> <from vnum>
        .gear change <number> <slot | vnum> <new value>
        .gear remove <number>

Archetypes: Sets the starting gear for players who choose this archetype. You
should provide some low-level gear (it will be scaled to level 1, or to the
item's minimum scale level).

Global Newbie Gear: Gear given to all new players, if their archetype didn't
fill the slot.

Usually, the following slots have newbie gear: head, clothes, legs, feet,
wield, hold.

The hold slot is generally a light, e.g. the newbie torch (2104).

See also: OLC ARCHETYPES, OLC GLOBALS, GEDIT TYPE
#d
"ARCHEDIT LANGUAGE"

Usage:  .language <vnum | name | none>

This sets which language the player will start with, if any.

If players have more than one archetype that give languages, they will speak
all of those languages. If no archetypes provide a language, you should ensure
you have at least one BASIC-flagged language for players to speak.

See also: OLC ARCHETYPES, LANGUAGE, GENERIC LANGUAGE
#d
"ARCHEDIT LORE"

Usage:  .lore <text | none>

Archetype lore is the lore given to a player who starts the game with this
archetype. It's optional -- if it's set to none, the player will get no lore
at all from it.

Lore is always the first part of a sentence that will end with "on Month Day,
Year." It should end with no punctuation.

You can use the following tokens in lore:
 $e - he/she
 $s - his/her
 $m - him/her

See also: OLC ARCHETYPES
#d
"ARCHEDIT NAME"

Usage:  .name <name>

The archetype name is the text displayed to the player, and used to choose an
archetype. The name should be reasonably short, and title-cased (Each Word
Capitalized).

See also: OLC ARCHETYPES
#d
"ARCHEDIT STARTINGSKILLS" "ARCHEDIT STARTING SKILLS"

Usage:  .startingskill <add | change> <name> <level>
        .startingskill remove <name>

Archetypes determine a player's starting skill levels. Players should begin
the game with a small number of skill points split between one or two skills.
However, the system is flexible and you may choose to give a small number of
points to all skills.

All of the stock archetypes have a total of 30 skill points, usually split
between two skills as 20/10.

See also: OLC ARCHETYPES
#d
"ARCHEDIT TYPE"

Usage:  .type <type>

Archetype types sort them into categories. During creation, a player picks one
from each category. EmpireMUDs may add or remove archetype types, for example
to add races or cultures.

Available types:
 ORIGIN - A character's background and upbringing.
 HOBBY - Some bonus skill points.

See also: OLC ARCHETYPES
#d
ATTACKEDIT "OLC ATTACKS" "OLC ATTACK MESSAGES" "ATTACK OLC" "ATTACK MESSAGE OLC" "ATTACK EDIT"

Usage:  .attack <command>
        .<command>

The .olc attack message editor allows you to add, edit, or delete messages from
the system. It provides an in-game menu for controlling how attacks appear in
combat.

All commands in the editor are highlighted in yellow/green and placed inside
<angle braces>. You can get help on any of these commands by typing:
  &yHELP ATTACKEDIT <COMMAND>&0

You can close an open editor with .abort or .save.

Example:
 > .attack edit 123
 > .name Smoosh
 > .save

For notes on the mud's building rules, see HELP BUILDING GUIDE.

See also: OLC, OLC ABORT, OLC EDIT, OLC EDITOR, OLC SAVE
#d
"ATTACKEDIT BACK"

Usage:  .back

This command sends you back to the main menu when you were editing one of the
individual messages inside the attack message set.

See also: OLC ATTACKS
#d
"ATTACKEDIT CLEAREXTENDED" "ATTACKEDIT CLEAR EXTENDED"

Usage:  .clearextended

When you remove the WEAPON and MOB flags from an attack, it no longer needs
most of the properties that appeared when those flags were added. You can
quickly remove these extended properties and hide them with the .clearextended
command.

See also: OLC ATTACKS
#d
"ATTACKEDIT COUNTSAS" "ATTACKEDIT COUNTS AS"

Usage:  .countsas <name | vnum | none>

This allows one attack type to count as another.

For example, Backstab requires a stabbing weapon. This field allows you to
make custom types that still count as 'stab'.

See also: OLC ATTACKS
#d
"ATTACKEDIT DAMAGETYPE" "ATTACKEDIT DAMAGE TYPE"

Usage:  .damagetype <type>

See HELP DAMAGE TYPES for the list.

This is only used on attacks with the WEAPON or MOB flag. Special attacks do
not have this property.

See also: OLC ATTACKS
#d
"ATTACKEDIT DEATHLOG" "ATTACKEDIT DEATH LOG"

Usage:  .deathlog <string | default>

This allows you to set a custom log when a character is killed by this type of
attack.

Death logs automatically start with the player's name and end with the
location. You cannot override these parts.

The default death log is: has been killed at

See also: OLC ATTACKS
#d
"ATTACKEDIT FIRSTPERSON" "ATTACKEDIT FIRST-PERSON" "ATTACKEDIT FIRST PERSON"

Usage:  .firstperson <string>

This is the attack's verb in first-person. For example, a slashing weapon's
first-person verb is "slash", as in "You slash the rat."

This is only used on attacks with the WEAPON or MOB flag. Special attacks use
the hit2char, hit2vict, and hit2room messages instead.

See also: OLC ATTACKS, ATTACKEDIT THIRD PERSON, ATTACKEDIT FLAGS
#d
"ATTACKEDIT FLAGS" "ATTACK FLAGS"

Usage:  .flags [add | remove] <flags>

The following ability flags are available:
 &cWEAPON&0 - Available for use as a weapon's type. Has extra properties.
 &cMOBILE&0 - Available for use on mobs and morphs. Has extra properties.
 &cDISARMABLE&0 - Vulnerable to DISARM affects.
 &cAPPLY-POISON&0 - On a successful hit, can apply character's poison.
 &cIGNORE-MISSING&0 - Some attacks don't require all messages; this flag
   silences the auditor if you're certain they aren't needed.

Note: The WEAPON and MOBILE properties add the following fields to the attack:
   firstperson, thirdperson, noun, damagetype, weapontype, speed

See also: OLC ATTACKS
#d
"ATTACKEDIT FULLSEARCH" "ATTACK FULLSEARCH"

Usage:  .attack fullsearch -<field> <argument> <...>

This command allows you to search for attack messages matching certain
criteria. You can specify multiple fields if you want. Any arguments that don't
start with a dash (-) are matched to the attack's name and strings.

Fields:
  &c-damagetype&0 - See DAMAGE TYPES
  &c-flagged&0, &c-unflagged&0 - See ATTACKEDIT FLAGS
  &c-speed&0 - Attacks where this speed is in its range
  &c-vmin&0, &c-vmax&0 - VNUM range limits
  &c-weapontype&0 - blunt, sharp, or magic

Examples:
 > .attack fullsearch -flagged sharp -speed 2.0
 > .attack fullsearch slash -vmin 10000 -vmax 10099
#d
"ATTACKEDIT HIT2CHAR" "ATTACKEDIT HIT2VICT" "ATTACKEDIT HIT2ROOM"

Usage:  .hit2char <message | none>
        .hit2vict <message | none>
        .hit2room <message | none>

These are the messages shown when one character hits another one. This message
is not used for basic weapon/mob attacks but should be provided for special
attacks unless they're not shown.

The attacker (char) uses $n, $e, $m, and $s pronouns.
The victim (vict) uses $N, $E, $M, and $S pronouns.

See also: OLC ATTACKS
#d
"ATTACKEDIT DIE2CHAR" "ATTACKEDIT DIE2VICT" "ATTACKEDIT DIE2ROOM"

Usage:  .die2char <message | none>
        .die2vict <message | none>
        .die2room <message | none>

These are the messages shown when one character kills another one. This message
should usually be provided by all messages.

The killer (char) uses $n, $e, $m, and $s pronouns.
The victim (vict) uses $N, $E, $M, and $S pronouns.

See also: OLC ATTACKS
#d
"ATTACKEDIT MISS2CHAR" "ATTACKEDIT MISS2VICT" "ATTACKEDIT MISS2ROOM"

Usage:  .miss2char <message | none>
        .miss2vict <message | none>
        .miss2room <message | none>

These are the messages shown when one character tries to hit another, but
misses. This message should usually be provided by all messages, but may be
omitted for damage abilities that don't miss.

The attacker (char) uses $n, $e, $m, and $s pronouns.
The victim (vict) uses $N, $E, $M, and $S pronouns.

See also: OLC ATTACKS
#d
"ATTACKEDIT GOD2CHAR" "ATTACKEDIT GOD2VICT" "ATTACKEDIT GOD2ROOM"

Usage:  .god2char <message | none>
        .god2vict <message | none>
        .god2room <message | none>

These are the messages shown when a character tries to hit a god or immortal.
This message should usually be provided by all messages, but may be omitted,
for example, on DoTs that don't show tick messages to immortals.

The attacker (char) uses $n, $e, $m, and $s pronouns.
The god (vict) uses $N, $E, $M, and $S pronouns.

See also: OLC ATTACKS
#d
"ATTACKEDIT MESSAGE"

Usage:  .message <number>
        .message add
        .message copy <vnum>
        .message duplicate <message number>
        .message remove <number>

Each attack set has multiple messages. In combat, these are chosen at random to
provide variety. Use the .message command to choose a set to edit. Once inside
the message menu, use .back to return to the main menu.

The "copy" function will copy any message sets not already on this one, from
another attack message by vnum. "Duplicate" copies a message inside this set
instead.

The main menu only displays a preview of each set. Usually the preview is the
hit2char or die2char message, if available.

See also: OLC ATTACKS, ATTACKEDIT HIT2CHAR, ATTACKEDIT DIE2CHAR,
   ATTACKEDIT MISS2CHAR, ATTACKEDIT GOD2CHAR
#d
"ATTACKEDIT NAME"

Usage:  .name <name>

The name of a attack message is used to identify it. The name should be short
and concise. These are often lowercase for weapon attacks, but may start with a
capital letter for special attacks.

See also: OLC ATTACKS
#d
"ATTACKEDIT NOUN" "ATTACKEDIT NOUN" "ATTACKEDIT NOUN"

Usage:  .noun <string>

This is the attack type as a noun, used in sentences describing it as your
attack. For example, a slashing weapon's noun verb is "slash", as in "You
demolish the rat with your slash" and "Pulcherrima demolishes the rat with her
slash."

The noun is not necessarily the same as the first-person string or the attack's
name. For example, slice attacks use "swing".

This is only used on attacks with the WEAPON or MOB flag. Special attacks use
the hit2char, hit2vict, and hit2room messages instead.

See also: OLC ATTACKS, ATTACKEDIT FLAGS
#d
"ATTACKEDIT SPEED" "ATTACKEDIT FAST" "ATTACKEDIT SLOW" "ATTACKEDIT NORMAL"

Usage:  .speed fast <time>
        .speed normal <time>
        .speed slow <time>

This lets you set the base speed for the attack. The base speed is 4.0 but
most weapons attack faster than this. Character damage is adjusted for the
weapon's speed so that overall damage is the same, but slower weapons deal it
in larger hits while fast ones do a lot of small hits.

A lower time is faster; these times are the number of seconds between auto-
attacks. When 3 speeds are listed, like on "vstat attack", the order is
[fast | normal | slow].

Weapons with the SLOW flag and characters with the SLOW affect use the attack's
slow speed. Weapons with the FAST flag and characters with HASTE similarly use
the fast speed.

This is only used on attacks with the WEAPON or MOB flag. Special attacks do
not have this property because they're used on abilities instead.

See also: OLC ATTACKS
#d
"ATTACKEDIT THIRDPERSON" "ATTACKEDIT THIRD-PERSON" "ATTACKEDIT THIRD PERSON"

Usage:  .thirdperson <string>

This is the attack's verb in third-person. For example, a slashing weapon's
third-person verb is "slashes", as in "Dasylirion slashes the rat."

This is only used on attacks with the WEAPON or MOB flag. Special attacks use
the hit2char, hit2vict, and hit2room messages instead.

See also: OLC ATTACKS, ATTACKEDIT THIRD PERSON, ATTACKEDIT FLAGS
#d
"ATTACKEDIT WEAPONTYPE" "ATTACKEDIT WEAPON TYPE"

Usage:  .weapontype <type>

The following weapon types are available:
 &cblunt&0 - dull, not sharp
 &csharp&0 - cutting, piercing
 &cmagic&0 - spell

This is only used on attacks with the WEAPON or MOB flag. Special attacks do
not have this property.

See also: OLC ATTACKS
#d
AUGEDIT "OLC AUGMENTS" "AUGMENT OLC" "AUGMENT EDITOR"

Usage:  .aug <command>
        .<command>

The .olc augment editor is a powerful tool for creating and editing augments
(which are like item enchantments). It provides a simple in-game menu with
contextual choices to design multiple types of augments.

All commands in the editor are highlighted in yellow/green and placed inside
<angle braces>. You can get help on these by typing &yHELP AUGEDIT <COMMAND>&0

You can close an open editor with .abort or .save.

Example:
 > .aug edit 11000
 > .name moar power
 > .type enchantment
 > .save

For notes on the mud's building rules, see HELP BUILDING GUIDE.

See also: OLC, OLC ABORT, OLC EDIT, OLC EDITOR, OLC SAVE
#d
"AUGEDIT APPLY" "AUGEDIT APPLIES"

Usage:  .apply add <value> <apply>
        .apply change <number> <value | apply> <new value>
        .apply remove <number | all>

Applies are the specific bonuses that will be added to an item when it is
enhanced with this augment. The values you provide for the applies are actually
"weights", as the final value is determined by the level of the augmented item
and the level of the person who augmented it.

If you set applies like "2 to STRENGTH, 1 to DEXTERITY", it means 2/3 of the
points go to the STRENGTH apply and 1/3 to the DEXTERITY apply. If this is used
on an item that receives 6 points from the augment, the final values would come
out to +4 Strength and +2 Dexterity.

You can see a list of applies on HELP APPLIES.

See also: APPLIES, OLC AUGMENTS
#d
"AUGEDIT FLAGS"

Usage:  .flags [add | remove] <flags>

Augment flags are properties that affect how the augment behaves.

Available flags:
 IN-DEV - Cannot be used by mortals.
 SELF-ONLY - Can only be used on own items; will bind items to self.
 ARMOR - Works on any ARMOR-type item only.
 SHIELD - Works on any SHIELD-type item only.

See also: OLC AUGMENTS
#d
"AUGEDIT NAME"

Usage:  .name <name>

The augment name is the text used by the player when enchanting (or otherwise
modifying) an item. The name should be all lowercase, and should be fairly
simple.

For example, if an enchantment augment is named "striking", the player will
use it by typing "enchant sword striking".

See also: OLC AUGMENTS
#d
"AUGEDIT REQUIRESABILITY" "AUGEDIT REQUIRES ABILITY"

Usage:  .requiresability <name | none>

This allows you to require the player to have a certain ability in order to
apply this augment. Setting it to 'none' removes this requirement.

See also: OLC AUGMENTS
#d
"AUGEDIT REQUIRESOBJECT" "AUGEDIT REQUIRES OBJECT"

Usage:  .requiresobject <vnum>

Instead of (or in addition to) requiring an ability to use an augment, you
can make it dependent upon having a certain item in the player's inventory.
The player will not see the augment in his list (for example, when he types
enchant) if he doesn't have the item.

The required object will not be consumed unless it is also in the resource
list. An example non-consumable augment might require a spellbook object, so
the effect is that having the spellbook allows the player to enchant weapons
with extra mana. An example consumable augment might be a grindstone that
lets a player "hone" a sword with additional to-hit.

See also: OLC AUGMENTS, VNUM
#d
"AUGEDIT RESOURCES"

Usage:  .resource add <type> <amount> <vnum/name>
        .resource change <number> <quantity | vnum | name | flags> <value>
        .resource remove <number | all>
        .resource move <number> <up | down>

This command sets the resources required to apply the augment to an item.

See HELP OLC RESOURCES for more information.

See also: OLC AUGMENTS
#d
"AUGEDIT TYPE" "AUGMENT TYPES"

Usage:  .type <type>

The augment type determines which command is used to apply the augment to an
item. It also determines what type of "apply" is added to the item, and what
rules those applies will follow. For example, "enchantment" applies can be
removed with the Disenchant ability, but "hone" applies cannot.

Type notes:
 Enchantment - Also sets the ENCHANTED bit on items.
 Hone - Always acts as if it has the SELF-ONLY flag.

See also: OLC AUGMENTS
#d
"AUGEDIT WEAR" "AUGMENT WEAR FLAGS"

Usage:  .wear [add | remove] <wear flags>

The "wear" flags on an augment help determine what kind of item can be a valid
target for the augment. For example, an augment with the WIELD setting can only
be used on items that can be wielded (i.e. weapons).

An augment with no "wear" setting can generally not be used. An augment with
the TAKE wear flag could be used on virtually any item.

Usually an augment should be locked down to just one wear flag.

See also: OEDIT WEAR, OLC AUGMENTS
#d
"BASE SECTOR" "BASE SECTORS" "BASE TERRAIN"

A map tile's "base sector" is the sector underneath its current one. It is used
for roads, buildings, and other temporary map changes. You can view it with
"stat room".

Most map tiles have the same base and current sectors.

In some cases, tiles inherit properties from the base sector. For example,
roads have the same climate as their base sector due to their
INHERIT-BASE-CLIMATE flag.

See also: SECTOR, STAT
#d
"BEDIT AFFECTS" "REDIT AFFECTS" "VEDIT AFFECTS" "ROOM AFFECTS" "ROOM AFFECT FLAGS"

Usage:  .affects [add | remove] <flags>

Each building (or room template) type may have a default set of room affect
flags. These are added to the building tile when built, or are present on a
room that is instantiated from a room template. Vehicles that have these flags
apply the flags to any room they're in. The building or vehicle must be
complete.

Available affects:
 DARK - magically dark and the map tile shows as blank
 SILENT - magically quiet
 CHAMELEON - at distance, appears as the tile it was built upon
 !EVOLVE - will not grow trees or process other evolutions
 !FLY - flying characters cannot enter, like an enchanted wall
 !WEATHER - suppress weather messages and command
 !DISREPAIR - never falls into disrepair (caution: this prevents empire decay)
 !TELEPORT - cannot teleport here
 !ABANDON - cannot be abandoned (managed by empires)
 REPEL-NPCS - npcs won't wander in
 REPEL-ANIMALS - animal npcs won't wander in
 NO-WORKFORCE-EVOS - workforce won't do chores that would change the tile type
 MAPOUT-BUILDING - appears as a building on the graphical map
 NO-TRACKS - characters do not leave tracks here and the track command fails
 PERMANENT-PAINT - paint shows different and players cannot repaint

Some affects are managed by live data and commands (do not set affects with *):
 *HAS-INSTANCE - an adventure is linked here
 *TEMPORARY - will be removed when instance is cleaned up
 *UNCLAIMABLE - cannot be claimed
 *PUBLIC - can be used by empires other than the owner
 *DISMANTLING - someone started dismantling it
 *IN-VEHICLE - room is part of the interior of a vehicle
 *!WORK - workforce ignores the room
 *!DISMANTLE - cannot be dismantled until nodismantle is toggled
 *INCOMPLETE - building is unfinished
 *FAKE-INSTANCE - roaming adventure is using this tile

Affects that are SOMETIMES safe to use:
 HIDE-REAL-NAME - won't show real name after custom room name (see MANAGE).
   This can be used on buildings when you expect a script, NOT A PLAYER, to
   rename it.

See also: OLC BUILDINGS, OLC ROOM TEMPLATES
#d
"BEDIT ARTISAN"

Usage:  .artisan <mob vnum>
        .artisan none

Some buildings may have artisan mobs set. These mobs will always spawn in the
building if the building is owned by an empire and has been populated. Only
one artisan will ever spawn per building.

This artisan is marked as an EMPIRE mob and you may use the following name
tokens on the mob itself, if it is only loaded as an artisan:
 #n - randomly chosen first name
 #e - name of the empire it belongs to
 #a - the adjective form of its empire's name

You can use the "none" argument to this command in order to remove the artisan.

See also: OLC BUILDINGS, OLC VEHICLES, MEDIT NAMESET, VNUM
#d
"BEDIT CITIZENS"

Usage:  .citizens <number>

This sets how many citizens will move into the base room of the building. It
does not affect any designated/extra rooms. Once populated, these citizens
spawn in the building tile when players are nearby. They can also perform
Workforce chores near their home building.

You cannot control which citizen mobs actually spawn, only how many may live
here total. If the building supports extra rooms, more citizens can be added
in bedrooms.

NOTE: Any building that allows at least 1 citizen may also be set as a player's
private home.

See also: BEDIT ROOMS, HOME, OLC BUILDINGS, WORKFORCE
#d
"BEDIT COMMANDS"

Usage:  .commands <list>
        .commands none

Buildings that allow specific commands should list those commands to help
players. If you set a commands list, it will appear below the room description
(for closed buildings) or below the map (for open buildings).

If this is a storage building, you should always include inventory, retrieve,
and store. If you set the DRINK flag, you should add drink and fill. Consider
all the special tasks a player might perform here.

We generally keep the commands list in alphabetic order with commas between
the commands, and do not put the word "and" before the last entry.

Example:
 > .commands chop, dig, gather, pick

See also: BEDIT FLAGS, OLC BUILDINGS
#d
"BEDIT DESCRIPTION"

Usage:  .description

All buildings need a good description (except ones flagged OPEN). The
description should be at least 3 full lines, and should always be formatted
with the /fi option in the string editor. Generally descriptions should not
run more than about 6 lines.

The room description is shown when the building is complete (or, it is always
shown if the building is flagged CLOSED). 

See also: BEDIT FLAGS, OLC BUILDINGS, STRING EDITOR
#d
"BEDIT DESIGNATE" "DESIGNATE FLAGS"

Usage:  .designate [add | remove] <flags>

Designate flags control what types of rooms may be added to a building. This
only matters if the "extra rooms" property is set greater than 0.

Rooms can be designated in buildings that have a matching designate flag with
the room. Rooms with no designate flags can't be designated at all (these may
be used for other internal functions).

Available designate flags:
 CRYPT - can designate the crypt
 VAULT - may designate a vault
 FORGE - may designate a forge
 TUNNEL - may designate the tunnel room (for underground/mountain houses)
 HALL - may designate hallways
 SKYBRIDGE - may designate the skybridge room (for treehouses)
 THRONE - may designate a throne room
 ARMORY - not currently used
 GREAT-HALL - may designate great halls (for castles)
 BATHS - may designate bath rooms
 LABORATORY - may designate laboratories (for alchemy)
 TOP-OF-TOWER - may designate the top-of-the-tower room (for the sorcery tower)
 HOUSEHOLD - may designate bedroom, study, sitting room, closet, storage, etc
 HAVEN - vampire havens
 SHIP-MAIN - core ship rooms
 SHIP-LARGE - rooms for larger ships
 SHIP-EXTRA - bonus rooms for huge ships
 LAND-VEHICLE - rooms for land vehicles like wagons

See also: OLC BUILDINGS
#d
"BEDIT FAME" "VEDIT FAME"

Usage:  .fame <amount>

This number is added to an empire's fame for each instance of this building or
vehicle they own.

You can set negative fame to penalize empires for certain buildings.

Most buildings and vehicles should have 0 fame, unless they are monuments.

See also: OLC BUILDINGS
#d
"BEDIT FLAGS"

Usage:  .flags [add | remove] <flags>

When set on a building, these flags affect all interior rooms, too. When set
on a designate-able room (a building where the ROOM flag is set), they only
affect players in that room.

Available flags:
 ROOM - this is a room that can be added with the designate command if it has
    matching designate flags with a building
 ALLOW-MOUNTS - players can ride inside without dismounting
 TWO-ENTRANCES - the building will have a rear entrance across from the main
    entrance (does not apply to OPEN buildings)
 OPEN - never takes the player off the map, shows no room description, and
    cannot have interior rooms
 CLOSED - always shows the room description and takes the player off the map,
    even if the building is not complete
 INTERLINK - can be interlinked with other nearby INTERLINK buildings
 HERD - mobs can be herded into this building
 DEDICATE - can be dedicated to a patron god or player, which adds "of Name"
    to the room title
 IS-RUINS - counts as ruins (affects cities and decay)
 !NPC - mobs won't enter this building
 BARRIER - can only go back the way you came, unless flying
 IN-CITY-ONLY - can only be used if in an established city
 LARGE-CITY-RADIUS - counts as in-city even when built in the outskirts
 !PAINT - cannot be painted
 ATTACH-ROAD - on the ascii map, roads attach to this tile like it's a road
 BURNABLE - will catch fire if a fire is placed inside by a hostile empire
 EXIT - on interior rooms, players can 'exit' (or disembark) to leave from here
 OBSCURE-VISION - blocks tiles behind it on the map
 ROAD-ICON - replaces the building icon with generated road icons/dashes: --+-
 ROAD-ICON-WIDE - replaces the icon with wide road icons: ====
 ATTACH-BARRIER - icons with @u/@v will attach to this building like a barrier
 NO-CUSTOMIZE - cannot be customized by players
 NO-ABANDON-WHEN-RUINED - won't be abandoned when it turns to ruins; only
    normally used on buildings that are part of adventures like the Hamlet.
 SAIL - can enter this building with a boat
 ITEM-LIMIT - only a certain number of items can be dropped here
 LONG-AUTOSTORE - autostore takes 72 hours instead of 3 here
 HIGH-DEPLETION - has more resources than a normal tile
 !DELETE - will not be deleted for not having a homeroom
 NEED-BOAT - requires a boat, flying, waterwalk, or swimming to enter
 LOOK-OUT - can see the map using "look out"
 2ND-TERRITORY - counts as territory off the map (e.g. in a ship)
 UPGRADED - modifies other building types like SHIPYARD

* Note: If you change the LARGE-CITY-RADIUS flag on existing buildings,
        territory counts will not update right away. Any empire can force a
        re-count by claiming or abandoning any tile.

See also: BEDIT FUNCTIONS, INTERLINK, OLC BUILDINGS
#d
"BEDIT FULLSEARCH"

Usage:  .b fullsearch -<field> <argument> <...>

This command allows you to search for buildings matching certain criteria. You
can specify multiple fields if you want. Any arguments that don't start
with a dash (-) are matched to the building's name and other text.

Fields:
  &c-affects&0 - see HELP BEDIT AFFECTS
  &c-citizens -citizensover -citizensunder&0 - specific number of citizens
  &c-commands&0 - match the text of the commands line, if any
  &c-depletion&0 - see HELP OLC DEPLETION
  &c-designate&0 - see HELP DESIGNATE FLAGS
  &c-extradesc&0 - has a specific keyword in its extra descs
  &c-fame -fameover -fameunder&0 - specific fame amount
  &c-flagged -unflagged&0 - see HELP BEDIT FLAGS
  &c-functions&0 - see HELP BEDIT FUNCTIONS
  &c-icon&0 - match the text of the icon, if any
  &c-interactions&0 - has a specific type, see HELP BEDIT INTERACTION
  &c-height -heightover -heightunder&0 - specific height amount
  &c-hitpoints -hitpointsover -hitpointsunder&0 - specific hitpoint amount
  &c-military -militaryover -militaryunder&0 - specific military value
  &c-rooms -roomsover -roomsunder&0 - specific extra rooms value
  &c-vmin&0, &c-vmax&0 - VNUM range limits

Examples:
 > .b fullsearch -hitpointsover 50
 > .b fullsearch -unflagged ROOM -function FORGE
 > .b fullsearch -flagged ROOM -citizensover 1 -vmin 10000 -vmax 10099

To search other fields, you can generally use the normal "search" option for
other OLC types. For example, to find all buildings that have a certain artisan
vnum, use ".mob search 12345", which will search the artisan vnum field on all
buildings for that mob.
#d
"BEDIT FUNCTIONS" "REDIT FUNCTIONS" "VEDIT FUNCTIONS" "FUNCTION FLAGS" "CEDIT REQUIRESFUNCTION" "CEDIT REQUIRES FUNCTION"

Usage:  .function [add | remove] <flags>
        .requiresfunction [add | remove] <flags>

The function flags determine what chores, actions, and other tasks happen at
that building or room template. For vehicles, it applies to people in the same
room as the vehicle. For crafts, the 'requiresfunction' field requires that
the craft be made at a location with that function.

Available functions:
 UPGRADED - building/vehicle is an upgraded version (modifies other functions)
 ALCHEMIST - can brew and mix here
 APIARY - no current use
 BATHS - can use the bathe command here
 BEDROOM - boosts regen while sleeping
 CARPENTER - required by some crafts
 DIGGING - triggers the workforce digging chore (also need interaction)
 DOCKS - grants the seaport tech to the empire; counts as a dock for ships
 FORGE - can use the forge command here
 GLASSBLOWER - required for some crafts
 GUARD-TOWER - hostile toward enemy players, at range
 &rLIBRARY*&0 - can write and store books here
 MAIL - players can send mail here
 MILL - can use the mill command here
 &rMINE*&0 - can be mined for ore resources
 MINT - functions as a mint
 PORTAL - functions as a portal building
 POTTER - pottery craft time is reduced here
 PRESS - can use the 'press' craft
 SAW - allows sawing here
 SHIPYARD - used to build ships
 SMELT - allows smelting here
 STABLE - can shear, milk, and barde animals here; animals in this building don't despawn
 SUMMON-PLAYER - allows the summon player command
 TAILOR - counts as tailor for crafts like weaving
 TANNERY - allows tanning here
 &rTAVERN*&0 - functions as a tavern (don't set this on the same building as DRINK)
 &rTOMB*&0 - players can re-spawn here after dying
 TRADING-POST - access to global trade, e.g. a trading post
 VAULT - stores coins, can use the warehouse command for privileged storage
 WAREHOUSE - can use the warehouse command and store unique items
 DRINK-WATER - can get water here, like a well
 COOKING-FIRE - can cook, brew, and other tasks that require a fire
 LARGER-NEARBY - extends the radius of 'nearby'
 FISHING - workforce can fish here (also need fish interaction)
 STORE-ALL - any regular storable item can be stored (but not retrieved)
 &yIN-CITY-ONLY&0 - all function flags only work when in a city
   Note: scripts cannot check this by itself using %room.function()%; use the
   IN-CITY-ONLY building flag instead
 OVEN - allows baking
 MAGIC-WORKSHOP - no code functions, but can be used for workforce
 TRAPPER - no code functions, but can be used for workforce
 
&r* Note:&0 Functions marked with &r*&0 cannot be used on moving vehicles, only
buildings and stationary vehicles.

See also: OLC BUILDINGS, OLC CRAFTS, OLC ROOM TEMPLATES, OLC VEHICLES,
  OLC WORKFORCE
#d
"BEDIT HEIGHT"

Usage:  .height <value>

Building height is added to terrain height for the purpose of blocking the map
beyond it, or seeing over other blocked tiles. This only applies to map
buildings, not interior rooms (who inherit the height of their base building
when using "look out").

Most buildings should have height 0. Height 1 means it will block the view
of non-flying players, and is equivalent to the outer tiles of a mountain
range.

See also: OLC BUILDINGS
#d
"BEDIT HITPOINTS" "BEDIT HEALTH"

Usage:  .hitpoints <value>

This number is how much damage a building can take from a catapult or siege
ritual before it is destroyed. Buildings with the ROOM flag do not need this.

Catapults deal 8 damage per 100 levels, per shot. Siege rituals deal
Intelligence + 1 damage. You can determine how many hitpoints to give a
building based on this.

If a building takes more than 10% of its hitpoints in damage from an attack,
it will also need its yearly maintenance resources to be fixed.

Common hitpoint levels:
 house: 8-24
 wall: 32
 castle: 64
 mountain building: 128
 adventure: 1000 (to discourage sieging)

See also: BEDIT YEARLY MAINTENANCE, FIRE, OLC BUILDINGS, SIEGE RITUAL
#d
"BEDIT ICON"

Usage:  .icon <icon>

The icon is how a building appears on the world map. It must always be exactly
4 characters long, not counting any color codes.

Buildings usually use icons like: [  ], (  ), {  }
Usually the symbols inside the parentheses or braces are a pair of letters that
loosely indicate what building it is, but you should try not to duplicate
existing buildings.

If you don't start with a color code, the building will have a color based on
the tile it was built upon (and the season). In addition to normal color codes, 
you can use &&? to represent the base tile's color if you need to use it later
in the color code. If you want to use the && symbol in the icon, you must
double it (&&&&).

There is no need to put a &&0 at the end of the icon.

See additional info at HELP SPECIAL ICONS.

Examples:
 > .icon &&0[--]
 > .icon .&&0[]&&?.

See also: COLOR, OLC BUILDINGS
#d
"BEDIT MILITARY" "VEDIT MILITARY"

Usage:  .military <number>

This property adds to the military total of the empire that owns it. However,
the military value of an empire is not used for anything at the moment.

See also: OLC BUILDINGS, OLC VEHICLES
#d
"BEDIT NAME"

Usage:  .name <name>

The 'name' property is used by some commands like 'territory' and 'vnum' to
search for buildings, so it should be reasonably unique. It's also shown as
the short form of a building in some sentences.

You should choose a name that's as short as possible. For example, if your
room title is "A Foul-Smelling Outhouse", the name should be "Outhouse".

See also: BEDIT TITLE, OLC BUILDINGS, TERRITORY, VNUM
#d
"BEDIT RELATIONS" "BEDIT RELATIONSHIPS" "VEDIT RELATIONS" "VEDIT RELATIONSHIPS"

Usage:  .relation add <type> <vnum>
        .relation copy building <from vnum>
        .relation remove <number | all>

Relations link this building/vehicle to other buildings/vehicles in various
ways:

Available relationship types:
 &cUPGRADES-TO-BLD&0 - Becomes a building, see UPGRADE CRAFTS
 &cUPGRADES-TO-VEH&0 - Becomes a vehicle, see UPGRADE CRAFTS
 &cFORCE-UPGRADE-BLD&0 - Automatically becomes a building after a reboot
 &cFORCE-UPGRADE-VEH&0 - Automatically becomes a vehicle after a reboot
 &cSTORES-LIKE-BLD&0 - Inherits the storage as target building
 &cSTORES-LIKE-VEH&0 - Inherits the storage as target vehicle
                  (stores-like does not include warehouses; use function flags)

See also: OLC BUILDINGS
#d
"BEDIT RESOURCES" "BEDIT YEARLY MAINTENANCE"

Usage:  .resource add <type> <amount> <vnum/name>
        .resource change <number> <quantity | vnum | name | flags> <value>
        .resource remove <number | all>
        .resource move <number> <up | down>

This command adds materials to the building's "yearly maintenance" list. These
are resources needed to maintain the building each year. If you don't set any,
then the building does not require maintenance.

This uses the ".resource" command to be consistent with other editors, but
these are not the resources needed to build the vehicle in the first place --
only to repair it.

If a building takes damage from any source, and that damage is more than 10% of
its hitpoints, it will also add the yearly-maintenance resources to the repair
cost.

Buildings with only 1 hitpoint will never get their yearly maintenance cost, as
even 1 year of decay will destroy them.

Note: Interior rooms do not normally require any yearly maintenance and don't
take damage.

See HELP OLC RESOURCES for more information.

See also: BEDIT HITPOINTS, OLC BUILDINGS, MAINTAIN, RESOURCE ACTIONS
#d
"BEDIT ROOMS" "BEDIT ROOMS" "BEDIT EXTRA ROOMS"

Usage:  .rooms <number>

If this number is greater than 0, players may use the 'designate' command to
add additional rooms to the building, with options based on what you set with
the '.designate' olc option.

NOTE: If players add bedrooms to a building, it will spawn additional citizens.

See also: BEDIT DESIGNATE, OLC BUILDINGS
#d
"BEDIT SPAWNS" "CROPEDIT SPAWNS" "GEDIT SPAWNS" "SECTEDIT SPAWNS" "VEDIT SPAWNS" "SPAWN FLAGS"

Usage:  .spawns add <mob vnum> <percent> [flags]
        .spawns copy <from type> <from vnum>
        .spawns change <number> <vnum | percent | flags> <value>
        .spawns remove <number | all>
        .spawns list

This lets you control how mobs spawn in a given location. Mobs only spawn if
there aren't too many other mobs present, and only if they meet the percent
and flag requirements of their spawn info. Vehicles spawn mobs in the room that
contains the vehicle (not the interior of the vehicle).

You can set any percent between .01 and 100. This is the chance the mob will
be loaded each time the room is checked for spawns, which is usually every few
minutes while players are nearby. Any mob spawned this way will gain the
SPAWNED mob flag and will despawn if no players are nearby.

Setting two flags which are mutually exclusive (e.g. NORTHERN and SOUTHERN)
will result in the mob never spawning. The flags indicate the mob will spawn
ONLY if the condition is met.

Available spawn flags:
 &cNOCTURNAL&0 - only spawns at night
 &cDIURNAL&0 - only spawns during the day
 &cCLAIMED&0 - only spawns if the room/tile is claimed
 &cUNCLAIMED&0 - only spawns if the room/tile is NOT claimed
 &cCITY&0 - only spawns if the tile is in-city (and claimed)
 &cOUT-OF-CITY&0 - only spawns if the tile is not in a city, or is unclaimed
 &cNORTHERN, SOUTHERN, EASTERN, WESTERN&0 - only spawns in that half of the map
 &cCONTINENT&0 - only spawns on continents
 &c!CONTINENT&0 - won't spawn on continents
 &cSPRING-ONLY, SUMMER-ONLY, AUTUMN-ONLY, WINTER-ONLY&0 - only spawns in one of
   these seasons

Example:
 > .spawns add 12499 3 NOCTURNAL UNCLAIMED
 > .spawns copy sector 12

See also: OLC BUILDINGS, OLC CROPS, OLC SECTORS, VNUM
#d
"BEDIT TITLE"

Usage:  .title <title>

This sets the room title for the building. It is shown above the room
description or map. The room's title will be colored based on the empire that
owns it, so it's important not to put color codes in the title.

Room titles are usually short, descriptive phrases, with title-case lettering
(Title Case Capitalizes Most Words). They should usually start with "A", "An",
or "The".

Examples:
 The Greatest Building You Never Heard Of
 A Strange House
 The Eye of the World

See also: OLC BUILDINGS
#d
"CEDIT BUILDFACING" "CEDIT BUILD FACING"

Usage:  .buildfacing [add | remove] <flags>

This command sets the rules for the tile a building must face. If the building
is an "open" building (one that doesn't take players off the map), it doesn't
require a buildfacing at all. However, if an "open" building has a buildfacing,
the game engine will still require a facing direction when it is built. This
allows you to require that quarries are built next to mountains, for example.

The following flags are available:
 &cwater&0 - any ocean or river tile
 &cplains&0 - a plains or a road that was built on plains
 &cmountain&0 - a mountain or mountain path
 &cfull-forest&0 - an overgrown forest (^^^^) or other full forest
 &cdesert&0 - a desert or a road that was built on desert
 &criver&0 - a river tile
 &cjungle&0 - any jungle tile
 &cnot-player-made&0 - can't be (e.g.) a river tile made by a player
 &cocean&0 - an ocean tile
 &coasis&0 - an oasis tile
 &ccrops&0 - any crop or seeded tile
 &cgrove&0 - a desert grove tile
 &cswamp&0 - a swamp/marsh tile
 &cany-forest&0 - any level of forest tile, from light forest to overgrown
 &copen-building&0 - a building that doesn't block the map
 &cflat-terrain&0 - for buildings that can face most flat tiles
 &cshallow-sea&0 - the area around islands
 &ccoast&0 - the land on the ocean coastline
 &criverbank&0 - the land on the edge of rivers
 &cestuary&0 - where the river meets the sea
 &clake&0 - a lake tile
 &cbase-terrain-allowed&0 - checks the base terrain for the other build-facings
    rather than only the current terrain (e.g. a building built on a mountain)

See also: OLC CRAFTS
#d
"CEDIT BUILDING"

Usage:  .building <type>

This lets you set the actual building or other construction type that the
recipe will build. The list varies depending on the .buildtype you chose.

See also: CEDIT BUILDTYPE, OLC CRAFTS
#d
"CEDIT BUILDON" "CEDIT BUILD ON"

Usage:  .buildon [add | remove] <flags>

This sets the types of terrain that a building craft may be built upon. You
must set at least one flag.

The following flags are available:
 &cwater&0 - any ocean or river tile
 &cplains&0 - a plains or a road that was built on plains
 &cmountain&0 - a mountain or mountain path
 &cfull-forest&0 - an overgrown forest (^^^^) or other full forest
 &cdesert&0 - a desert or a road that was built on desert
 &criver&0 - a river tile
 &cjungle&0 - any jungle tile
 &cnot-player-made&0 - can't be (e.g.) a river tile made by a player
 &cocean&0 - an ocean tile
 &coasis&0 - an oasis tile
 &rcrops&0 - *** do not use for buildon
 &cgrove&0 - a desert grove tile
 &cswamp&0 - a swamp/marsh tile
 &rany-forest&0 - *** do not use for buildon
 &ropen-building&0 - *** do not use for buildon
 &rflat-terrain&0 - *** do not use for buildon (ONLY for facing)
 &cshallow-sea&0 - the area around islands
 &ccoast&0 - the land on the ocean coastline
 &criverbank&0 - the land on the edge of rivers
 &cestuary&0 - where the river meets the sea
 &clake&0 - a lake tile
 &cbase-terrain-allowed&0 - *** do not use for buildon
 &croad&0 - *** only use for vehicles, not real buildings

See also: CEDIT BUILDFACING, OLC CRAFTS
#d
"CEDIT BUILDTYPE" "CEDIT BUILD TYPE"

Usage:  .buildtype <type>

Building craft recipes can be one of three types, and these types will
determine which .building set you can choose from.

Available buildtypes:
 BUILDING - a normal building
 ROAD - a road, bridge, mountain path, etc.
 BARRIER - a fence or wall

See also: CEDIT BUILDING, OLC CRAFTS
#d
"CEDIT CREATES"

Usage:  .creates <object vnum>

This options sets which object is created by the recipe. This only applies to
recipes which are not soup.

See also: CEDIT QUANTITY, OLC CRAFTS, VNUM
#d
"CEDIT FLAGS"

Usage:  .flags [add | remove] <flags>

Flags let you specify certain properties about the craft recipe, like where it
must be performed.

You must leave the IN-DEVELOPMENT flag set until the recipe is ready to go
live, at which point it becomes available to players who have the right skill.

Available flags:
 &cPOTTERY&0 - always requires cooking fire, goes faster at potter's hut
 &cBUILDING&0 - makes a building (not needed on the BUILD craft type)
 &cSKILLED-LABOR&0 - workforce cannot work this craft unless you have Skilled Labor
 &cSKIP-CONSUMES-TO&0 - won't run consumes-to interactions on any of the resources
    (for example: if you're mixing paints and don't want to refund the jars)
 &cFIRE&0 - requires cooking fire
 &cSOUP&0 - requires a container of water and creates a liquid instead of an item
 &cIN-DEVELOPMENT&0 - only immortals can use this recipe
 &cUPGRADE&0 - for building recipes only, marks this recipe as the cost to upgrade
    to this building type from some other type
 &cDISMANTLE-ONLY&0 - for building recipes only, this recipe allows the building
    to be dismantled, but not built; it won't show up in the build list
 &cIN-CITY-ONLY&0 - a craft or building can only be made in a city radius
 &cVEHICLE&0 - creates a vehicle instead of an item, see CRAFT VEHICLES
 &cLEARNED&0 - requires the player/empire 'learn' a recipe to use it
 &cBY-RIVER&0 - must be adjacent to a river
 &cREMOVE-PRODUCTION&0 - removes this craft's resources from empire production
    counts. Used e.g. in smelting copper bars, to prevent smelt/separate loops.
    Does not work on vehicles/buildings.
 &cTAKE-REQUIRED-OBJ&0 - takes the 'required object' when you start the craft, and
    may refund it when dismantled (unless the object is 1-USE)
 &cDISMANTLE-WITHOUT-ABILITY&0 - buildings and vehicles can be dismantled without
    the origina ability.

Additional flags are available via the REQUIRESFUNCTION option.

See also: CEDIT TYPE, OLC CRAFTS, OLC REMOVEINDEV
#d
"CEDIT FULLSEARCH" "CRAFT FULLSEARCH"

Usage:  .craft fullsearch -<field> <argument> <...>

This command allows you to search for crafts matching certain criteria. You
can specify multiple fields if you want. Any arguments that don't start with a
dash (-) are matched to the craft's name.

Fields:
  &c-type&0 - see HELP CEDIT TYPE
  &c-buildon&0, &c-buildfacing&0 - see HELP CEDIT BUILDON
  &c-flagged&0, &cunflagged&0 - see HELP CEDIT FLAGS
  &c-level -levelover -levelunder&0 - specific level requirement
  &c-quantity -quantityover -quantityunder&0 - specific quantity value
  &c-requiresobject&0 - requires any object
  &c-requiresfunction&0 - requires a function flag
  &c-time -timeover -timeunder&0 - specific craft time (in action ticks)
  &c-vmin&0, &c-vmax&0 - VNUM range limits

Examples:
 > .craft fullsearch -type FORGE -levelover 1
 > .craft fullsearch -type COOK -flagged FIRE
 > .craft fullsearch -levelover 50 sword -vmin 10000 -vmax 10099

To search other fields, you can generally use the normal "search" option for
other OLC types. For example, to find all crafts that require the 'Cook'
ability, use ".abil search 293".
#d
"CEDIT LEVELREQUIRED" "CEDIT LEVEL REQUIRED"

Usage:  .levelrequired <level>

This lets you set the crafting level required to make a craft. It works on any
type of craft. This uses the 'Crafting' trait shown on score, and the +CRAFTING
apply from items. Crafting level includes skill level, so a requirement of 100
would only require that the player be skill level 100.

See also: OLC CRAFTS
#d
"CEDIT LIQUID"

Usage:  .liquid <type>

For soups, the recipe requires a drink container of water and fills that with
a liquid type, rather than creating a new object. This command determines the
liquid type.

See also: CEDIT FLAGS, OLC CRAFTS
#d
"CEDIT NAME"

Usage:  .name <name>

This sets the name of the craft recipe. The name used when the player chooses
which recipe to craft, e.g. "craft hammock".

Names should be as short as possible, while still being distinct from other
existing craft recipes.

See also: OLC CRAFTS
#d
"CEDIT QUANTITY"

Usage:  .quantity <number>

Craft recipes can be set to create more than one of an item by raising the
quantity.

See also: CEDIT CREATES, OLC CRAFTS
#d
"CEDIT REQUIRESABILITY" "CEDIT REQUIRES ABILITY"

Usage:  .requiresability <ability name | none>

You can use this command to set which ability is required to use a particular
craft recipe. If you don't want it to require an ability any more, use 'none'.

See also: OLC CRAFTS
#d
"CEDIT REQUIRESOBJECT" "CEDIT REQUIRES OBJECT"

Usage:  .requiresobject <vnum>

Some craft recipes may require a specific object. If the user doesn't have
the object, the recipe won't show up in the list at all. This essentially
associates the recipe to the object.

Pro tip: Combine requiresobject with no-ability to create a building like a
tent, which can be built as long as you have one in your inventory.

For non-building crafts, the object is not consumed unless it's also on the
list of required resources.

Don't use SCALABLE items as a required object if it will be consumed, because
it won't be scaled back to the same level if it's refunded.

See also: OLC CRAFTS, VNUM
#d
"CEDIT RESOURCES"

Usage:  .resource add <type> <amount> <vnum/name>
        .resource change <number> <quantity | vnum | name | flags> <value>
        .resource remove <number | all>
        .resource move <number> <up | down>

This command sets the resources required to make the recipe.

Building recipes will require the resources in the order given here; crafting
recipes will use all resources at once. Dismantled buildings also return half
of the used resources, rounded down.

See HELP OLC RESOURCES for more information.

See also: OLC CRAFTS, RESOURCE ACTIONS
#d
"CEDIT TIME"

Usage:  .time <ticks>

This sets the time (in action ticks) that it takes to create the recipe. One
action tick is 5 real seconds. In some cases, the time is reduced by meeting
certain requirements.

For crafts with the POTTERY flag, they take 1/4 the time if crafted at a
potter's hut.

All crafting times are cut in half for players with the matching mastery
ability.

All crafting times are cut in half if the craft type requires a tool (hammer
to forge, sewing kit to sew), and that tool is marked (superior).

See also: CEDIT FLAGS, CEDIT MASTERY, CEDIT TYPE, OLC CRAFTS
#d
"CEDIT TYPE"

Usage:  .type <type>

The type determines which command is used to craft the item, but not which
ability. Some types also have built-in rules.

Available types are:
 FORGE - requires a hammer and a forge building
 CRAFT
 COOK
 SEW - requires a sewing kit
 MILL - requires mill building, quantity doubled by Master Farmer ability
 BREW - potions
 MIX - poisons
 BUILD - used with the build command
 WEAVE - requires loom or tailor
 WORKFORCE - set requires-function flags and workforce will pick up this task
   at the associated building
 MANUFACTURE
 BAKE - requires a bakery or oven
 MAKE

Note: The SOUP and VEHICLE craft flags both also modify the recipe.

See also: CEDIT FLAGS, CEDIT REQUIRESABILITY, OLC CRAFTS, OLC WORKFORCE
#d
"CEDIT VOLUME"

Usage:  .volume <drinks>

For soups, this determines the maximum number of drinks created by the recipe.
It will always be limited by the size of the drink container the player uses
to cook the soup in.

See also: CEDIT FLAGS, OLC CRAFTS
#d
CLASSEDIT "OLC CLASSES" "OLC CLASS"

Usage:  .class <command>
        .command

The .olc class editor allows you to set up player classes. On EmpireMUD, the
players don't begin with classes -- they unlock them by leveling up certain
skills. Classes can have broadly overlapping requirements (but can't be
identical to each other), allowing players with similar sets of skills to end
up in different classes.

All commands in the editor are highlighted in yellow/green and placed inside
<angle braces>. You can get help on these commands by typing:
  &yHELP CLASSEDIT <COMMAND>&0

You can close an open editor with .abort or .save.

Example:
> .class edit 123
> .abbrev Test
> .save

For notes on the mud's building rules, see HELP BUILDING GUIDE.

See also: OLC, OLC ABORT, OLC EDIT, OLC EDITOR, OLC SAVE
#d
"CLASSEDIT ABBREVIATION"

Usage:  .abbrev <string>

The class abbreviation is shown on the who list and in other places where a
short name is desired. It must be exactly 4 characters and contain no color
codes.

See also: OLC CLASSES
#d
"CLASSEDIT FLAGS" "CLASS FLAGS"

Usage:  .flags [add | remove] <flags>

Class flags set various properties on classes.

Available flags:
 IN-DEVELOPMENT - Will not be assigned to players.

See also: OLC CLASSES, OLC REMOVEINDEV
#d
"CLASSEDIT MAXHEALTH" "CLASSEDIT MAX HEALTH"

Usage:  .maxhealth <amount>

This determines the amount of health a player gets at skill level 100. Remember
that certain abilities will raise this amount, and gear will also add to it.

See also: OLC CLASSES
#d
"CLASSEDIT MAXMANA" "CLASSEDIT MAX MANA"

Usage:  .maxmana <amount>

This determines the amount of mana a player gets at skill level 100. Remember
that certain abilities will raise this amount, and gear will also add to it.

See also: OLC CLASSES
#d
"CLASSEDIT MAXMOVES" "CLASSEDIT MAX MOVES"

Usage:  .maxmoves <amount>

This determines the number of movement points a player gets at skill level 100.
Remember that certain abilities will raise this amount, and gear will also add
to it.

See also: OLC CLASSES
#d
"CLASSEDIT NAME"

Usage:  .name <name>

This sets the name of the class. Names should have their first letters
capitalized and should be reasonably short and concise. You should avoid names
that conflict with other classes.

See also: OLC CLASSES
#d
"CLASSEDIT REQUIRES"

Usage:  .requires <skill> <level>
        .requires remove <skill>

This allows you to set the skill requirements for a class. Players are auto-
matically assigned a class when their skills enter a certain range. You can
set as few or as many skill requirements on a class as you like; the player
will be matched to the class that has the best fit.

You can specify the skill by vnum or name (use "quotation marks" for multi-word
names).

The actual requirement is 24 levels below the value you set -- if you set a
skill requirement to 100, a player will qualify when it hits 76.

All stock EmpireMUD classes specify two skills at level 100, but you have more
flexibility if you want to do something different. For example, you could do
more specialized classes that require two skills at 100 and a third at 75.
If you intend to change the number of skills that a player can raise to 50/75/
100, though, you should consult a programmer.

See also: OLC CLASSES, VNUM
#d
"CLASSEDIT ROLE"

Usage:  .role <role> add <ability>
        .role <role> remove <ability | all>

This command assigns abilities to the class, under each role. If more than one
role will have an ability, you must assign it to each of them. There is no
limit on the number of abilities that can be assigned to each role.

Abilities can be specified by name or vnum.

You should not assign an ability that is also assigned to a skill, because a
player who has the ability from his/her class will also count as having spent
an abilitiy point in the skill tree.

See also: OLC CLASSES, VNUM
#d
COMPONENTS "RESOURCE COMPONENTS" "COMPONENT RESOURCES"

Components are generic categories of objects. This allows recipes to require
a type of object, rather than a specific object. Components are 'generics',
so there can be any number of types of components in the game. Components can
also be sub-types of other components using the 'relations' settings in the
generic editor.

See also: GENERIC COMPONENTS, OEDIT COMPONENT
#d
"CRAFT VEHICLES" "VEHICLE CRAFTS"

Crafts with the VEHICLE flag will create a vehicle instead of an item. Vehicles
are constructed over time like buildings, and will appear unfinished in the
room until they are completed.

Vehicle crafts don't use the "quantity" or "time" fields. Otherwise, they
behave like regular crafts.
#d
"CROPEDIT CLIMATE" "SECTEDIT CLIMATE" "CLIMATE FLAGS"

Usage:  .climate [add | remove] <flags>

Each crop and sector has a climate, and these must match for the crop to be
planted on the sector. Climate also affects certain abilities, such as morphs.
Every crop must be associated with at least 1 climate flag.

If a crop has multiple climate flags, the sector must match ALL of them for the
crop to be planted there, unless the crop has the ANY-LISTED-CLIMATE flag, in
which case they must only match at least 1 climate.

For sectors, you can test climate temperatures with ".checktemp" while editing
a sector.

Climates:
 &chot&0 - Hotter than normal for this type (modifier).
 &ccold&0 - Colder than normal for this type (modifier).
 &cmild&0 - Milder temperatures than normal for this type (modifier).
 &charsh&0 - Harsher temperatures than normal for this type (modifier).
 &chigh&0 - Higher than normal for this type (modifier), e.g. mountain peak.
 &clow&0 - Lower than normal for this type (modifier).
 &cmagical&0 - Magical in some way (enchanted forest).
 &ctemperate&0 - Temperate climate.
 &carid&0 - Arid climate.
 &ctropical&0 - Tropical climate.
 &cmountain&0 - Mountainous region.
 &criver&0 - Moving water such as a river.
 &cfresh water&0 - Non-moving fresh water.
 &csalt water&0 - Ocean, sea, or salt lake.
 &cforest&0 - Any kind of forest or jungle.
 &cgrassland&0 - Plains, savannah, or steppe.
 &cwaterside&0 - Adjacent (or near) fresh water.
 &cfrozen water&0 - Would be water but is currently frozen.

See also: OLC CROPS, OLC SECTORS, SECTEDIT CHECK TEMPERATURE
#d
"CROPEDIT FLAGS" "CROP FLAGS"

Usage:  .flags [add | remove] <flags>

Crop flags determine some various properties about crops.

Available flags:
 REQUIRES-WATER - Can only be planted within 4 tiles of fresh water
 ORCHARD - Use 'pick' and 'chop' interactions instead of 'harvest'
 !WILD - Won't spawn in the wild
 NEWBIE-ONLY - Only spawns on newbie islands (can be planted anywhere)
 !NEWBIE - Does not spawn on newbie islands
 ANY-LISTED-CLIMATE - Only 1 of the climate flags must match to plant this.
 NO-GLOBAL-SPAWNS - Won't use global spawn lists.

See also: OLC CROPS
#d
"CROPEDIT FULLSEARCH"

Usage:  .crop fullsearch -<field> <argument> <...>

This command allows you to search for crops matching certain criteria. You can
specify multiple fields if you want. Any arguments that don't start with a
dash (-) are matched to the crop's name, title, and icons.

Fields:
  &c-climate&0 - see HELP CROPEDIT CLIMATE
  &c-extradesc&0 - has a specific keyword in its extra descs
  &c-flagged&0, &cunflagged&0 - see HELP CROPEDIT FLAGS
  &c-interaction&0 - has a specific type, see HELP CROPEDIT INTERACTION
  &c-mapout&0 - color name, see HELP CROPEDIT MAPOUT
  &c-x&0, &c-y&0 - is within a certain x or y coordinate range (only wild crops)
  &c-vmin&0, &c-vmax&0 - VNUM range limits

Examples:
 > .crop fullsearch -x 25 -y 25 potato
 > .crop fullsearch -flagged NEWBIE-ONLY -flagged ORCHARD
 > .crop fullsearch -interaction CHOP -vmin 10000 -vmax 10099

To search other fields, you can generally use the normal "search" option for
other OLC types. For example, to find all crops that spawn a certain mob,
use ".m search <mob's vnum>".
#d
"CROPEDIT MAPOUT COLOR" "SECTEDIT MAPOUT COLOR" "MAPOUT COLOR" "MAP OUT COLOR"

Usage:  .mapout <color>

This determines what color pixel the sector or crop has on the graphical map.

See also: OLC CROPS, OLC SECTORS
#d
"CROPEDIT NAME"

Usage:  .name <name>

A crop's name is a short name, always plural and lower-case, that describes
the crop. It is frequently used to build sentences such as "You start planting
<name> here."

The editor will force the first character of the name to be lower-case.

Examples:
 "apples"
 "olives"
 "gourds"

See also: OLC CROPS
#d
"CROPEDIT TITLE"

Usage:  .title <title>

This is the room title for rooms of this crop type. As with all room titles,
it should be title-cased (Each Word Capitalized), should usually start with
an article like "a" or "an", and should not include any punctuation.

Examples:
 "An Apple Orchard"
 "A Field of Cotton"
 "A Vast Cornfield"

See also: OLC CROPS
#d
"CROPEDIT XMIN" "CROPEDIT XMAX" "CROPEDIT YMIN" "CROPEDIT YMAX"

Usage:  .xmin <percent>
        .xmax <percent>
        .ymin <percent>
        .ymax <percent>

These four settings help the MUD determine where a crop can spawn. It spawns
if its x-coordinate is <= xmax or >= xmin, and y-coordinate is <= ymax or >=
ymin.

If the 'min' is less than the 'max', this specifies the area between the two.
If the 'max' is less than the 'min', it instead covers both edges of the map,
but NOT the area between the two.

These numbers range from 0-100 because they are percentages of the current map
width, not absolute values.

You should always make sure you have crops set to cover all parts of the map,
so that the crop-spawning systems can pick a valid crop for any region. It
usually helps to draw yourself a diagram on paper of the regions of the map
covered by the crops.

See also: OLC CROPS
#d
EVEDIT EVENTEDIT "OLC EVENTS" "EVENT EDITOR"

Usage:  .ev <command>
        .command

The .olc event editor allows you to configure the data for events, which
are global competitions that players can participate in. The event data
includes text and rewards, but the actual points come from quests or scripts.

All commands in the editor are highlighted in yellow/green and placed inside
<angle braces>. You can get help on these commands by typing:
  &yHELP EVEDIT <COMMAND>&0

You can close an open editor with .abort or .save.

Example:
> .ev edit 123
> .name Save the Elves
> .save

For notes on the mud's building rules, see HELP BUILDING GUIDE.

See also: OLC, OLC ABORT, OLC EDIT, OLC EDITOR, OLC SAVE
#d
"EVEDIT COMPLETEMESSAGE" "EVEDIT COMPLETE MESSAGE"

Usage:  .completemessage

The complete message is shown to players when the event ends.

The message is set in the string editor. You should use /fi to format it
with indent inside the string editor if it's longer than one line (80 chars).

See also: OLC EVENTS, STRING EDITOR
#d
"EVEDIT DESCRIPTION"

Usage:  .description

The event's description is shown on the information display for the event. It
should describe the event briefly, and should include how to earn points.

The message is set in the string editor. You should use /fi to format it
with indent inside the string editor if it's longer than one line (80 chars).

See also: OLC EVENTS, STRING EDITOR
#d
"EVEDIT DURATION"

Usage:  .duration <minutes>

This is the length of time that an event runs once it starts.

See also: OLC EVENTS
#d
"EVEDIT FLAGS" "EVENT FLAGS"

Usage:  .flags [add | remove] <flags>

The following faction flags are available:
 IN-DEVELOPMENT - The event cannot run with this flag on.
 CONTINUES - When this event runs, it re-uses the id and leaderboard from the
    previous run (for events that are broken and must be paused and re-started)

See also: OLC EVENTS, OLC REMOVEINDEV
#d
"EVEDIT NAME"

Usage:  .name <name>

This sets the name of the event. Events should have a simple, unique name.
Avoid starting with "The" or "A".

See also: OLC EVENTS
#d
"EVEDIT MAXPOINTS" "EVEDIT MAX POINTS" "EVEDIT MAXIMUM POINTS"

Usage:  .maxpoints <points | none>

This optional trait caps the maximum number of points a player may gain in the
event. After this, any extra points are ignored. Without this trait, players
may gain any number of points.

Uses for this:
- On a long event with a fixed number of points each day, to skip a day safely.
- On an event where players only need to do daily quests a few times to finish.

See also: OLC EVENTS
#d
"EVEDIT MINLEVEL" "EVEDIT MAXLEVEL" "EVEDIT MIN LEVEL" "EVEDIT MAX LEVEL" "EVEDIT MINIMUM LEVEL" "EVEDIT MAXIMUM LEVEL"

Usage:  .minlevel <level | none>
        .maxlevel <level | none>

This allows you to set the level limits on an event. This is only used for
display, and is not enforced. If you wish to enforce a level limit on an event,
do it in the quests or scripts that reward event points.

See also: OLC EVENTS
#d
"EVEDIT NOTES"

Usage:  .notes

Notes are for internal use only. THis message is set in the string editor, and
you should record anything that's important for running the event.

See also: OLC EVENTS, STRING EDITOR
#d
"EVEDIT REPEAT" "EVEDIT REPEAT TIME" "EVEDIT REPEATS AFTER"

Usage:  .repeat <minutes>

This setting causes an event to automatically repeat itself after it ends.

See also: OLC EVENTS
#d
"EVEDIT REWARDS" "EVEDIT THRESHOLDREWARDS" "EVEDIT RANKREWARDS" "EVEDIT THRESHOLD REWARDS" "EVEDIT RANK REWARDS"

Usage: .rankrewards add <min rank> <max rank> <type> <amount> <vnum/type>
       .thresholdrewards add <min threshold> <type> <amount> <vnum/type>
       .*rewards change <number> <min | max | vnum | amount> <value>
       .*rewards copy <from type> <from vnum>
       .*rewards remove <number | all>
       .*rewards move <number> <up | down>

These commands set the rewards for an event. Rewards are collected by players
using the 'event collect' command. There are two types of rewards:

Threshold rewards are granted when a player passes a certain number of event
points. These rewards can be collected any time. You only need to set the
minimum number of threshold points required to earn each reward.

Rank rewards are granted at the end of the event, based on how well the player
did compared to other participants. For each of these rewards, you set a
minimum and maximum rank (inclusive) and all players who finish within those
ranks will receive the reward.

See HELP QEDIT REWARD for a list of reward types.

See also: EVENTS, OLC EVENTS
#d
"FACTION SCRIPTING" "SCRIPTING FACTIONS"

Writing scripts using faction gives you the ability to control access to
content using the faction system. You should usually prefer to use the Hated
and Venerated levels, rather than the endcap Despised and Revered levels,
because gaining/losing even 1 reputation point can bump a player out of the
endcaps.

Testing reputation against the mob's faction:
if !%actor.has_reputation(%self.allegiance%,Liked)%
  %send% %actor% You must be Liked by %self.faction_name%!
  return 0
end

You can also cause players to gain/lose reputation with:
nop %actor.gain_reputation(1234,-1)%

You can change the faction of a mob with:
nop %mob.allegiance(1234)%

See also: OLC FACTIONS
#d
FEDIT FACTIONEDIT "OLC FACTIONS" "FACTION EDITOR"

Usage:  .f <command>
        .command

The .olc faction editor allows you to configure the data for factions, which
are groups that NPCs can belong to. Players gain and lose reputation with
factions, and these reputation levels can be used to control access to quests
and adventure content.

All commands in the editor are highlighted in yellow/green and placed inside
<angle braces>. You can get help on these commands by typing:
  &yHELP FEDIT <COMMAND>&0

You can close an open editor with .abort or .save.

Example:
> .f edit 123
> .name Tree Elves
> .flag REP-FROM-KILLS
> .save

For notes on the mud's building rules, see HELP BUILDING GUIDE.

See also: OLC, OLC ABORT, OLC EDIT, OLC EDITOR, OLC SAVE
#d
"FEDIT NAME"

Usage:  .name <name>

A faction's name should be capitalized and short, and should never be a
complete sentence. A leading article like "A" or "The" is optional.

Examples:
> The Elves of West Treeville
> The Goblins of Nachotriste
> MacDdraig, the Whale Dragon

See also: OLC FACTIONS
#d
"FEDIT DESCRIPTION"

Usage:  .description

Faction descriptions can be any length (up to 4000 characters), and should
include basic information about the faction. If it isn't immediately obvious
where to find your faction or how to gain/lose reputation with them, you
should also include this information.

Players only see faction descriptions if they use the 'faction' command.

See also: FACTION, OLC FACTIONS, STRING EDITOR
#d
"FEDIT FLAGS" "FACTION FLAGS"

Usage:  .flags [add | remove] <flags>

The following faction flags are available:
 &cIN-DEVELOPMENT&0 - The faction can't be seen by players, and won't gain rep.
 &cREP-FROM-KILLS&0 - Players can gain/lose rep by killing faction mobs.
 &cHIDE-IN-LIST&0 - Does not appear in the 'factions' command for players.
 &cHIDE-ON-MOB&0 - Does not appear below the mob description.

See also: OLC FACTIONS, OLC REMOVEINDEV, RELATIONSHIP FLAGS
#d
"FEDIT MATCHRELATIONS" "FEDIT MAXRELATIONSHIPS" "FEDIT MATCH RELATIONS" "FEDIT MATCH RELATIONSHIPS"

Usage:  .matchrelations

This will synchronize relationships between this faction and other factions,
and will add any relations that are missing. It will not, however, remove any
relationships that are on this faction but don't exist on the other faction.

Usually, the relation flags should be the same on both factions, and
matchrelations makes this easier. However, there may also be reasons to have
different relationship flags on each side.

See also: FEDIT RELATION, OLC FACTIONS
#d
"FEDIT MAXREPUTATION" "FEDIT MAX REPUTATION" "FEDIT MINREPUTATION" "FEDIT MIN REPUTATION"

Usage:  .maxreputation <reputation>
        .minreputation <reputation>

These settings determine the highest and lowest reputations a player can
possibly have with this faction. Players can never move outside this range,
no matter how much reputation they gain or lose. They will still gain/lose
rep with related factions when at these limits.

See also: OLC FACTIONS, OLC LEVELS, REPUTATIONS
#d
"FEDIT RELATION" "FEDIT RELATIONS" "FEDIT RELATIONSHIPS" "RELATIONSHIP FLAGS"

Usage:  .relation <name/vnum> flags [which flags]
        .relation <name/vnum> delete

Factions can have relationships with other factions. This affects how players
gain reputation with one faction, based on their reputation with another.

These flags determine the kind of relationship:
 SHARED-GAINS - Allies: If a player gains rep with that faction, they also gain
   this one, and vice versa.
 INVERSE-GAINS - Enemies: If a player gains rep with that faction, they lose
   rep with this one, and vice versa.
 MUTUALLY-EXCLUSIVE - If a player has a positive reputation with that faction,
   they cannot gain rep with this faction at all.
 UNLISTED - This relationship will not show to players on the faction info.

Note: If a reputation gain/loss is from killing a mob, it will only affect
  related factions with REP-FROM-KILLS flags, whether the original faction
  had this flag or not.

See also: FEDIT MATCH RELATIONS, OLC FACTIONS
#d
"FEDIT STARTINGREPUTATION" "FEDIT STARTING REPUTATION"

Usage:  .startingreputation <reputation>

This is the reputation level a player starts at when they first meet the
faction. Usually players start at neutral, but there are reasons to start
higher or lower. For example, perhaps you start out Despised by a faction
and must work your way up into their good graces. Or, start out Revered by
a faction but lose reputation over time.

See also: OLC FACTIONS, OLC LEVELS, REPUTATIONS
#d
GENEDIT GENERICEDIT "OLC GENERICS "GENERIC OLC" "GENERIC EDIT"

Usage:  .generic <command>
        .<command>

The .olc generics editor allows you to add, edit, or delete generics from
the system. It provides an in-game menu for controlling features like liquids
and resource actions.

All commands in the editor are highlighted in yellow/green and placed inside
<angle braces>. You can get help on any of these commands by typing:
  &yHELP GENEDIT <COMMAND>&0

Each type of generic provides a different function, and has its own help file.
See: GENERIC LIQUID, GENERIC ACTION, GENERIC COOLDOWN, GENERIC AFFECT,
  GENERIC CURRENCY, GENERIC COMPONENT

You can close an open editor with .abort or .save.

Example:
 > .gen edit 123
 > .name My Generic
 > .save

For notes on the mud's building rules, see HELP BUILDING GUIDE.

See also: OLC, OLC ABORT, OLC EDIT, OLC EDITOR, OLC SAVE
#d
"GENERIC ACTIONS" "ACTION EDITOR" "ACTION GENERICS" "GENEDIT BUILD2CHAR" "GENEDIT BUILD2ROOM" "GENEDIT CRAFT2CHAR" "GENEDIT CRAFT2ROOM" "GENEDIT REPAIR2CHAR" "GENEDIT REAPIR2ROOM"

Generic 'actions' are used in resource lists, and are free tasks that players
perform while building or making a vehicle. Normal crafts don't support the
action-type resources, nor do augments.

Actions require 6 properties:
  <&ybuild2char&0> Sent to the character when building a building
    Example: You dig at the ground.
  <&ybuild2room&0> Sent to the room when building a building
    Example: $n digs at the ground.
  <&ycraft2char&0> Sent to the character when crafting a vehicle
    Example: You dig underneath $V.
  <&ycraft2room&0> Sent to the room when crafting a vehicle
    Example: $n digs underneath $V.
  <&yrepair2char&0> Sent to the character when repairing a vehicle
    Example: You dig underneath $V.
  <&yrepair2room&0> Sent to the room when repairing a vehicle
    Example: $n digs underneath $V.

These messages support codes like $n for the actor and $V for a vehicle
being crafted/repaired.

Stock actions can be found in the 1000-1099 vnum block, but new actions should
usually be added within an adventure zone's vnums.

See also: OLC GENERICS, DOLLAR SIGN CODES
#d
"GENERIC AFFECTS" "AFFECTS EDITOR" "AFFECT EDITOR" "AFFECT GENERICS"

Generic 'affects' are used by spells, abilities, and scripts to show names on
the affect list, and to show messages when these effects wear off.

Affects have several properties:
  <&yapply2char&0> An optional message shown to the character when the affect
    is applied.
  <&yapply2room&0> An optional message shown to the room when the affect is
    applied.
  <&ywearoff&0> An optional message shown to the character when the affect ends.
  <&ywearoff2room&0> An optional message shown to the rest of the room.
  <&ylookatchar&0> An optional message shown after description on 'look name'.
  <&ylookatroom&0> An optional message shown after the character on 'look'.

Optional properties used for damage-over-time effects (DoTs):
  <&ydotattack&0> Custom attack message type.

You can use <&ystandardwearoff&0> to add the normal wear-off message. This only
adds a message for the character -- normal effects don't show anything to the
room when they end.

See also: AFFECTS, OLC GENERICS
#d
"GENEDIT APPLY2CHAR"

Usage:  .apply2char <message | none>

This message is sent to the character when he/she gains this affect. This
message is optional.

See also: OLC GENERICS, GENERIC AFFECTS
#d
"GENEDIT APPLY2ROOM"

Usage:  .apply2room <message | none>

This message is sent to the room when a person gains this affect. It will
only be shown to players who can see that person. This message is optional.

See also: OLC GENERICS, GENERIC AFFECTS
#d
"GENEDIT LOOKATCHAR" "GENEDIT LOOK-AT-CHAR" "GENEDIT LOOK AT CHAR"

Usage:  .lookatchar <message | none>

This message is shown below the character description when another person looks
at them while this affect is on them. This message is optional.

Can use $n, $e, $s, and $m tokens.

Example:
You look at Albert:
You notice a distinct, red glint in his eyes.

See also: OLC GENERICS, GENERIC AFFECTS, DOLLAR SIGN CODES
#d
"GENEDIT LOOKATROOM" "GENEDIT LOOK-AT-ROOM" "GENEDIT LOOK AT ROOM"

Usage:  .lookatroom <message | none>

This messages is shown below the character when a person looks at the room they
are in while they have this affect. This message is optional.

Can use $n, $e, $s, and $m tokens. Messages usually start with "...$e".

Example:
<Queen> Victoria stands before you in full regalia.
...she has a majestic aura about her!

See also: OLC GENERICS, GENERIC AFFECTS, DOLLAR SIGN CODES
#d
"GENERIC COMPONENTS" "COMPONENT GENERICS" "COMPONENT EDITOR"

The 'component' generic type is used to create generic types of items that can
be used in craft recipes (and scripts). Components can be 'types of' other
components using the <relations> field. For example, if 'fine sapling' is
related to 'sapling', than any fine sapling object can be used when the craft
requires a sapling.

Most new crafting resources should be set with a component type using the
<component> field of the object. Use these guidelines:
 - Where possible, use an existing component type rather than adding one.
 - Only add a new component type if you think multiple items will use it.
 - Only add a new component type if you think some crafts will require it.

You must set 3 properties on currency:
  <&yplural&0> a name to show when there's more than one (e.g. saplings)
  <&yitem&0> a representative item that is this type of generic
     (where possible, you should use the same vnum for the item as the generic)
  <&yrelations&0> Other generic components that this one 'counts as'.

Flags:
  BASIC - Common component types should be set with this flag. The game will
    generally prefer basic components over non-basic ones.

See also: OLC GENERICS, GENEDIT PLURAL, GENEDIT ITEM, GENEDIT RELATIONS
#d
"GENERIC COOLDOWN" "COOLDOWN EDITOR" "COOLDOWN GENERICS"

Generic 'cooldowns' are used to track time limits on players' abilities, as
well as in scripts.

Cooldowns have 1 optional property:
  <&ywearoff&0> An optional message shown when the cooldown ends.

You can use <&ystandardwearoff&0> to add the normal wear-off message.

You can also create quick cooldowns with: .gen quickcooldown <type> <vnum>

See also: GENEDIT QUICKCOOLDOWN, OLC GENERICS
#d
"GENERIC CURRENCY" "CURRENCY GENERICS" "CURRENCY EDITOR" "GENEDIT SINGULAR"

The 'currency' generic type is used to create money for use in shops and in
scripts. This is separate from player-minted coins. The most common type of
currency included in stock content is adventure-specific tokens.

You must set 2 properties on currency:
  <&ysingular&0> the money's name (e.g. dragon token)
  <&yplural&0> a name to show when there's more than one (e.g. dragon tokens)

See also: OLC GENERICS, GENEDIT PLURAL
#d
"GENEDIT DOTATTACK" "GENEDIT DOT ATTACK"

Usage:  .dotattack <vnum | name | none>

This is used on affect generics that are used for damage-over-time (DoT).
If this field is set, the DoT will use the specified attack message instead of
its default.

See also: OLC GENERICS, GENERIC AFFECTS
#d
"GENERIC LIQUIDS" "LIQUID GENERICS" "LIQUID EDITOR" "GENEDIT LIQUID" "GENEDIT COLOR" "GENEDIT HUNGER" "GENEDIT THIRST" "GENEDIT DRUNK"

The 'liquid' generic type is used in drink containers and resource lists.

You must set 6 properties on liquids:
  <&yliquid&0> the name as it appears in descriptions (a bottle of 'water')
  <&ycolor&0> the color of the liquid when the player looks in the bottle
  <&yhunger&0> number of hours to satiate hunger per unit of liquid
  <&ythirst&0> number of hours to satiate thirst per unit
  <&ydrunk&0> number of hours to cause drunknness per unit
  <&yliquidflags&0> optional flags for liquids (see LIQUID FLAGS)

Stock liquids can be found in the 0-99 vnum block, but new liquids should
usually be added within an adventure zone's vnums.

See also: OLC GENERICS
#d
"GENEDIT FLAGS"

Usage:  .flags [add | remove] <flags>

The following flags for generics are available:
 &cBASIC&0 - For components, only basic components can substitute for simpler
    component types (fine pillar will substitute for pillar because of BASIC).
 &cIN-DEVELOPMENT&0 - Will not show up for players. This currently only applies
    to MOON generics.

See also: OLC GENERICS
#d
"GENEDIT FULLSEARCH" "GENERIC FULLSEARCH"

Usage:  .gen fullsearch -<field> <argument> <...>

This command allows you to search for generics matching certain criteria. You
can specify multiple fields if you want. Any arguments that don't start with a
dash (-) are matched to the generic's name and strings.

Fields:
  &c-flagged&0, &cunflagged&0 - see HELP GENEDIT FLAGS
  &c-type&0 - see HELP GENEDIT TYPE
  &c-vmin&0, &c-vmax&0 - VNUM range limits

Liquid fields (see HELP GENERIC LIQUID):
  &c-drunk&0, &c-drunkover&0, &c-drunkunder&0 - Search drunk values
  &c-hunger&0, &c-hungerover&0, &c-hungerunder&0 - Search hunger values
  &c-thirst&0, &c-thirstover&0, &c-thirstunder&0 - Search thirst values
  &c-liquidflagged&0 - See GENEDIT LIQUID FLAGS

Moon fields (see HELP GENERIC MOON):
  &c-mooncycle&0, &c-mooncycleover&0, &c-mooncycleunder&0 - Search moon cycle values

Examples:
 > .gen fullsearch -type LIQUID brown
 > .gen fullsearch -flagged BASIC -type COMPONENT
 > .gen fullsearch -type MOON -vmin 10000 -vmax 10099

To search other fields, you can generally use the normal "search" option for
other OLC types. For example, to find component generics with obj 6423 ("some
sticks") as their representative item, use ".o search 6423".
#d
"GENEDIT ITEM"

Usage:  .item <vnum>

This sets the representative item for a generic component. That item should
have its component type set to this component. For example, if the generic
component you're making is called 'rock', then the item should be a basic
rock.

Where possible, try to use the same vnum for the item and for the component.
However, this is not required if you have a compelling reason not to.

See also: GENERIC COMPONENTS
#d
"GENERIC LANGUAGE" "LANGUAGE GENERICS" "LANGUAGE EDITOR"

The 'language' generic type creates languages that players and NPCs can speak.

Languages only have a name and some flags. Players can refer to a language by
its whole name, or can remove the spaces or replace spaces with dashes. For
example, a language called "Old High Western" can also be referred to as
"old-high-western" or "oldhighwestern".

Flags used by languages:
  BASIC - All players can automatically speak this language.
  IN-DEVELOPMENT - Language is not available.

EmpireMUD comes with language [150] English and all characters start with this
language. Add the IN-DEV flag to disable it.

See also: OLC GENERICS, SPEAK, SET LANGUAGE, SHOW LANGUAGES
#d
"GENEDIT LIQUIDFLAGS" "GENEDIT LIQUID FLAGS" "LIQUID FLAGS"

Usage:  .liquidflags [add | remove] <flags>

The following flags are available for liquids:
 &cWATER&0 - Counts as water for certain game commands (douse).
 &cCOOLING&0 - Drinking this liquid makes the player cooler, if warm.
 &cWARMING&0 - Drinking this liquid makes the player warmer, if cold.

See also: OLC GENERICS, GENERIC LIQUIDS
#d
"GENERIC MOON" "MOON GENERICS" "MOON EDITOR" "GENEDIT CYCLE"

The 'moon' generic type controls what moons appear in the sky. These are shown
to players on 'look up' or 'weather' and to immortals on 'show moons'.

Aside from their name, moons have just one property:
  <&ycycle&0> the number of days in the moon's full cycle

Note: Earth's moon has a natural cycle of 29.53 days but since EmpireMUD uses
30-day months, this is better approximated as 29.13 days.

See also: OLC GENERICS
#d
"GENEDIT NAME"

Usage:  .name <name>

The name of a generic has various rules based on the generic type. On some
types, like liquids, the name is never shown to players. However, other types
such as actions do appear to the player.

Action and component names should be lowercase unless they are proper nouns.

See also: OLC GENERICS
#d
"GENEDIT PLURAL"

Usage:  .plural <text>

For currencies and components, this is the plural version of the name.

See also: GENERIC CURRENCY, GENERIC COMPONENTS
#d
"GENEDIT QUICKCOOLDOWN"

Usage:  .gen quickcooldown <type> <vnum>

This creates a new generic cooldown based on the type/vnum you pick. For
example, using it on an object named "a puppy whistle" results in a new
cooldown named "puppy whistle" and with the standard wear-off message.

See also: OLC GENERICS
#d
"GENEDIT RELATIONS"

Usage:  .relation add <vnum>
        .relation copy <from vnum>
        .relation remove <vnum | all>

Relations are other generics that are tied to this one. These relationships
are one-way, so one generic may relate to another but that other one does not
relate back to it.

Components: A generic component 'counts as' all the types it's related to. For
example, a 'fine sapling' component could have 'sapling' as one of its
relations. This means all 'fine saplings' also count as 'saplings'.

See also: GENERIC COMPONENTS
#d
"GENEDIT STANDARDWEAROFF"

Usage:  .standardwearoff

This sets the 'wearoff' property to a standard message based on the name of
the generic.

See also: OLC GENERICS, GENERIC AFFECTS, GENERIC COOLDOWNS, GENEDIT WEAROFF
#d
"GENEDIT TYPE"

Usage:  .type <type>

Each generic type has its own requirements and features. See the help file
for each type:
 ACTION - Simple echoes performed during building (GENERIC ACTIONS)
 LIQUID - Drinkables for use in items (GENERIC LIQUIDS)
 COOLDOWN - For use in abilities and scripts (GENERIC COOLDOWNS)
 AFFECT - Shown on the 'affects' list, and wear-off messages (GENERIC AFFECTS)
 CURRENCY - Used in shops and scripts (GENERIC CURRENCY)
 COMPONENT - Used for crafting/building (GENERIC COMPONENT)

See also: OLC GENERICS
#d
"GENEDIT WEAROFF"

Usage:  .wearoff <message | none>

The wearoff message is sent to the player when the cooldown/affect ends. This
message is optional.

See also: OLC GENERICS, GENERIC AFFECTS, GENERIC COOLDOWNS,
GENEDIT STANDARDWEAROFF
#d
"GENEDIT WEAROFF2ROOM"

Usage:  .wearoff2room <message | none>

The wearoff message is sent to the rest of the room when a player's affect
ends. It will only be shown to players who can see that person. This message
is optional.

See also: OLC GENERICS, GENERIC AFFECTS
#d
"GEDIT CAPACITY"

Usage:  .capacity <amount>

This sets the amount you can mine in a 'Mine Data' global. Mines may randomly
have as low as half this amount, but the amount you set here is the maximum.

If the mine is built with Deep Mines, it will have 50% more.

For example, if you set the capacity to 50, it will have 25-50 ore normally or
37-75 ore if it's a deep mine.

See also: GEDIT, DEEP MINES, GLOBAL MINE DATA
#d
"GEDIT CLIMATEEXCLUDE"

Usage:  .climateexclude [add | remove] <flags>

A 'Map Spawns' global table may have climate flags set to exclude. If so, the
global table is only used if a tile DOES NOT have all the flags in this set.
For example, you can use it to create a set that does not apply to arid
climates.

These are the same set of flags from HELP SECTEDIT CLIMATE.

See also: OLC GLOBALS
#d
"GEDIT CLIMATEFLAGS"

Usage:  .climateflags [add | remove] <flags>

A 'Map Spawns' global table may have climate flags set. If so, the global
table is only used if a tile has ALL of the flags set here. For example, you
might set a global table to only apply to 'temperate forest' climates.

These are the same set of flags from HELP SECTEDIT CLIMATE.

See also: OLC GLOBALS
#d
"GEDIT FLAGS"

Usage:  .flags [add | remove] <flags>

This set of flags applies to the global table itself.

Available flags:
 IN-DEVELOPMENT - Will not be used live.
 ADVENTURE-ONLY - This global table will only apply to the adventure it's in.
 CUMULATIVE-PRC - Percent check will be cumulative.
 CHOOSE-LAST - The first choose-last global that passes the percent check will
    be saved for later, and only used if no other global succeeds. This can
    be used to create 100% "choose if nothing else passes" final cases.
 RARE - Requires a special flag, e.g. Rare Metals for mine type.

See also: GEDIT PERCENT, OLC GLOBALS
#d
"GEDIT MAXLEVEL"

Usage:  .maxlevel <level>

This sets the upper limit of the level range for this global table.

For example, a 'Mob Interactions' global table will only be used if the mob
is scaled to this maxlevel or lower.

You can set the maximum to 0 for "no maximum".

See also: OLC GLOBALS
#d
"GEDIT MINLEVEL"

Usage:  .minlevel <level>

This sets the lower limit of the level range for this global table.

For example, a 'Mob Interactions' global table will only be used if the mob
is scaled to this minlevel or higher.

You can set the minimum to 0 for "no minimum".

See also: OLC GLOBALS
#d
"GEDIT MOBEXCLUDE"

Usage:  .mobexclude [add | remove] <flags>

A 'Mob Interactions' global table may have mob flags set to exclude. If so, the
global table is only used if a mob DOES NOT have all the flags in this set.
For example, you can use it to create a set that does not apply to HARD mobs.

These are the same set of flags from HELP MEDIT FLAGS.

See also: OLC GLOBALS
#d
"GEDIT MOBFLAGS"

Usage:  .mobflags [add | remove] <flags>

A 'Mob Interactions' global table may have mob flags set. If so, the global
table is only used if a mob has ALL of the flags set here. For example, you
might set a global table to only apply to HARD mobs.

These are the same set of flags from HELP MEDIT FLAGS.

See also: OLC GLOBALS
#d
"GEDIT NAME"

Usage:  .name <name>

This lets you set the 'name' property of a global table. Names are only shown
to the immortal staff, never to players. The name should indicate what this
table is for.

See also: OLC GLOBALS
#d
"GEDIT OBJEXCLUDE"

Usage:  .objexclude [add | remove] <flags>

A 'Obj Interactions' global table may have obj flags set to exclude. If so, the
global table is only used if a obj DOES NOT have all the flags in this set.
For example, you can use it to create a set that does not apply to LARGE objs.

These are the same set of flags from HELP OEDIT FLAGS.

See also: OLC GLOBALS
#d
"GEDIT OBJFLAGS"

Usage:  .objflags [add | remove] <flags>

A 'Obj Interactions' global table may have obj flags set. If so, the global
table is only used if a obj has ALL of the flags set here. For example, you
might set a global table to only apply to LARGE objs.

These are the same set of flags from HELP OEDIT FLAGS.

See also: OLC GLOBALS
#d
"GEDIT PERCENT" CUMULATIVE-PRC

Usage:  .percent <amount>

This allows you to add a chance of choosing this global, between 0.01 and
100 (default is 100). When a global would be selected, its percent is checked.

You can make the percent check cumulative, in order to link several different
globals together. If multiple globals have the CUMULATIVE-PRC flag, only one
of them will be chosen (if any), based on a cumulative percentage.

More than one global may be selected if the CUMULATIVE-PRC flag is not set.

See also: OLC GLOBALS
#d
"GEDIT REQUIRESABILITY" "GEDIT REQUIRES ABILITY"

Usage:  .requiresability <name | none>

This allows you to require the player to have a certain ability in order to
trigger this global (of any type). Setting it to 'none' removes this
requirement.

See also: OLC GLOBALS
#d
"GEDIT SECTOREXCLUDE"

Usage:  .sectorexclude [add | remove] <flags>

A 'Mine Data' global table may have sector flags set to exclude. If so, the
global table is only used if a tile DOES NOT have all the flags in this set.
For example, you can use it to create a set that does not apply to ROUGH sects.

These are the same set of flags from HELP SECTEDIT FLAGS.

See also: OLC GLOBALS
#d
"GEDIT SECTORFLAGS"

Usage:  .sectorflags [add | remove] <flags>

A 'Mine Data' global table may have sector flags set. If so, the global table
is only used if a tile has ALL of the flags set here. For example, you might
set a global table to only apply to ROUGH sectors.

These are the same set of flags from HELP SECTEDIT FLAGS.

See also: OLC GLOBALS
#d
"GEDIT SPAWNFLAGS"

Usage:  .spawnflags [add | remove] <flags>

A 'Map Spawns' global table may have spawn flags set. These apply to ALL spawns
in this global.

This lets you have a global that handles all the nocturnal creatures for a
terrain type, for example.

These are the same set of flags from HELP GEDIT SPAWNS.

See also: OLC GLOBALS
#d
"GEDIT TYPE"

Usage:  .type <type>

This is the type of global table. Different types are used for different
things. Each type may have its own properties.

Types:
 Mob Interactions - Used for global SHEAR, LOOT, and PICKPOCKET tables.
 Mine Data - Used for MINE interactions, see HELP MINE DATA GLOBAL.
 Newbie Gear - Given/equipped to all new players.
 Map Spawns - Global spawn lists for map tiles, based on climate.
 Obj Interactions - Used for global DISENCHANT when an item doesn't have its
   own disenchant results.

See also: OLC GLOBALS
#d
"GLOBAL MINE DATA" "MINE DATA GLOBAL"

The 'Mine Data' global type is used for determining what type of mine a given
mountain (or any sector) tile will have. The basic elements required are:

1. A sector with the CAN-MINE flag (e.g. #8 Mountain).
2. A building with the MINE flag which can be built upon that sector (like 
   #5107 Mine).
3. At least one global with the 'Mine Data' type, with matching sector flags
   for your sector (e.g. #199).

If there is more than one matching Mine Data global, the percentages on those
globals will be used. Only the first match will be selected, as each map tile
can only have 1 global vnum. Once the tile has been prospected or a mine has
been built upon it, "stat room" will show "mine global vnum:" under extra data,
indicating which global was chosen.

When a player or Workforce NPC mines on that tile, it will run the interactions
ONLY from that one chosen Mine Data global, not from other matching globals.
This means that once a mine is established, it stays the same type of mine.
However, if the interaction list in that global has more than one possible
result, any of those results might appear from any successful swing of the
pick.

Notes on Mine Data globals:
- You should name the global something like "iron mine", as it is used to build
  certain strings, such as "This appears to be an iron mine."
- The sector flags and excludes match the base map terrain the mine was built
  upon, not the Building sector type of the mine itself. Setting ROUGH on the
  global's sector flags will match the ROUGH mountain.
- The capacity is a maximum. Mines normally have between 50% and 100% of this
  maximum, at random. Deep mines have 75% to 150% of this range.
- The level requirements, if you set any, will apply to the total level of the
  player who is prospecting or who builds the mine.

See also: BUILDING GUIDE, OLC GLOBALS
#d
"GLOBAL NEWBIE GEAR" "NEWBIE GEAR GLOBAL"

The 'Newbie Gear' Global allows the same gear list options as Archetypes,
but this is given to all newbie characters.

Notes on Newbie Gear globals:
- Only the percent field (and cumulative flag) really affect this type of
  global. The other usual global controls like exclude flags and level
  restrictions don't apply.
- Gear from archetypes is given first, so players only receive gear from
  globals in equipment slots not already filled. (This doesn't apply to
  inventory.)

See also: GEDIT GEAR
#d
"GLOBAL MOB INTERACTIONS" "MOB INTERACTIONS GLOBAL" "MOB INTERACTION GLOBAL"

The 'Mob Interactions' Global allows SHEAR, LOOT, and PICKPOCKET globals to
be applied to all mobs in a matching range. This can be used for loot tables
that are adventure-wide, or truly global.

Notes on Mob Interactions globals:
- Only SHEAR, LOOT, and PICKPOCKET mob interactions are supported.
- The min/max levels, if any, apply to the mobs (not the player attacking the
  mob). If the mob normally has a range of 150-250, and is scaled to 175, it
  will not trigger a global loot interaction that requires 200-250. But the
  same mob scaled to 225 would.

See also: BUILDING GUIDE, OLC GLOBALS
#d
"GLOBAL OBJ INTERACTIONS" "OBJ INTERACTIONS GLOBAL" "OBJ INTERACTION GLOBAL"

The 'Obj Interactions' Global allows DISENCHANT globals to be applied to all
objects in a matching range. This can be used for disenchant tables that are
adventure-wide, or global.

Notes on Obj Interactions globals:
- Only DISENCHANT object interactions are supported.
- The min/max levels, if any, apply to the items (not the player disenchanting
  the obj).
- Global disenchant tables are only used if an item has no DISENCHANT results
  itself, either because it has none configured, or because the random roll
  didn't result in any from its own list.

See also: BUILDING GUIDE, OLC GLOBALS
#d
IN-DEVELOPMENT "IN DEVELOPMENT" IN-DEV

The IN-DEVELOPMENT flag prevents an augment, craft, global, or other type from
being available to players. Generally immortals can still use them (although
they won't appear in craft lists).

You can quickly remove the IN-DEV flag using the .removeindev command. The OLC
auditors will warn about items that still have IN-DEV flags.

See also: OLC AUDIT, REMOVEINDEV
#d
"ITEM SCALING" "OBJ SCALING" "OBJECT SCALING" SCALABLE "SCALABLE FLAG" "SCALING ITEM"

Items can be set to scale to different levels. You can set various traits on
the item, and their relative strengths, but the actual strength levels are set
by the game engine.

To make a scalable item, set:
 - the SCALABLE flag
 - the minlevel property (optional)
 - the maxlevel property (optional)
 - the SUPERIOR, ENCHANTED, or JUNK flags (optional, each changes the scaling)
 - values and applies (see below)

When you set applies, instead of setting the level you want them at, set a
number that indicates relative power. For example, if you want all applies to
be the same, set them all to 1. If you have three applies and want one to be
stronger than the other two, set them 2, 1, 1. The game engine will choose
the final numbers for these.

You can also set applies to be negative, to give a penalty to that trait and
get bonus points for the item's positive traits. Negatives should be set based
on how negative you want them to be, NOT relative to the positive applies. The
final number for these will still be chosen by the game engine. -1 is a small
penalty, -3 is a larger one.

Some item types have values that are also set by the game engine. For these,
you should assign a positive number that's relative to the numbers you set
for applies (see above). For example, setting a weapon's damage to 1 gives it
the same weight as an apply of 1. If your item ONLY has one property to set
(e.g. drink container, which has no applies), you should just set its value to
1 because the actual number doesn't matter, so long as it's greater than 0.

Scaling based on item types:
 weapon - the "damage" value
 drink container - the "capacity" value
 coins - the "coinamount" value
 missile weapons - the "damage" value
 ammo - the "damage" value
 pack - the "capacity" value

The following attributes never scale: greatness, age, crafting, blood-upkeep,
night-vision, nearby-range, where-range

Applies and item values of 0 are ignored and do not get any points assigned.

See also: OLC LEVELS
#d
"MAP OLC" "OLC MAP" "WORLD OLC" "MAP EDITOR" MAPEDIT

Usage:  .map <command>

The .olc map editor is a tool for modifying and customizing individual parts
of the map. Unlike the other editors, it doesn't use contextual menus. The
map editor commands make instant changes to the map where you're standing.

You can get help on any of the mapeditor commands with &yHELP MAPEDIT <COMMAND>&0.
The following commands are available:
 complete - Finishes the building you're standing in.
 convert2newbie - Converts an island's terrains to/from newbie terrains.
 decay - Performs 1 year of decay (building, trench, mine data) on the tile.
 decustomize - Removes custom icon, name, and description.
 deleteexit - Removes an exit (careful about cutting off building interiors).
 deleteroom - Deletes the room you're standing in (interior rooms only).
 description - Customize the description on an interior room.
 exit - Add a new exit between two interior rooms (similar to interlink).
 icon - Customize the map icon.
 maintain - Repairs and maintains a building.
 name - Customize the room title.
 naturalize - Returns this tile to its 'natural terrain'.
 passwalls - Able to move on the map unblocked by walls, interiors, etc.
 populate - Forces a building/room to populate an npc, if possible.
 remember - Stores the current terrain as the 'natural terrain'.
 roomtype - Change the type of an interior room.
 ruin - Turn a building to ruins.
 terrain - Change the tile you're standing on.
 unclaimable - Make a tile or square of tiles unclaimable (or not).

For notes on the mud's building rules, see HELP BUILDING GUIDE.

See also: OLC
#d
"MAPEDIT BUILD"

Usage:  .map build <building vnum> [direction]

This command creates a building instantly, without needing a craft recipe. It
can be built on virtually any map tile, so be careful when using this. Its main
purpose is to add special buildings to the map without needing a build recipe.

Example:
 > .map build 5118
 > .map build 5120 north

See also: MAP OLC
#d
"MAPEDIT COMPLETE"

Usage:  .map complete

This command finishes an unfinished building or room, if you're standing in
one. This is the easiest way for an immortal to build a building.

Example:
 > .map terrain plains
 > build largehouse north
 > .map complete

See also: MAP OLC
#d
"MAPEDIT CONVERT2NEWBIE" CONVERT2NEWBIE

Usage:  .map convert2newbie confirm
        .map convert2newbie undo

This command converts an island's terrains to or from newbie terrains (which
look the same but have lower move costs and other small changes. This applies
to the whole island you're on when you use it.

Note that this is separate from setting the NEWBIE flag on the island.

See also: MAP OLC, ISLAND COMMAND
#d
"MAPEDIT DECAY"

Usage:  .map decay

Performs 1 year of decay (building, trench, mine data) on the tile, as if the
new year had just rolled over.

See also: MAP OLC
#d
"MAPEDIT DECUSTOMIZE"

Usage:  .map decustomize

This command removes any custom name, icon, and description from a map tile
or room.

See also: MAP OLC
#d
"MAPEDIT DELETEEXIT" "MAPEDIT DELETE EXIT"

Usage:  .map deleteexit <direction>

This command removes an exit in one direction. It does not remove the other
side's corresponding exit back, and it does not delete the room that was
linked to that exit.

You should be careful not to leave orphaned rooms or areas that players cannot
get back out of.

See also: MAPEDIT DELETE ROOM, MAP OLC
#d
"MAPEDIT DELETEROOM" "MAPEDIT DELETE ROOM"

Usage:  .map deleteroom ok

This command deletes the room you are standing in. It only works on interior
(designated) rooms, and cannot be used out on the map. It will automatically
delete any exits that link to the room you're in.

Be careful about deleting rooms in the middle of buildings, as you may orphan
part of the building and make it unreachable.

See also: MAPEDIT DELETE EXIT, MAP OLC
#d
"MAPEDIT DESCRIPTION" "CUSTOM DESCRIPTION"

Usage:  .map description set
        .map description none

This command allows you to set or remove a custom description on the room you
are standing in. This generally only applies to interior (designated) rooms,
but it can also be used to create custom roadsigns on roads (which show their
custom description as a sign).

See also: MAP OLC, ROADSIGN
#d
"MAPEDIT EXIT"

Usage:  .map exit <direction> <vnum>
        .map exit <direction> <new>

This command allows you to add new exits or rooms to an existing map building.
Unlike designate, adding new rooms this way is not limited by the size of the
building.

See also: MAP OLC
#d
"MAPEDIT GROW"

Usage:  .map grow

Triggers immediate growth, similar to chant of nature.

See also: MAP OLC
#d
"MAPEDIT HEIGHT" HEIGHT "TERRAIN HEIGHT"

Usage:  .map height <value>

This command sets the 'height' of a map tile. You can see the current height
on 'stat room'. Height values are not shown to players, but they determine
things like whether or not a player can climb between two tiles without the
proper skill.

For mountains, height is positive and is the distance from flat land.

For rivers/lakes, height is negative and is the distance from the sea (more
negative means further from the sea). If a river or lake has no height
property, it probably isn't attached to the sea.

Sectors that cover or replace mountains, rivers, and lakes should have the
KEEPS-HEIGHT sector flag so they will keep their previous heights.

See also: STAT
#d
"MAPEDIT ICON"

Usage:  .map icon <icon>
        .map icon none

This command allows you to add or remove a custom icon for a map tile. Like
all icons, it must be 4 characters wide (not counting color codes). Custom
icons must always start with a color code (usually &&0).

Remember that the map may be rotated for some players (especially new or drunk
players), so using multiple icons to give the appearance of a larger structure
on the map may not look correctly for all players.

See also: MAP OLC
#d
"MAPEDIT NAME"

Usage:  .map name <name>
        .map name none

This command allows you to set or remove a custom room title on the map or in
designated rooms.

Important notes:
- Room titles are colored by the banner of the empire that owns them, so you
  should avoid color codes in them.
- Room titles are shown in some lists (e.g. the territory command), so they
  should usually be short.
- Custom room titles can help players distinguish between things like different
  starting locations, if you name them well.

See also: MAP OLC
#d
"MAPEDIT NATURALIZE"

Usage:  .map naturalize [island | world]

This command will restore the sector for the map tile you're in, the whole
island you're on, or the entire world. The tiles return to the state they
were in when the map was first generated.

When used on an island/world, claimed tiles are ignored. So are tiles that are
unclaimable or which have adventures.

You can change a tile/island's natural state with: .map remember [island]

See also: MAP OLC, MAPEDIT REMEMBER, NATURALIZE
#d
"MAPEDIT PASSWALLS"

Usage:  .map passwalls

This toggle allows an immortal to roam freely on the map without being blocked
by terrain or buildings. When passwalls is active, the immortal cannot enter
the interior (designated) rooms of a building; they will instead move to the
next map tile in the direction that they were walking.

See also: MAP OLC
#d
"MAPEDIT REMEMBER"

Usage:  .map remember [island]

This command will store the current sector of the map tile you're in (or the
entire island you're on) as the "natural" sector. This can be used to change
how a newbie island will be restored at the end of the year, for example.

Building and adventure tiles are ignored during this command.

The opposite command is .map naturalize, which restores a room/island/world
to its original state.

See also: MAP OLC, MAPEDIT NATURALIZE, NATURALIZE
#d
"MAPEDIT ROOMTYPE" "MAPEDIT ROOM TYPE"

Usage:  .map roomtype <name>

This command allows you to change the type of a designated interior room, to
any available room type. Rooms are created with the building editor, and any
building with the ROOM flag can be set this way.

See also: MAP OLC, OLC BUILDINGS
#d
"MAPEDIT RUINS"

Usage:  .map ruin [vehicle]

This command will reduce the map building you're in to ruins, or will do the
same to a vehicle you target.
#d
"MAPEDIT TERRAIN"

Usage:  .map terrain <type/vnum>

This command allows you to change the sector type (terrain) of a map tile.
It can be used to clear space for building an immortal's home, or to remove
a building on the map.

This command accepts sector names, crop names, or sector vnums.

Example:
 > .map terrain Tower of Souls

See also: MAP OLC, MAPEDIT UNCLAIMABLE
#d
"MAPEDIT UNCLAIMABLE"

Usage:  .map unclaimable [size]

This command allows you to toggle the unclaimable status of the map tile you
are in, or of a larger area around it. The whole area is toggled on if the
room you're standing in is toggled on, and vice versa.

By tradition, EmpireMUD sets the area around starting locations as unclaimable
so that nobody can build guard towers that threaten players on the start spot.

Example:
 > .map terrain Tower of Souls
 > .map unclaimable 3

See also: MAP OLC, MAPEDIT TERRAIN
#d
"MEDIT AFFECTS"

Usage:  .affects [add | remove] <flags>

This command adds, removes, or toggles a set of affect flags. These flags are
always active on the mob, as if a spell had been cast on them.

See also: AFFECT FLAGS, OLC MOBILES
#d
"MEDIT ALLEGIANCE" "SHOPEDIT ALLEGIANCE"

Usage:  .allegiance <none | vnum | name>

This sets a mob or shop to be a member of a faction.

For some factions, this will cause reputation gain if a player kills the mob.

The faction allegiance of a shop only matters for items that have a reputation
requirement to purchase.

See also: FACTION, OLC FACTIONS, SHOPEDIT ITEM, OLC MOBILES, OLC SHOPS
#d
"MEDIT ATTACK" "ATTACK TYPES"

Usage:  .attack <name | vnum>

This command sets the base attack type of the mobile. It will deal damage as
if it was using a weapon of that type.

Use ".attack list" or "vnum attack" to find available attack types.

Common attack vnums:
  Humans with no weapon: [15] hit, [11] kick, [13] vampire claws, [37] punch
  Sharp weapons: [1] slash, [2] slice, [3] jab, [4] stab
  Blunt weapons: [5] pound, [6] hammer, [7] whip
  Magic weapons: [16] fire, [20] frost, [21] shock, [22] light, [28] mana blast
  Staff weapons: [17] lightning staff, [18] burn staff, [19] agony staff
  Ranged weapons: [29] bow, [30] crossbow, [31] pistol, [32] musket,
     [34] sling, [25] spear-thrower
  Tool types: [2] slice, [8] pick, [12] fire/torch
  Animal attacks: [9] bite, [10] claw, [11] kick, [23] sting, [24] swipe,
     [25] tail swipe, [26] peck, [27] gore, [33] fire breath, [36] animal whip

See also: OLC MOBILES
#d
"MEDIT CUSTOM"

Usage:  .custom add <type> <message>
        .custom change <number> <type | message> <value>
        .custom move <number> <up | down>
        .custom remove <number | all>
        .custom sort

You can set custom messages on mobs, which are shown at different times
depending upon the type of message.

Some messages may use the tokens $n/$e/$s/$m for name/he/his/him for the mob.

If you set more than one message of the same type, one will be chosen at
random each time.

Message types:
 &cecho&0 - The message is shown to the room periodically (may use $ tokens).
 &cecho-day&0 - Like echo, but only during the day.
 &cecho-night&0 - Only during the night.
 &csay&0 - The message is said aloud by the mob periodically.
 &csay-day&0 - Like say, but only during the day.
 &csay-night&0 - Only during the night.
 &clong-desc&0 - Variable long descriptions (prevents normal long desc showing)
 &cscript1&0 - &cscript5&0 - Can be referenced in scripts as
   %mob.custom(script1)%, %mob.custom(script1,0)%, etc.
 &cscavenge-corpse&0 - Shown when a SCAVENGER mob eats a corpse ($p is the corpse).

Note: The 'echo' and 'say' types share the same random interval, and the mob
will only do one or the other each time.

See also: OLC MOBILES, DOLLAR SIGN CODES
#d
"MEDIT FLAGS"

Usage:  .flags <type>

This command toggles mob flags. These flags affect the default behavior. Note
that you cannot remove flag #4 ISNPC -- this indicates the mob is an NPC.

Never set a flag marked with an * (asterisk).

Available mob flags:
 &cBRING-A-FRIEND&0 - Assists any non-charmed mob in combat. Without this, mobs
   will still assist other mobs in their same follow-chain if no players are
   in the chain and if neither are charmed.
 &cSENTINEL&0 - Stays in one room and never wanders.
 &cAGGR&0 - Aggressive; will attack players.
 &cISNPC&0 - Is an NPC (this is always set).
 &cMOUNTABLE&0 - Can be ridden by players.
 &cMILKABLE&0 - Can be milked in a stable.
 &cSCAVENGER&0 - Eats corpses off the ground (not larger than the mob).
 &cNO-CORPSE&0 - Leaves no corpse when it dies (loot falls on the ground).
 &cTIED&0 - Tied to a hitching post; will not wander unless untied; does not despawn.
 &cANIMAL&0 - Counts as an animal for herding, tying, etc.
 &cMOUNTAIN-WALK&0 - Can cross mountain tiles.
 &cAQUATIC&0 - Can cross water tiles, but won't move on land. (see WATERWALK)
 &c*PLURAL&0 - Uses the pronouns 'their', 'they', and 'them' in act messages.
 &cNO-ATTACK&0 - Mob can be in combat, but will not hit
 &cSPAWNED&0 - De-spawns after 5 minutes if no players are nearby.
 &cCHAMPION&0 - Will rescue its leader in combat.
 &cEMPIRE&0 - Will not be saved through reboots.
 &c*PICKPOCKETED&0 - Has already been pickpocketed; cannot be pickpocketed again.
 &cCITYGUARD&0 - Will assist allies from the same empire. This will only work if it is spawned by the empire system.
 &cPURSUE&0 - Will pursue players who flee in combat.
 &cHUMAN&0 - Counts as a human for various commands.
 &cVAMPIRE&0 - Counts as a vampire for various commands.
 &cCASTER&0 - Has a mana pool; counts as a caster.
 &cTANK&0 - Has a larger health pool and better tank attributes.
 &cDPS&0 - Deals more damage and has better combat attributes.
 &cHARD&0 - More difficult than other mobs of the same level.
 &cGROUP&0 - Much more difficult, requires a group.
 &c*EXTRACTED&0 - Do not set.
 &c!LOOT&0 - Will not drop any loot.
 &c!TELEPORT&0 - Cannot teleport to this mob.
 &c!EXP&0 - Players get no experience from using abilities against this mob.
 &c!RESCALE&0 - Mob will not rescale after its initial scaling, e.g. if you set
    specific attributes on it after it loaded. Note that it will still scale
    the first time, so ensure that it is scaled before changing attributes.
 &cSILENT&0 - Mob will not display custom strings while this flag is on.
 &cCOINS&0 - Mob will drop coins on death/pickpocket.
 &cNO-COMMAND&0 - Cannot be commanded/ordered.
 &cNO-UNCONSCIOUS&0 - Cannot be knocked unconscious (from toggle autokill).
 &cIMPORTANT&0 - won't be hit by an immortal "purge" with no args; can be used by scripts

See also: OLC MOBILES
#d
"MEDIT FULLSEARCH"

Usage:  .m fullsearch -<field> <argument> <...>

This command allows you to search for mobs matching certain criteria. You can
specify multiple fields if you want. Any arguments that don't start with a
dash (-) are matched to the mob's keywords and text fields.

Fields:
  &c-affects&0 - see HELP AFFECT FLAGS
  &c-attack&0 - see HELP MEDIT ATTACK
  &c-custom&0 - has a specific type, see HELP MEDIT CUSTOM
  &c-faction&0 - is a member of a specific faction
  &c-flagged&0, &cunflagged&0 - see HELP MEDIT FLAGS
  &c-interaction&0 - has a specific type, see HELP MEDIT INTERACTION
  &c-level&0 - matches anything where this level is within the range
     (note: will not account for mobs whose levels are inherited from
      adventures, see ADVEDIT CASCADE for help)
  &c-movetype&0 - see HELP MEDIT MOVETYPE
  &c-nameset&0 - see HELP MEDIT NAMESET
  &c-sex&0 - male, female, neutral
  &c-size&0 - see HELP MOB SIZE
  &c-attack&0 - see HELP MEDIT ATTACK
  &c-vmin&0, &c-vmax&0 - VNUM range limits

Examples:
 > .m fullsearch -sex male -attack slash
 > .m fullsearch -flagged SENTINEL -flagged PURSUE
 > .m fullsearch -level 100 guard -vmin 10000 -vmax 10099

To search other fields, you can generally use the normal "search" option for
other OLC types. For example, to find all mobs with the "Dismissable"
trigger, use ".t search 9901".
#d
INTERACTION "MEDIT INTERACTION" "ABILEDIT INTERACTION" "BEDIT INTERACTION" "OEDIT INTERACTION" "REDIT INTERACTION" "SECTEDIT INTERACTION" "CROPEDIT INTERACTION" "GEDIT INTERACTION" "VEDIT INTERACTION" INTERACTIONS INTERACT

Usage:  .interaction add <type> <quantity> <vnum> <percent> [exclusion code | restrictions]
        .interaction change <number> <field> <value>
        .interaction copy <from type> <from vnum>
        .interaction remove <number | all>
        .interaction move <number> <up | down>

This command adds or removes an interaction. These are objects or mobs that are
generated by certain commands. Some are only used on mobs, while others are
only used on rooms. You can copy interactions from other mobs, buildings,
rooms, sectors, crops, and vehicles -- this may save you time if many are the
same.

Mob interaction types:
 &cBUTCHER&0 - Items received when the Butcher ability is used.
 &cSKIN&0 - Items received via the skin command.
 &cSHEAR&0 - Items received when the shear command is used in a stable.
 &cBARDE&0 - Mob loaded when the Barde ability is used in a stable.
 &cLOOT&0 - Items dropped into the corpse when the mob is killed.
 &cPICKPOCKET&0 - Items gained from the pickpocket skill.
 &cTAME&0 - Becomes another mob when it is 'tamed'.
 
Object interaction types:
 &cLIGHT&0 - Item something is converted into when lit on fire.
 &cCOMBINE**&0 - Combine multiple copies of an obj into another obj (quantity is the
    number required, rather than number you get).
 &cSEPARATE**&0 - Split this item into multiple other items.
 ** Both COMBINE and SEPARATE should be set exclusive, as they will extract
    the original item.
 &cSCRAPE&0 - Items you get when scraping this item (tree -> log).
 &cSAW&0 - Items you get when sawing this item (tree -> lumber).
 &cTAN&0 - Items you get when tanning this item (skin -> leather).
 &cCHIP&0 - What you get for chipping at the item.
 &cSEED&0 - Gives an item when seeded.
 &cDECAYS-TO&0 - Becomes a different object when its timer expires (e.g. ashes).
 &cCONSUMES-TO&0 - Becomes a different object when eaten/used up (e.g. a jar).
 &cIDENTIFIES-TO&0 - Becomds a different object when identified (e.g. a rock).
 &cDISENCHANT&0 - Items received when disenchanting (also a global type).

Room/vehicle interaction types:
 &cDIG&0 - Items received when using the dig action.
 &cFORAGE&0 - Items received when using the Forage ability. Note that if the player
   gets nothing from a sector's forage list, they may also receive a forage
   item from any wild crop that grows in the area.
 &cPICK&0 * - Items found when picking.
 &cHARVEST&0 - Items received when harvesting a crop.
 &cGATHER&0 - Items received from the gather action.
 &cENCOUNTER&0 - Hostile mob loaded when a random encounter triggers.
 &cCHOP&0 - Things that can be found when chopping here.
 &cFISH&0 - Things that can be found by fishing here.
 &cPAN&0 - Things that can be found by panning here.
 &cQUARRY&0 * - Things you can find by quarrying here.
 &cRUINS-TO-BLD&0 - What type of ruins building appears here when it's ruined.
   Only works on buildings, not vehicles. Quantity is ignored. Use #n in the
   room title to indicate the name of the lost building.
 &cRUINS-TO-VEH&0 - What type of ruins vehicle appears here when it's ruined.
   May use #n in the keywords and short/long desc to indicate the name of the
   building/vehicle that was ruined. Quantity is ignored.
 &cPRODUCTION&0 * - Workforce will produce it (on a building or vehicle only).
   Production is 1 at a time; quantity is used as the depletion limit.
 &cSKILLED-LABOR&0 * - Workforce will produce it with Skilled Labor (bld/veh only).
   Production is 1 at a time; quantity is used as the depletion limit.

Ability interaction types:
 &cLIQUID-CONJURE&0 - See ABILEDIT CONJURE LIQUID
 &cOBJECT-CONJURE&0 - See ABILEDIT CONJURE OBJECT
 &cVEHICLE-CONJURE&0 - See ABILEDIT CONJURE VEHICLE

* Room interactions marked with an asterisk are 'one-at-a-time' interactions,
  where the 'quantity' field is used as the maximum depletion, and players (or
  workforce) receive 1 item at a time rather than the full quantity at once.

The percent may be anywhere from 0.01 to 100.00 and if the quantity is greater
than 1, the percent is only checked once for the entire quantity. If you want
each copy of an item to have its own percent roll, list them separately as
quantity 1.

The exclusion code (optional) may be any letter, which changes how random
interactions are chosen. All items with the same exclusion code have a cumu-
lative roll (meaning if the percents add up to 100, one of them is guaranteed)
but only one item from the same exclusion set will ever pass. The rest will
fail. If you don't set an exclusion code, the interaction is not exclusive and
always gets its own percent roll.

You can use '.interact move' to rearrange entries. Interactions are always
processed from top to bottom.

Optional interaction restrictions:
 &c-ability <vnum/"name">&0 - Player must have this ability.
 &c-boss&0 - Mob must have HARD+GROUP flags; obj must have HARD- and GROUP-DROP.
 &c-hard&0 - Mob must have only HARD flag, or object must have only HARD-DROP.
 &c-group&0 - Mob must have only GROUP flag, or object must have only GROUP-DROP.
 &c-normal&0 - Mob/obj must have no HARD or GROUP flag.
 &c-ptech <name>&0 - Player must have this player-tech.
 &c-tech <name>&0 - Empire must have this tech.
 &c-depletion <type>&0 - Uses this type of depletion (see OLC DEPLETION).

Examples:
> .interaction add FORAGE 1 12345 100 x -ability "Find Herbs"

Example of a rare result from barding (order matters here):
 1. BARDE: 1x an epic warhorse .50% (e)
 2. BARDE: 1x a warhorse 100% (e)

Example of possible multiple results from shear:
 1. SHEAR: 1x some wool 100.00%
 2. SHEAR: 1x some wool 50.00%
 3. SHEAR: 1x some wool 5.00%

See also: OLC BUILDINGS, OLC CROPS, OLC MOBILES, OLC SECTORS, OLC VEHICLES,
  PRODUCTION INTERACTION, OLC WORKFORCE, OLC DEPLETIONS
#d
"MEDIT KEYWORDS"

Usage:  .keywords <keywords>

This command updates the keywords on a mob. The keywords are a list of single
words that can be used to target the mob. It should include any words from the
mob's short or long description that identify the mob.

Usually the most significant keyword should be first.

Example:
 name: a fiery dragon
 long description: A huge red dragon is flying overhead!
 keywords: dragon fiery huge red

See also: MEDIT SHORTDESCRIPTION, MEDIT LONGDESCRIPTION
#d
"MEDIT LANGUAGE" "MOB LANGUAGE"

Usage:  .language <vnum | name | default>

This changes which language a mob will use for any say/shout actions it takes.
Mobs can also use the #language tag at the start of any say/shout (unless they
were ordered/commanded by a player).

Mobs without this property will use the global default, set with the
'default_language_vnum' mob config.

See also: OLC MOBILES, SAY, SPEAK, MEDIT CUSTOM, CONFIG
#d
"MEDIT MAXLEVEL" "MEDIT MAX LEVEL"

Usage:  .maxlevel <level>

This command determines the maximum level a mobile will scale to. Players are
rated from level 1 to 100 based on their skills, plus a number based on their
gear. If you're unsure how to scale the mob, check the levels on some players.

If you set the maxlevel to 0, there will be no maximum and the mob can scale
to any level over the minimum.

See also: MEDIT MINLEVEL, OLC MOBILES
#d
"MEDIT MINLEVEL" "MEDIT MIN LEVEL"

Usage:  .minlevel <level>

This command determines the minimum level a mobile will scale to. Players are
rated from level 1 to 100 based on their skills, plus a number based on their
gear. If you're unsure how to scale the mob, check the levels on some players.

If you set the minlevel to 0, there will be no lower limit and mobs can scale
to any level under the maximum.

See also: MEDIT MAXLEVEL, OLC MOBILES
#d
"MEDIT MOVETYPE" "MEDIT MOVE TYPE"

Usage:  .movetype <type>

The move type determines what message is sent when the mob moves. Sometimes
other types are substituted, for example a flying mob always says "flies" even
if its move type is different.

See also: OLC MOBILES
#d
"MEDIT NAMESET" "MEDIT NAME SET"

Usage:  .nameset <set>

Name sets are used for mobs that have #n in their strings. This feature allows
a mob to appear to be unique by giving each copy of the mob a random name from
the set. The various name sets contain different themed names.

See also: OLC MOBILES, #n
#d
"MEDIT LONGDESCRIPTION" "MEDIT LONG DESCRIPTION"

Usage:  .longdescription <string>

The long description is the text you see when the mobile is in the room. Its
name should appear somewhere near the beginning, and the rest should be a
complete sentence indicating that the mobile is present.

Examples:
There is a cow munching on some grass.
A fiery dragon circles overhead.
You're standing at the foot of a huge giant!

See also: OLC MOBILES
#d
"MEDIT LOOKDESCRIPTION" "MEDIT LOOK DESCRIPTION"

Usage:  .lookdescription

The look description is shown when a player looks at the mob. This can be short
or long, but you should avoid passing 3 lines of text, after the /fi formatter.
You can also use the /f formatter if it's shorter than 80 characters.

See also: OLC MOBILES, STRING EDITOR
#d
"ADVEDIT SCRIPTS" "BEDIT SCRIPTS" "MEDIT SCRIPTS" "OEDIT SCRIPTS" "QEDIT SCRIPTS" "REDIT SCRIPTS" "VEDIT SCRIPTS"

Usage:  .script add [position] <trigger vnum>
        .script copy <from type> <from vnum>
        .script remove <number | all>

You can attach triggers to mob, objects, and room templates using this option.
Triggers run in the order they appear in the OLC list, so you can optionally
choose which position to insert them at, if there are multiple scripts. If you
don't give a position, it will put it at the end.

When you save your olc editor, all live copies of the thing you were editing
should get the updated script list right away.

Note: Adventure scripts will only work if they are the Adventure Cleanup type.
Note: Only room triggers can be added to quests.
Note: Neither quest nor adventure scripts can use 'wait' statements.

See also: OLC BUILDINGS, OLC MOBILES, OLC OBJECTS, OLC QUESTS, OLC TRIGGERS,
   OLC VEHICLES, VNUM, WAIT
#d
"MEDIT SEX"

Usage:  .medit sex <male | female | neutral>

This command sets the sex of the NPC. This matters mostly in action messages,
where it determines the pronouns. Animals are almost always set to neutral,
while humans should always be set to male or female. Use your best judgment.

See also: OLC MOBILES
#d
"MEDIT SHORTDESCRIPTION" "MEDIT SHORT DESCRIPTION"

Usage:  .shortdescription <string>

The 'short description' is the trait that's shown in lists, in action messages,
and almost everywhere else except when a player types 'look' in the room (where
the long description is shown instead). This should be short, should generally
begin with a/an/the unless it's a proper noun, and should not be capitalized
(again unless it's a proper noun).

Examples:
 the dragon
 a mongoose
 Charles the Great

See also: MEDIT LONG DESCRIPTION
#d
"MEDIT SIZE" "MORPHEDIT SIZE" "MOB SIZE" "OEDIT SIZE"

Usage:  .size [size]

A mob's size determines several of its attributes:
- corpse size (large/normal) and whether or not players can take the corpse
- total amount of blood the mob has (also modified by animal/vampire flags)
- whether or not you can see the mob on the world map
- SCAVENGER mobs will not eat corpses larger than themselves

Available sizes are:
 &cnegligible&0 - no size / immaterial
 &ctiny&0 - mouse, insect; low blood
 &csmall&0 - dog, goblin
 &cnormal&0 - human; large corpse
 &clarge&0 - horse; large corpse
 &chuge&0 - elephant; cannot take corpse
 &cenormous&0 - dragon; can be seen on the map

Morphs also have a 'size' trait with the same meaning. However, morph size will
not affect the blood pool of the morphed person/mob at all.

Corpse objects also have a 'size' trait, based on the animal that died.
#d
MORPHEDIT "OLC MORPHS" "MORPH EDITOR"

Usage:  .morph <command>
        .command

The .olc morph editor allows you to configure the data for morphs, which are
used by players (and NPCs) to change shape.

All commands in the editor are highlighted in yellow/green and placed inside
<angle braces>. You can get help on these commands by typing:
  &yHELP MORPHEDIT <COMMAND>&0

You can close an open editor with .abort or .save.

Example:
> .morph edit 123
> .shortdesc a shapeshifting demon
> .save

For notes on the mud's building rules, see HELP BUILDING GUIDE.

See also: OLC, OLC ABORT, OLC EDIT, OLC EDITOR, OLC SAVE
#d
"MORPHEDIT AFFECTS"

Usage:  .affects [add | remove] <flags>

This command adds, removes, or toggles a set of affect flags. These flags are
given to players while they are in this form.

See also: AFFECT FLAGS, OLC MORPHS
#d
"MORPHEDIT APPLY" "MORPHEDIT APPLIES"

Usage:  .apply add <value> <apply>
        .apply change <number> <value | apply> <new value>
        .apply remove <number | all>

Applies are bonuses (or penalties) that a morph grants to the player who is
using it.

See also: APPLIES, OLC MORPHS
#d
"MORPHEDIT ATTACK"

Usage:  .attack <name | vnum>

This command sets the base attack type of the morph, when unarmed. See
ATTACK TYPES for a list.

See also: ATTACK TYPES, OLC MORPHS
#d
"MORPHEDIT COST" "MORPHEDIT COSTTYPE" "MORPHEDIT COST TYPE"

Usage:  .cost <amount>
        .costtype <health | move | mana | blood>

This allows you to set the cost to use a morph. If a cost is set, the player
must spend that much of the given type in order to start morphing.

If the cost is 0, the cost type doesn't matter. Players can't go below 1 health
or blood, so they must have cost+1 in order to morph. If the cost type is
blood, Heartstop can prevent the player from morphing.

See also: OLC MORPHS
#d
"MORPHEDIT FLAGS" "MORPH FLAGS"

Usage:  .flags [add | remove] <flags>

The following morph flags are available:
 IN-DEVELOPMENT - Not live yet (can't be used by players).
 SCRIPT-ONLY - Players can't choose this morph, but scripts can.
 ANIMAL - Morph counts as an animal and is disguised from other players.
 VAMPIRE-ONLY - This is a vampire morph and will check sunlight.
 TEMPERATE-AFFINITY - Can only be used on temperate terrain.
 ARID-AFFINITY - Can only be used on arid terrain (desert).
 TROPICAL-AFFINITY - Can only be used on tropical terrain (jungle).
 CHECK-SOLO - Can't be used if in the Solo role and not solo.
 !SLEEP - Cannot sleep in this form.
 GENDER-NEUTRAL - Shows as "it" instead of he/she/him/her.
 CONSUME-OBJ - Will use up the requiresobj to morph.
 !FASTMORPH - This morph won't work with 'fastmorph'.
 !MORPH-MESSAGE - Shows no message to the room when forced to un-morph.
 HIDE-REAL-NAME - Never shows real name on 'look'.

See also: OLC MORPHS
#d
"MORPHEDIT KEYWORDS"

Usage:  .keywords <keywords>

This command updates the keywords on a morph. The keywords are a list of single
words that can be used to target a person in this morph. It should include any
words from the morph's short or long description that identify the person.

Usually the most significant keyword should be first.

Example:
 name: a fiery dragon
 long description: A huge red dragon is flying overhead!
 keywords: dragon fiery huge red

See also: MORPHEDIT SHORTDESCRIPTION, MORPHEDIT LONGDESCRIPTION, OLC MORPHS
#d
"MORPHEDIT LONGDESCRIPTION" "MORPHEDIT LONG DESCRIPTION"

Usage:  .longdescription <string>

The long description is the text you see when the morphed character is in the
room. Its name should appear somewhere near the beginning, and the rest should
be a complete sentence indicating that the person is present.

You can use #n to indicate the morphed person's real name (e.g. Galstaf, Joe
Jones, a painted horse). If you do this, be sure not to set the ANIMAL flag on
the morph (if they can tell the real name, it shouldn't have the disguise
effects of that flag).

Examples:
There is a cow munching on some grass.
A fiery dragon circles overhead.
You're standing at the foot of a huge giant!

See also: OLC MORPHS
#d
"MORPHEDIT LOOKDESCRIPTION" "MORPHEDIT LOOK DESCRIPTION"

Usage:  .lookdescription

The look description is shown when a player looks at the morphed person. This
can be short or long, but you should avoid passing 3 lines of text, after the
/fi formatter. You can also use the /f formatter if it's shorter than 80
characters.

A morph's look description will override the regular one on a player or mob.

See also: OLC MORPHS, STRING EDITOR
#d
"MORPHEDIT MAXLEVEL" "MORPHEDIT MAX LEVEL"

Usage:  .maxlevel <level>

This command determines the maximum level a morph will scale to. Morphs scale
in power to the level of the player/npc who is morphing, up to this maximum.

If you set the maxlevel to 0, there will be no maximum and the morph can scale
to any level.

See also: OLC MORPHS
#d
"MORPHEDIT MOVETYPE" "MORPHEDIT MOVE TYPE"

Usage:  .movetype <type>

The move type determines what message is sent when the morphed person moves.
Sometimes other types are substituted, for example a flying person always says
"flies" even if its move type is different.

See also: OLC MORPHS
#d
"MORPHEDIT REQUIRESABILITY" "MORPHEDIT REQUIRES ABILITY"

Usage:  .requiresability <name | none>

This allows you to require the player to have a certain ability in order to
use this morph. Setting it to 'none' removes this requirement.

See also: OLC MORPHS
#d
"MORPHEDIT REQUIRESOBJECT" "MORPHEDIT REQUIRES OBJECT"

Usage:  .requiresobject <vnum>

Some morphs may require a specific object. If the user doesn't have the object,
the morph won't show up in the list at all. This essentially associates the
morph to the object.

The required object isn't consumed when the person morphs, unless the CONSUME-
OBJ flag is set. You should never use a scalable item if it will be consumed.

See also: OLC MORPHS
#d
"MORPHEDIT SHORTDESCRIPTION" "MORPHEDIT SHORT DESCRIPTION"

Usage:  .shortdescription <string>

The 'short description' is the trait that's shown in lists, in action messages,
and almost everywhere else except when a player types 'look' in the room (where
the long description is shown instead). This should be short, should generally
begin with a/an/the unless it's a proper noun, and should not be capitalized
(again unless it's a proper noun).

You can use #n to indicate the morphed person's real name (e.g. Galstaf, Joe
Jones, a painted horse). If you do this, be sure not to set the ANIMAL flag on
the morph (if they can tell the real name, it shouldn't have the disguise
effects of that flag).

The short description is also shown in the available morphs list (with any
leading a/an/the removed).

Examples:
 the dragon
 a mongoose

See also: MORPHEDIT LONG DESCRIPTION, OLC MORPHS
#d
"MOUNT WHISTLE" WHISTLE "MOUNT REWARD" "BUILDING MOUNTS" "MOUNTS"

Mount whistles (or other similar items) are used to reward players with mounts
using the loot drop table of an NPC. Players seem to prefer receiving their
new mount as an item, because it's easier to get it out of the adventure if
they can't mount it right away.

If you load a mount directly into the room in an adventure, players will often
kill it without realizing what it is. Another problem is that if the player
leads a mount out of the adventure, the mount may despawn when the adventure
despawns.

To create a mount whistle, attach script 9910 (Summon mob / Mount whistle) to
an object, and set the object's <value0> field to the vnum of the mount. This
is a 'use' command trigger that summons the mob.

Types of mounts:
  FLY affect: Flying mount; requires the Riding-Flying ptech.
  WATERWALK affect: Can ride on water just like land; requires Riding-Upgrade.
  AQUATIC mob flag: Aquatic mount; can only ride on water tiles.

See also: PTECH
#d
NOBITS "NO BITS"

When you see "NOBITS", this indicates no bits are set on a set of flags (called
a bitvector because of how the data is stored).
#d
"OBJECT VALUES" "OBJ VALUES" "OBJECT VALS" "OBJ VALS" OBJVALS "ITEM VALUES"

The 'object values' are 3 multi-purpose numbers attached to each object. These
values have a different meaning depending on the type of the object. Each of
these values can be changed by scripts and by normal use (like poison charges
going down). Not all item types use the values at all. Here are ones that do:

Ammo:
 0 - remaining number of shots
 1 - damage bonus (scalable)
 2 - ammo type (must match type on the missile weapon)

Armor:
 0 - armor type (0 mage, 1 light, 2 medium, 3 heavy)

Book:
 0 - vnum for the book text (from the book editor)

Coins:
 0 - amount (scalable)
 1 - empire vnum (or -1 for misc coins)

Container:
 0 - max contents
 1 - container flags (1 = closable, 2 = closed, 3 = both)

Corpse:
 0 - idnum/vnum of the corpse (players are negative; npc vnums are positive)
 1 - size
 2 - corpse flags (1 = eaten, 2 = skinned, 4 = human)

Currency:
 0 - amount
 1 - generic currency vnum

Drink Container:
 0 - max capacity (scalable)
 1 - current amount
 2 - generic liquid vnum

Food:
 0 - hours of fullness
 1 - crop vnum (if plantable)

Light:
 0 - hours remaining (-1 is unlimited)
 1 - is lit (1) or not (0)
 2 - flags (light-fire, can-douse, junk-when-expire, cooking-fire,
     destroy-when-doused)

Lighter:
 0 - number of uses (-1 is unlimited)

Minipet:
 0 - vnum of mob to teach

Missile Weapon:
 0 - attack type (see WEAPON TYPES)
 1 - bonus damage (if scalable, this is the weight to scale the damage)
 2 - ammo type (must match type on the ammo object)

Other:
 - does not use the values, but allows them to be used for scripting
 - if the item is PLANTABLE, value 1 is the crop vnum

Pack:
 0 - inventory bonus (scalable)

Paint:
 0 - paint color (see PAINT ITEM)

Poison:
 1 - poison charges remaining
 2 - generic affect vnum (optional, defaults to 3004 poisoned)

Portal:
 0 - target room vnum (real vnum, not template)
     Note: for adventure portals, this is the room template vnum instead UNTIL
     the portal has been loaded into the world, when it becomes the real vnum

Potions:
 0 - generic cooldown vnum (optional)
 1 - cooldown time in seconds (optional)
 2 - generic affect vnum (optional, defaults to 3102 potion)

Recipe:
 0 - craft vnum to learn from this recipe

Wealth:
 0 - treasure value
 1 - flags (automint, no-mint)

Weapon:
 1 - bonus damage (if scalable, this is the weight to scale the damage)
 2 - attack type (see WEAPON TYPES)
#d
"OEDIT AFFECTS"

Usage:  .affects [add | remove] <flags>

This command adds, removes, or toggles a set of affect flags. These flags
are set on the character who equips this object, as if they had a spell cast
on them.

See also: AFFECT FLAGS, OLC OBJECTS
#d
"OEDIT AFFECTTYPE" "OEDIT AFFECT TYPE"

Usage:  .affecttype <vnum>

This lets you set a generic affect that will be used for the item's benefits.
This is how you set a custom name to appear on a player's 'affects' list.

Potions: If two potions have the same affect vnum (including -1/none), one
potion will overwrite the other's effects when quaffed.

Poisons: If two poisons have the same affect type AND came from the same
poisoner, a new affect will overwrite an older one.

NOTE: This affecttype only applies if the poison/potion has applies or aff
flags. Any affects applied by a script will not inherit this type.

See also: GENERIC AFFECT, OLC OBJECTS
#d
"OEDIT APPLY" "OEDIT APPLIES" APPLIES

Usage:  .apply add <value> <apply> [type]
        .apply change <number> <value | apply | type> <new value>
        .apply remove <number | all>

Applies are bonuses (or penalties) that an item gives to the player who is
using it. The following applies are available.

Apply types (optional) let you specify which applies come from enchantments or
other sources (the default is "natural"). The superior and *-drop apply types
will only appear on the item if it has matching flags.

Most applies are self-explanatory:
 &cSTRENGTH&0 - characters can't use an item that would reduce them below 1
 &cDEXTERITY&0 - chance to hit/dodge
 &cHEALTH-REGEN&0 - rate of health regen (per 5 second tick)
 &cCHARISMA&0 - characters can't use an item that would reduce them below 1
 &cGREATNESS&0 - empire meta-trait (unscaled)
 &cMOVE-REGEN&0 - rate of move regen (per 5 second tick)
 &cMANA-REGEN&0 - rate of mana regen (per 5 second tick)
 &cINTELLIGENCE&0 - characters can't use an item that would reduce them below 1
 &cWITS&0 - combat speed and damage
 &cAGE&0 - this actually raises/lowers the player's age, which has no effect
 &cMAX-MOVE&0 - move pool
 &cRESIST-PHYSICAL&0 - physical damage reduction
 &cBLOCK&0 - block only matters if the player has a shield
 &cHEAL-OVER-TIME&0 - healing even during battle
 &cMAX-HEALTH&0 - health pool
 &cMAX-MANA&0 - mana pool
 &cTO-HIT&0 - chance to hit (%)
 &cDODGE&0 - chance to dodge (%)
 &cINVENTORY&0 - this adds to inventory capacity
 &cMAX-BLOOD&0 - blood pool size
 &cBONUS-PHYSICAL&0 - added to strength-based damage and weapon dps
 &cBONUS-MAGICAL&0 - added to magical damage and weapon dps
 &cBONUS-HEALING&0 - added to damage healed (by abilities this player uses)
 &cRESIST-MAGICAL&0 - magical damage reduction
 &cCRAFTING&0 - bonus to craft level (unscaled)
 &cBLOOD-UPKEEP&0 - adds to how much blood vampires must spend per hour (unscaled)
 &cNIGHT-VISION&0 - adds to light radius at night (unscaled)
 &cNEARBY-RANGE&0 - increases the range of the player's nearby command
 &cWHERE-RANGE&0 - increases the range of the player's where command

See also: OLC OBJECTS
#d
"OEDIT ARMORTYPE" "OEDIT ARMOR TYPE"

Usage:  .armortype <type>

Armor items may have several different types set. This determines which ability
is required to wear the item. If an item does not need to be skill-restricted,
use the WORN item type instead of ARMOR.

mage - Should provide caster or healer traits and no real protection.
light - Should provide melee DPS traits.
medium - Should provide both DPS and tank traits, such as to-hit and dodge.
heavy - Should include a -WITS or -STRENGTH penalty, and should include only
   tank traits.

See also: OLC OBJECTS, APPLIES
#d
"OEDIT AMMOTYPE" "OEDIT AMMO TYPE"

Usage:  .ammotype <letter>

Ammo type is a property you set on missile weapons (e.g. bows) and ammo
objects, to match the two up together. An ammo object any kind (whether it's
actually an arrow, or a bolt, or whatever) can only be used on a bow with the
same ammo type.

Ammo types are single letters, like 'A', 'B', and so on. You can find a list
of existing items and their ammotypes by typing "show ammotypes".

Common ammo types:
 A - arrows

See also: OLC OBJECTS, OEDIT TYPE, SHOW
#d
"OEDIT TEXT" "OEDIT BOOK"

Usage:  .text <book vnum>

You can create book objects to place in your adventure zones. Like ordinary
books, their name will be overridden by the name set in the book editor. You
can see the book id of any book you've written by typing "bookedit list" (it's
the number in the [brackets]), or via "vnum book".

See also: BOOKEDIT, OLC OBJECTS
#d
"OEDIT CAPACITY"

Usage:  .capacity <number>

Some items have a capacity trait, which determines how many items (or drinks)
they can hold. In the case of drink containers, the capacity is measured in
hours of thirst-quenching. In all other cases, this capacity is number of
items (LARGE items count double).

For SCALABLE objects, thus number is a scalable value if it is set to a number
other than 0.

See also: ITEM SCALING, OEDIT CONTENTS, OLC OBJECTS
#d
"OEDIT CDTIME"

Usage:  .cdtime <seconds>

This optional feature specifies how long the cooldown will be, in seconds. If
you set this field and 'cooldown', quaffing the potion will trigger a cooldown
that blocks you from using other potions that have the same cooldown.

See also: COOLDOWN GENERIC, OEDIT COOLDOWN, OLC OBJECTS
#d
"OEDIT CHARGES"

Usage:  .charges <number>

Some items have a 'charges' trait which determines how many times they can
be used. You need to provide at least 1 charge for the item to be useful.

See also: OLC OBJECTS
#d
"OEDIT COINAMOUNT" "OEDIT COIN AMOUNT"

Usage:  .coinamount <number>

Coins: This sets how many coins are in a COINS-type object. You can't set what
empire the coins belong to; they will always be "other". For SCALABLE objects,
thus number is a scalable value if it is set to a number other than 0.

Currency: This sets the amount of adventure currency the object gives. This is
not scalable.

See also: ITEM SCALING, OEDIT TYPE, OLC OBJECTS
#d
"OEDIT COMPONENT" "OEDIT COMP"

Usage:  .component <name | vnum>

This sets the object to be a generic component. These are things used in
craft recipes (and other resource lists) that can accept any item of a
generic type. An item should only be a component if it could be used as a
generic part of a crafting recipe.

Components are all 'generics' -- use 'vnum gen <name>' to search them.

See also: SHOW COMPONENTS, SHOW USES, GENERIC COMPONENTS
#d
"OEDIT CONTAINERFLAGS" "OEDIT CONTAINER FLAGS"

Usage:  .containerflags [add | remove] <flags>

This command adds or removes container flags.

Available flags are:
 CLOSEABLE - the container may be closed and opened
 CLOSED - the container is closed when it loads

See also: OLC OBJECTS
#d
"OEDIT CONTENTS"

Usage:  .contents <amount>

Some items with a capacity, such as drink containers, also have a 'contents'
property. This is how full they are when they are loaded or dropped into the
world. If you want an item to start out empty, set its contents to 0. If you
want it to start out full, set it to the same amount as the capacity.

See also: OEDIT CAPACITY, OLC OBJECTS
#d
"OEDIT COOLDOWN"

Usage:  .cooldown <vnum>

This optional feature specifies a cooldown generic for a potion. If you set
this field and 'cdtime', quaffing the potion will trigger a cooldown that
blocks you from using other potions that have the same cooldown.

See also: COOLDOWN GENERIC, OEDIT CDTIME, OLC OBJECTS
#d
"OEDIT CORPSEOF" "OEDIT CORPSE OF"

Usage:  .corpseof <mob vnum>

This allows you to set whose corpse an item is. You can leave real corpses in
your adventure zone, by creating corpse items and setting this value to one
of your mobs.

All corpse items must be the corpse of something (for skin/butcher data).

See also: VNUM
#d
"OEDIT CURRENCY"

Usage:  .currency <vnum>

This sets the vnum of the adventure currency (a generic).

See also: GENERIC CURRENCY
#d
"OEDIT CUSTOM" "CUSTOM MESSAGES"

Usage:  .custom add <type> <message>
        .custom change <number> <type | message> <value>
        .custom move <number> <up | down>
        .custom remove <number | all>
        .custom sort

You can set custom messages on objects for various actions. These messages
may use the tokens $n/$e/$s/$m for name/he/his/him for the player using the
item, $p for the name of the item, $a for a/an for the item.

If you set more than one message of the same type, one will be chosen at
random each time.

Message types:
 &cbuild-to-char&0 - Shown to the character when the item is built into a building.
 &cbuild-to-room&0 - Shown to the room when the item is built into a building.
 &cinstrument-to-char&0 - Shown every few seconds to the person playing the instrument.
 &cinstrument-to-room&0 - Shown every few seconds to the room when someone is playing an instrument.
 &cconsume-to-char&0 - Shown to the person when they eat/drink/quaff/light the item.
   ($p for food/drink/potion/lighter; $T for liquid; $P for thing lit on fire)
 &cconsume-to-room&0 - Shown to the room when a person eats/drinks/quaffs/lights an item.
 &ccraft-to-char&0 - Shown to the actor when building a vehicle ($V for vehicle).
 &ccraft-to-room&0 - Shown to the room when building a vehicle ($V for vehicle).
 &cwear-to-char&0 - Shown to the person when they wear an item ($p for item).
 &cwear-to-room&0 - Shown to the room when the person wears an item ($p for item).
 &cremove-to-char&0 - Shown to the person when they remove an item ($p for item).
 &cremove-to-room&0 - Shown to the room when the person removes an item ($p for item).
 &clongdesc&0 - Object gives the player a custom long description when worn.
 &clongdesc-female&0 - Same as longdesc but only for females.
 &clongdesc-male&0 - Same as longdesc but only for males.
 &cfish-to-char&0 - On a fishing tool, shown to player when catching a fish ($p for item caught).
 &cfish-to-room&0 - On a fishing tool, shown to room when catching a fish ($p for item caught).
 &cdecays-on-char&0 - Shown to the holder/user of the item on decay, if any.
 &cdecays-in-room&0 - Shown to the room if the item decays on the ground.
 &cresource-to-char&0 - Shown to the character when they gain it as a resource.
 &cresource-to-room&0 - Shown to room when gained as a resource (e.g. chopped).
 &cscript1&0 - &cscript5&0 - Can be referenced in scripts as
   %obj.custom(script1)%, %obj.custom(script1,0)%, etc.
 &cmine-to-char&0 - Shown to the character when mining.
 &cmine-to-room&0 - Shown to the room when mining.
 &cchop-to-char&0 - Shown to the character when chopping.
 &cchop-to-room&0 - Shown to the room when chopping.

See also: OLC OBJECTS, DOLLAR SIGN CODES
#d
"OEDIT DAMAGE"

Usage:  .damage <amount>

This lets you set the damage on various types of weapons. Usually this amount
of damage is added to another number, like bow damage + ammo damage, or
strength + weapon damage.

When you set the damage, it will also give you the weapon's current DPS. This
is the amount of damage it deals per second, given its current attack type
or slow/fast flags.

Weapons that are slow but strong deal the same DPS as weapons that are fast
but weak. Some strategies prefer one way or the other. For most purposes, two
weapons are considered equal if their DPS (not their raw damage) is equal.

For SCALABLE objects, thus number is a scalable value if it is set to a number
other than 0.

See also: ITEM SCALING, OEDIT MISSILESPEED, OEDIT WEAPONTYPE, OLC OBJECTS
#d
"OEDIT EXTRA" "OEDIT EXTRA DESCRIPTIONS" "BEDIT EXTRA" "BEDIT EXTRA DESCRIPTIONS" "REDIT EXTRA" "REDIT EXTRA DESCRIPTIONS" "VEDIT EXTRA" "VEDIT EXTRA DESCRIPTIONS" "CROPEDIT EXTRA" "CROPEDIT EXTRA DESCRIPTIONS" "SECTEDIT EXTRA" "SECTEDIT EXTRA DESCRIPTIONS"

Usage:  .extra add <keywords>
        .extra change <number> <description | keywords> [value]
        .extra remove <number | all>

This command lets you add or edit extra descriptions. These are additional
descriptions that the player may 'look' at. 

For objects, the object's main description is set on the 'lookdescription'
command.

The keywords are a list of different words the player may look at, and the
associated description is shown when they do. When you add a new extra, it
immediately takes you into the string editor to write the description for the
keywords you chose.

Example in-game of a locket with extra description keyword "photo":
 > look locket
   The locket is worn but has a photo inside.
 > look photo
   It's a photo of a young girl.

See also: OEDIT LOOKDESCRIPTION, OLC BUILDINGS, OLC OBJECTS, STRING EDITOR,
  OLC ROOM TEMPLATES, OLC CROPS, OLC SECTORS
#d
"OEDIT FLAGS"

Usage:  .flags [add | remove] <flags>

Object flags allow additional properties to be set on objects, with various
effects. Never set a flag marked with an * (asterisk).

Available flags:
 &cUNIQUE&0 - can only equip 1 at a time
 &cPLANTABLE&0 - can be planted as a crop (see OEDIT PLANTS)
 &cLIGHT&0 - lights up the room (prefer LIGHT item type instead of the flag)
 &cSUPERIOR&0 - crafted by a master craftsman, adds the (superior) tag
 &cLARGE&0 - takes up 2 inventory slots, adds the (large) tag
 &c*CREATED&0 - created by a god command
 &c1-USE&0 - is destroyed when un-equipped
 &cSLOW&0 - for weapons, attacks slower
 &cFAST&0 - for weapons, attacks faster
 &cENCHANTED&0 - unstorable, magical, and vulnerable to Disenchant, adds (enchanted) tag
 &cJUNK&0 - will be cleaned up on the ground, even on claimed land -- worthless
 &cCREATABLE&0 - can be created using the 'create' command (usually resources)
 &cSCALABLE&0 - item can be scaled (see HELP ITEM SCALING)
 &cTWO-HANDED&0 - weapon requires both hand slots
 &cBOE&0 - item binds to a player when it is equipped (or used)
 &cBOP&0 - item binds to a player when it is picked up
 &cSTAFF&0 - counts as a staff (even if it doesn't have a staff weapon type)
 &cUNCOLLECTED-LOOT&0 - will decay on the ground if no player gets it
 &c*KEEP&0 - player has marked the object with the 'keep' command
 &c!AUTOSTORE&0 - will not autostore (e.g. furniture)
 &cHARD-DROP&0 - was dropped by a HARD mob (CAUTION: it will set this itself when dropped as loot)
 &cGROUP-DROP&0 - was dropped by a GROUP mob (CAUTION: it will set this itself when dropped as loot)
 &cGENERIC-DROP&0 - never receives the HARD-DROP/GROUP-DROP flags
 &c!STORE&0 - can't be stored (or home/warehouse stored), can be toggled by scripts
 &cSEEDED&0 - has already been seeded with the 'seed' command
 &cIMPORTANT&0 - won't be hit by an immortal "purge" with no args; can be used by scripts

See also: BINDING, OLC OBJECTS, LIGHT ITEM
#d
"OEDIT FULLNESS"

Usage:  .fullness <hours>

This determines how long a food item can make you full for when eaten, in game
hours (75 second intervals). The 'eat' command only eats part of food if the
player isn't hungry enough to eat the whole thing, which displays as "You eat
some of <item name>."

Examples of good fullness numbers:
 snack foods (apple) - 6 hours
 baskets of food (apples) - 24 hours
 prepared food (bread) - 48 hours

Foods should also have a decay timer set. Traditionally, more-prepared foods
take longer to decay, rather than basic it strictly on realism.

See also: OEDIT DECAY, OLC OBJECTS
#d
"OEDIT FULLSEARCH"

Usage:  .o fullsearch -<field> <argument> <...>

This command allows you to search for objects matching certain criteria. You
can specify multiple fields if you want. Any arguments that don't start with a
dash (-) are matched to the object's keywords and short/long/look descriptions.

Fields:
  &c-affects&0 - see HELP AFFECT FLAGS
  &c-apply&0 - see HELP OEDIT APPLY
  &c-custom&0 - has a specific type, see HELP OEDIT CUSTOM
  &c-extradesc&0 - has a specific keyword in its extra descs
  &c-flagged&0, &-cunflagged&0 - see HELP OEDIT FLAGS
  &c-interaction&0 - has a specific type, see HELP OEDIT INTERACTION
  &c-level&0 - matches anything where this level is within the range
     (note: will not account for objects whose levels are inherited from mobs
     or adventures, see ADVEDIT CASCADE for help)
  &c-lightflags&0 - see HELP OEDIT LIGHT FLAGS
  &c-lighthours&0 - search for an exact number of hours of light
  &c-lighthoursover&0 - search for a light with at least this many hours
  &c-lighthoursunder&0 - search for a light with at most this many hours
  &c-lightislit&0 - find lights that default to lit, excluding the LIGHT flag
  &c-lightisunlit&0 - find lights that default to unlit
  &c-material&0 - see OEDIT MATERIAL
  &c-requirestools&0 - see HELP OEDIT TOOLS
  &c-storable -unstorable&0 - Only get objects with or without storage sites.
  &c-timer&0, &c-timerover&0, &c-timerunder&0 - Search timer values.
  &c-tools&0 - see HELP OEDIT TOOLS
  &c-type&0 - see HELP OEDIT TYPE
  &c-weapontype&0 - see HELP OEDIT WEAPONTYPE
  &c-wear&0, &c-nowear&0 - see HELP OEDIT WEAR
  &c-vmin&0, &c-vmax&0 - VNUM range limits

Type-based fields:
  &c-lightflags&0 - see HELP LIGHT ITEM

Examples:
 > .o fullsearch -type WEAPON -wear HOLD
 > .o fullsearch -flagged LARGE -flagged BOP
 > .o fullsearch -level 50 sword -vmin 10000 -vmax 10099

To search other fields, you can generally use the normal "search" option for
other OLC types. For example, to find all objects with the "Summon Mob Whistle"
trigger, use ".t search 9910".

See also: LIGHT ITEM
#d
"OEDIT KEYWORDS"

Usage:  .keywords <list>

Keywords are the terms you can use to interact with an item. This is a list
of all available one-word terms. Any identifying word in an object's name
or long description should go in the keywords.

Usually the most significant or unique word goes first in the keyword list.
Some commands use the first keyword to auto-repeat, so if the keywords would
be ambiguous like "ore iron", you can add "ironore" as the first keyword to
help the game identify the correct object for repeating commands like smelt.

Examples:
 name: a wailing phaester
 long description: A huge, wailing phaister is lying here.
 keywords: phaester wailing huge

See also: OLC OBJECTS
#d
"OEDIT LIGHTHOURS" "OEDIT LIGHT HOURS" "OEDIT HOURS OF LIGHT"

Usage:  .lighthours <hours | unlimited>

This sets how many hours a light lasts. It is separate from the object's timer.

If the JUNK-WHEN-EXPIRED light flag is set, it will automatically be destroyed
when this timer expires.

See also: OLC OBJECTS, OEDIT LIGHT FLAGS, OEDIT LIGHT IS LIT
#d
"OEDIT LIGHTFLAGS" "OEDIT LIGHT FLAGS"

Usage:  .lightflags [add | remove] [flags]

This sets flags on a light item. These change how the light behaves. Here are
the available options:
 &cLIGHT-FIRE&0 - Can be used in place of a LIGHTER (when lit) to light things.
 &cCAN-DOUSE&0 - The player can put the light out and re-light it.
 &cJUNK-WHEN-EXPIRED&0 - When the light burns out, the whole item is purged.
 &cCOOKING-FIRE&0 - Can be used to cook.
 &cDESTROY-WHEN-DOUSED&0 - If the player douses this light, it is destroyed.

Lights with the LIGHT-FIRE or COOKING-FIRE flags will help buffer the player
against cold (while lit).

See also: OLC OBJECTS, OEDIT LIGHT HOURS, OEDIT LIGHT IS LIT, TEMPERATURE
#d
"OEDIT LIGHTISLIT" "OEDIT LIGHT IS LIT" "OEDIT IS LIT"

Usage:  .lightislit <yes | no>

Determines whether or not the light is "lit" by default. If not, the player
must light it themselves using a lighter.

See also: OLC OBJECTS, OEDIT LIGHT FLAGS, OEDIT LIGHT HOURS
#d
"OEDIT LIQUID"

Usage:  .liquid <type>

Drink containers hold a certain type of liquid. This only matters if the
'contents' property is greater than 0, as an empty drink container holds no
liquid at all. If a drink container is emptied, it can be refilled with any
type of liquid.

The name of the liquid is automatically appended to the name of the item, so
when "a flask" is full of ale, it becomes "a flask of ale". Keep this in mind
when naming your drink containers.

Available liquids are:
  water
  lager
  wheat beer
  ale
  cider
  milk
  blood
  honey
  bean soup
  coffee
  green tea
  red wine
  white wine
  grog
  mead
  stout

See also: OLC OBJECTS
#d
"OEDIT LONGDESCRIPTION" "OEDIT LONG DESCRIPTION" "LONG DESCRIPTION"

Usage:  .longdescription <text>

The long description is shown when the item is on the ground and the player
types 'look'. This is always a full sentence that describes the object as
present in the room. The name of the object should always be near the beginning
of the long description.

Examples:
 A sword is lying in the dirt.
 There is a sign stamped into the ground.
 A strange, humming orb is floating here.

See also: OLC OBJECTS
#d
"OEDIT LOOKDESCRIPTION" "OEDIT LOOK DESCRIPTION" "LOOK DESCRIPTION" "ACTION DESCRIPTION"

Usage:  .lookdescription

The look description (also called action description) is shown when a player
looks at or examines an object. For simple, common objects, this should tell
the player how to use the object. For decorative or impressive objects, it
should be a description of the object's majesty.

The look description is set in the string editor. If it is less than 80
characters long, it will fit on one line and should not be indented. If it
goes any longer than that, you should use /fi to format it with indent inside
the string editor.

See also: OLC OBJECTS, STRING EDITOR, MEDIT LOOKDESCRIPTION,
MORPHEDIT LOOKDSECRIPTION
#d
"OEDIT MATERIAL"

Usage:  .material <type>

Items are made out of various materials. This is used to determine if they can
float in water, what message is shown when they decay, and is also used by the
sacrifice and create commands to determine which resources the god gets or
spends.

Choose the material that best fits your object. If there isn't one that fits
at all, contact the programmer to discuss adding a new one. But remember, the
material doesn't need to be exact. It just needs to be close enough.

Available materials:
  WOOD     ROCK      IRON
  SILVER   GOLD      FLINT
  CLAY     FLESH     GLASS
  WAX      MAGIC     CLOTH
  GEM      COPPER    BONE
  HAIR

See also: OLC OBJECTS
#d
"OEDIT MAXLEVEL" "OEDIT MAX LEVEL"

Usage:  .maxlevel <level>

This command determines the maximum level a object will scale to. Players are
rated from level 1 to 100 based on their skills, plus a number based on their
gear. There is a full guide to item scaling at HELP ITEM SCALING.

If you set the maxlevel to 0, there will be no maximum and the obj can scale
to any level over the minimum.

See also: ITEM SCALING, OEDIT MINLEVEL, OLC OBJECTS
#d
"OEDIT MINIPET"

Usage:  .minipet <mob vnum>

This command assigns which mob is taught by a MINIPET item, when used with the
'use' command.

See also: MINIPETS, MINIPET ITEM
#d
"OEDIT MINLEVEL" "OEDIT MIN LEVEL"

Usage:  .minlevel <level>

This command determines the minimum level a object will scale to. Players are
rated from level 1 to 100 based on their skills, plus a number based on their
gear. There is a full guide to item scaling at HELP ITEM SCALING.

If you set the minlevel to 0, there will be no lower limit and objs can scale
to any level under the maximum.

See also: ITEM SCALING, OEDIT MAXLEVEL, OLC OBJECTS
#d
"OEDIT MINTFLAGS" "OEDIT MINT FLAGS" "OEDIT AUTOMINT" "OEDIT AUTO MINT" "OEDIT NO-MINT" "OEDIT NOMINT" "OEDIT NO MINT"

Usage:  .mintflags [add | remove] <flags>

Mint flags are:
  AUTOMINT - allows Workforce to mint the item into coins
  NO-MINT - item cannot be minted into coins at all

See also: OLC OBJECTS
#d
"OEDIT REQUIRESQUEST" "OEDIT REQUIRES QUEST" "OEDIT REQUIRE QUEST" "OEDIT QUEST"

Usage:  .requiresquest <vnum | none>

Items can be set to require the player to be on a quest. The player cannot get
an object for a quest they're not on, and can't lose an object for a quest they
are on.

Requires objects will be lost when the quest ends.

See also: OLC OBJECTS
#d
"OEDIT REQUIRESTOOLS" "OEDIT REQUIRES TOOLS"

Usage:  .requirestools [add | remove] <flags>

If an object requires a tool when you build or maintain a building WITH it, use
this field. This is separate from any tools set on the building's craft itself.

This does not apply to non-building/non-vehicle crafts, which are instant. For
those, set the tool on the craft itself.

Examples:
 - nails require a hammer when crafting

See &yHELP TOOLS&0 for a full list.

See also: OLC OBJECTS, CEDIT TOOL, OEDIT TOOLS
#d
"OEDIT STORAGE"

Usage:  .storage add <building | vehicle> <vnum> [flags]
        .storage change <number> flags <value>
        .storage remove <number | all>

This command lets you set where an object may be stored. An object type may
have any number of storage locations.

You should generally avoid putting storage on moving vehicles -- it is intended
for stationary vehicles and building-vehicles.

Available flags:
 WITHDRAW - This item requires the "withdraw" empire privilege.

See also: OLC OBJECTS
#d
"OEDIT PLANTS"

Usage:  .plants <crop vnum>

Any object with the PLANTABLE flag needs its crop set. This actually uses
item value 2, so many object types will have conflicting values. You should
never set a weapon as plantable, for example.

PLANTABLE works best on OTHER and FOOD items. You shouldn't use any other type
unless you have a very good reason (and that type doesn't use value 2 for
anything else).

See also: PLANT, OEDIT TYPE, OLC OBJECTS, VNUM
#d
"OEDIT PAINTS" "OEDIT PAINT COLORS"

Usage:  .paint <color>

This sets what color a 'paint' item uses. Type '.paint' by itself to see the
list of available colors.

See also: PAINT ITEM, OLC OBJECTS
#d
"OEDIT QUANTITY"

Usage:  .quantity <number>

This sets how many arrows (or other ammo) are available from a given AMMO
object.

See also: OLC OBJECTS
#d
"OEDIT QUICKRECIPE" "OEDIT QUICK RECIPE" QUICKRECIPE "QUICK RECIPE"

Usage:  .o quickrecipe <new obj vnum> <craft vnum> [pattern | design | etc]

This command generates a quick 'recipe' item for a given craft. The craft
must be set LEARNABLE. You can optionally give it a word like "pattern",
"schematic", etc if you don't want the default name "recipe".

It sets the following properties:
keywords: recipe <craft name>
shortdescription: the <craft name> recipe
longdescription: The <craft name> recipe is on the ground.
lookdescription: This recipe will teach you to <command>: <craft name>.
type: RECIPE
recipe vnum: <craft vnum>

See also: OLC OBJECTS, LEARN, RECIPE ITEM
#d
"OEDIT RECIPE"

Usage:  .recipe <craft vnum>

This sets the craft recipe that a RECIPE item teaches. You must specify the
vnum of a craft that has the LEARNED flag.

You can make recipes even faster with the quickrecipe command.

See also: OLC OBJECTS, OLC CRAFTS, CEDIT FLAGS, OEDIT QUICKRECIPE
#d
"OEDIT ROOMVNUM"

Usage:  .roomvnum <vnum>

This command sets the target for a portal object. Portals allow players to
travel instantly to another room anywhere in the world. You need a separate
object to represent each end of the portal, as they each target the other's
room. Of course, you can also have one-way portals by only putting an object
on one side.

If you are using the portal in an instanced adventure zone, the target should
be a *room template* vnum, not a real room. When the portal loads, it will be
linked to its instance's version of that room template. Portals cannot link
from the inside of an adventure zone to the outside, or to a room in a
different instance.

If you use the portal in a linking rule of an adventure zone, you don't need
to set the room vnum targets at all. The instance-builder will do that for
you.

See also: OLC ADVENTURES, OLC OBJECTS, OLC ROOM TEMPLATES, PORTAL, VNUM
#d
"OEDIT SHORTDESCRIPTION" "OEDIT SHORT DESCRIPTION"

Usage:  .shortdescription <text>

An object's short description is the text that appears in sentences, and is
shown on many status screens. The name should be reasonably short and simple.
It should not be capitalized unless it contains a proper noun. Names should
always start with "a", "an", or "the" unless it wouldn't make sense in a
sentence.

If an object has a capital letter in its short description, the Rework
ability will treat it as already "named" and will not allow it to be renamed.

All of the words in the object name should also appear in the keywords list,
except a/an/the.

Sample names:
 a flaming broadsword
 the chain of doom
 Amerigo's map
 the eye of the Grasper of Apiaries (this one is pushing it for length)

See also: OEDIT KEYWORDS, OLC OBJECTS
#d
"OEDIT TIMER" "DECAY TIMER" TIMER

Usage:  .timer <hours>

This determines how long an item lasts before it decays and is lost. This can
be used to make any item temporary, but it is used especially on food, drink
containers, portals, and similar. The decay timer only counts down while the
item is in-game, so players who log out do not lose their items. Timers are
measured in game hours/ticks (75 second intervals).

If you set the timer to 0 or -1 in the editor, the item does not decay.

Unlike all other types, when a drink container decays, only its contents go
bad and are poured out.

Food items are usually set to last longer if they are harder to get/make, and
shorter if they are found easily.

Remember, items left on the ground outdoors will decay or be stored after 3
real hours, regardless of their decay timers.

See also: AUTOSTORE, OEDIT TYPE, OLC OBJECTS
#d
"OEDIT TOOLS" "OEDIT TOOL FLAGS" "ABILEDIT TOOLS" "ABILEDIT TOOL FLAGS" "CEDIT TOOLS" "CEDIT TOOL FLAGS"

Usage:  .tools [add | remove] <flags>

Abilities: Player must be using this type of tool to use the ability.
Objects: Tool flags allow an object to be used for various tasks, like sawing.
         Objects also support a "requires tools" flag for tools needed to build
         something that uses the object (e.g. nails require hammer).
Crafts: You can require 1 or more tools to create the craft. These tools MUST
        be present, and you can't substitute with a building (e.g. tailor for
        sewing kit).

See &yHELP TOOLS&0 for a full list.

See also: OLC ABILITIES, OLC CRAFTS, OLC OBJECTS, OEDIT REQUIRES TOOLS
#d
"OEDIT TYPE"

Usage:  .type <type>

An object's type is its main property. This determines how it behaves in the
game, and determines what other properties need to be set for it. When you
change an object's type, some properties (like damage) will be reset to 0.

Never set any type that is marked with an * (asterisk).

Available types:
 UNDEFINED - type not set
 WEAPON - a melee weapon, or a caster weapon (requires .wear WIELD)
 WORN - clothing
 OTHER - miscellaneous
 CONTAINER - a chest, holds items on the ground (never set wear TAKE)
 DRINKCON - a drink container, like a flask
 FOOD - edible
 RECIPE - can be 'learned' to give a craft
 PORTAL - transports a player to another place (never set .wear TAKE)
 *BOARD - a message board (internal use only)
 CORPSE - a corpse
 COINS - a pile of coins
 CURRENCY - a pile of adventure currency
 PAINT - used for painting buildings
 *MAIL - a letter (internal use only)
 WEALTH - adds to empire wealth when stored
 LIGHTER - can light fires (contrast with LIGHT)
 MINIPET - teaches a minipet to the player on 'use'
 MISSILE-WEAPON - a bow, or similar (requires .wear RANGED)
 AMMO - ammunition for missile weapons
 INSTRUMENT - a musical instrument -- must set custom messages
 SHIELD - for blocking attacks (requires .wear HOLD)
 PACK - expands the player's inventory (requires .wear PACK)
 POTION - gives an effect when quaffed
 POISON - adds an effect to melee combat
 ARMOR - requires certain skills to wear
 BOOK - can be read like a library book
 LIGHT - lights up the room (when lit); contrast with LIGHTER

You can get specific help on each of these via HELP <type> ITEM

See also: OEDIT WEAR, OLC OBJECTS
#d
"OEDIT USES"

Usage:  .uses <number | unlimited>

This sets the number of times a LIGHTER object can be used. When it runs out
of uses, the player automatically junks the item. You can also create unlimited
lighters.

See also: LIGHTER OBJECT
#d
"OEDIT VALUE0" "OEDIT VALUE1" "OEDIT VALUE2"

Usage:  .value0 <number>
        .value1 <number>
        .value2 <number>

For item type OTHER, you can manually set the three object values. They have
no inherent meaning, but you can use them for scripting with variables like
%obj.val0%. For regular item types, these values are used for things such as
damage, fullness, and capacity.

If you set your OTHER object with the PLANTABLE flag, value1 is replaced by
the 'plants' property. If you can't see the plants property in the editor,
it means your value1 is invalid for planting and you should set your value1
back to 0.

See also: OEDIT PLANTS, OLC OBJECTS
#d
"OEDIT WEALTH"

Usage:  .wealth <value>

This property determines how much an item adds to an empire's wealth when
stored. It is only available on the WEALTH item type, and usually when you
add storage for the item, you should set the WITHDRAW flag on the storage so
that only people with the correct permission can withdraw it.

See also: OEDIT STORAGE, OLC OBJECTS
#d
"OEDIT WEAPONTYPE" "OEDIT WEAPON TYPE" "WEAPON TYPES"

Usage:  .weapontype <name | vnum>

The weapon type determines which combat messages are sent, how fast the weapon
attacks in combat, and whether or not it is sharp. Both regular weapons and
missile weapons share the same set of types.

Common attack vnums:
  Sharp weapons: [1] slash, [2] slice, [3] jab, [4] stab
  Blunt weapons: [5] pound, [6] hammer, [7] whip
  Magic weapons: [16] fire, [20] frost, [21] shock, [22] light, [28] mana blast
  Staff weapons: [17] lightning staff, [18] burn staff, [19] agony staff
  Ranged weapons: [29] bow, [30] crossbow, [31] pistol, [32] musket,
     [34] sling, [25] spear-thrower
  Tool types: [2] slice, [8] pick, [12] fire/torch
  Special types: [13] vampire claws

See also: OLC OBJECTS
#d
"OEDIT WEAR"

Usage:  .wear [add | remove] <flags>

The wear flags determine which parts of the body an item can be worn on, as
well as whether or not it can be picked up (TAKE). Be careful how many wear
slots you set, as each one means another copy of the same item can be used
concurrently.

Only items set TAKE can be picked up off the ground.

Weapons can often be set WIELD and HOLD and used in both positions.

Missile weapons must be set RANGED and instruments must be set HOLD.

Wear flags:
   TAKE        FINGER        NECK
   CLOTHES     HEAD          LEGS
   FEET        HANDS         ARMS
   WRISTS      ABOUT         WAIST
   EARS        WIELD         HOLD
   RANGED      ARMOR         PACK
   SADDLE

See also: OLC OBJECTS
#d
"OLC ABORT"

Usage:  .abort

This command closes your current OLC editor without saving. ALL YOUR CHANGES
ARE LOST. Don't worry, the .abort command can't be abbreviated, so ".a" will
never accidentally lose your changes.

See also: OLC
#d
"OLC AUDIT" "OLC AUDITOR" AUDITOR

Usage:  .<type> audit <from vnum> <to vnum>

This will audit all things in a range of vnums for common problems.

Auditing a single adventure will also run sub-auditors on all its contents.
#d
"OLC COPY"

Usage:  .<type> copy <from vnum> <to vnum>

This command copies an existing object (or mob, or whatever) to a new vnum,
and opens the editor. If you .abort this editor, the copy will not exist at
the new vnum. The copy is not complete until you .save your editor.

Example:
 > .o copy 105 106

See also: OLC ABORT, OLC SAVE, VNUM
#d
"OLC ADVENTURES" ADVEDIT

Usage:  .adv <command>
        .command

The .olc adventure zone editor allows you to configure the data for adventure
zones. Each adventure zone contains a set of room templates. The .adv editor
controls meta-data about the adventure zone, such as its name and level range.

All commands in the editor are highlighted in yellow/green and placed inside
<angle braces>. You can get help on these commands by typing:
  &yHELP ADVEDIT <COMMAND>&0

You can close an open editor with .abort or .save.

Example:
> .adv edit 123
> .flags remove IN-DEVELOPMENT
> .save

For notes on the mud's building rules, see HELP BUILDING GUIDE.

See also: OLC, OLC ABORT, OLC EDIT, OLC EDITOR, OLC SAVE, OLC REMOVEINDEV
#d
"OLC BUILDINGS" BEDIT

Usage:  .b <command>
        .command

The .olc building editor allows you to configure the data for buildings of all
kinds. It provides a simple in-game menu with options for the building.

All commands in the editor are highlighted in yellow/green and placed inside
<angle braces>. You can get help on these commands by typing:
  &yHELP BEDIT <COMMAND>&0

You can close an open editor with .abort or .save.

Example:
> .b edit 11419
> .flags BURNABLE
> .save

For notes on the mud's building rules, see HELP BUILDING GUIDE.

See also: BUILDING-VEHICLES, OLC, OLC ABORT, OLC EDIT, OLC EDITOR, OLC SAVE
#d
OLC-CONTROLS "OLC CONTROLS" "OLC SETFLAGS" "OLC SETMINVNUM" "OLC SETMAXVNUM" "OLC MIN VNUM" "OLC MAX VNUM" "OLC VNUMS" "OLC FLAGS"

Usage:  .setflags <immortal> [add | remove] [flags]
        .setminvnum <immortal> <vnum>
        .setmaxvnum <immortal> <vnum>

These controls allow upper immortals to set permissions on the lower-level
builders. In addition to the vnum range you specify, an immortal can also edit
an adventure zone if he has permission to edit the vnums it contains.

NOTE: Immortals at or above the Co-Implementor level are not constrained by
these settings.

Normally an immortal can edit any craft, mobile, or object in his/her vnum
range. However, some flags allow you to prohibit the editing of any of these.

Available flags:
 - ALL-VNUMS -- Not restrictded by setminvnum and setmaxvnum
 - MAP-EDIT -- Can edit the world map
 - CLEAR-IN-DEV -- Can remove the in-development flag on recipes
 - !CRAFT -- Cannot edit craft recipes even in the vnum range
 - !MOBILE -- Cannot edit mobiles
 - !OBJECT -- Cannot edit objects
 - !BUILDING -- Cannot edit buildings
 - !SECTORS -- Cannot edit map sectors
 - !CROP -- Cannot edit crops
 - !TRIGGER -- Cannot edit triggers
 - !ADVENTURE -- Cannot edit adventures
 - !ROOMTEMPLATE -- Cannot edit room templates
 - !GLOBAL -- Cannot edit globals
 - !AUGMENT -- Cannot edit augments
 - !ARCHETYPE -- Cannot edit archetypes
 - !ABILITIES -- Cannot edit abilities
 - !CLASSES -- Cannot edit classes
 - !SKILLS -- Cannot edit skills
 - !VEHICLES -- Cannot edit vehicles
 - !MORPHS -- Cannot edit morphs
 - !QUESTS -- Cannot edit quests
 - !SOCIALS -- Cannot edit socials
 - !FACITONS -- Cannot edit factions
 - !GENERICS - Cannot edit generics
 - !SHOPS - Cannot edit shops
 - !PROGRESS - Cannot edit progressions
 - !EVENTS - Cannot edit events
 - !ATTACKS - Cannot edit attack messages

For notes on the mud's building rules, see HELP BUILDING GUIDE.
#d
"OLC CRAFTS" CEDIT "CRAFTS OLC" "CRAFT OLC" CRAFTS "CRAFT RECIPE" CEDIT

Usage:  .c <command>
        .<command>

The .olc craft editor allows you to create and edit craft recipes for any of
the main crafting systems in the game. It provides a simple in-game menu with
contextual choices to set up the recipe.

All commands in the editor are highlighted in yellow/green and placed inside
<angle braces>. You can get help on these commands by typing:
  &yHELP CEDIT <COMMAND>&0

You can close an open editor with .abort or .save.

Example:
 > .c edit 23177
 > .type forge
 > .save

For notes on the mud's building rules, see HELP BUILDING GUIDE.

See also: OLC, OLC ABORT, OLC EDIT, OLC EDITOR, OLC SAVE
#d
"OLC CROPS" CROPEDIT "CROPS OLC" "CROP OLC" CROPEDIT

Usage:  .crop <command>
        .<command>

The .olc crop editor allows you to add, edit, or remove crops from the world,
all from inside the game. It provides an in-game menu for controlling every
detail of a crop, including what it produces.

You should set the FORAGE and HARVEST interactions on a crop, usually with a
1x quantity and 100% chance. Orchard-type crops should also usually have a
GATHER interaction and use PICK instead of HARVEST.

All commands in the editor are highlighted in yellow/green and placed inside
<angle braces>. You can get help on any of these commands by typing:
  &yHELP CROPEDIT <COMMAND>&0

You can close an open editor with .abort or .save.

Example:
 > .crop edit 123
 > .flags ORCHARD
 > .save

For notes on the mud's building rules, see HELP BUILDING GUIDE.

See also: CROPEDIT INTERACTION, OLC, OLC ABORT, OLC EDIT, OLC EDITOR, OLC SAVE
#d
"OLC GLOBALS" GEDIT GLOBALEDIT "GLOBAL EDIT" "GLOBAL OLC"

Usage:  .global <comman>
        .<command>

The .olc globals editor allows you to add, edit, or delete global tables from
the world. It provides an in-game menu for controlling features like global
loot tables.

Any global data that doesn't have an IN-DEVELOPMENT flag will be used by the
live game system.

All commands in the editor are highlighted in yellow/green and placed inside
<angle braces>. You can get help on any of these commands by typing:
  &yHELP GEDIT <COMMAND>&0

Each type of global provides a different function, and has its own help file.
See: GLOBAL MINE DATA, GLOBAL MOB INTERACTIONS

You can close an open editor with .abort or .save.

Example:
 > .global edit 123
 > .flags IN-DEVELOPMENT
 > .save

For notes on the mud's building rules, see HELP BUILDING GUIDE.

See also: GEDIT INTERACTION, OLC, OLC ABORT, OLC EDIT, OLC EDITOR, OLC SAVE
#d
"OLC DELETE"

Usage:  .<type> delete <vnum>

This command deletes an object (or mob, or whatever) from the database
entirely. All copies of that object are immediately destroyed.

WARNING: This cannot be undone (except by restoring a backup, if there is one).

See also: VNUM
#d
"OLC DEPLETION" "OLC DEPLETIONS" "INTERACTION DEPLETIONS" "PRODUCTION DEPLETIONS"

The 'production' and 'skilled labor' workforce chores use building interactions
to generate items for the empire. These default to the 'production' depletion
type on the tile, but you can specify a different one using -depletion <type>
on the interaction.

Example: .interaction add PRODUCTION 125 12345 100.0 -depletion trapping
 125 is the maximum number to generate, 12345 is the vnum, 100.0 is the chance
 to produce 1 each hour, and it uses the 'trapping' depletion type.

Available depletion types:
 dig
 forage
 gather
 pick
 fish
 quarry
 pan
 trapping
 chop
 hunt
 production

Note: This only applies to the PRODUCTION and SKILLED-LABOR interactions, and
only on buildings and vehicles.

See also: BEDIT INTERACTION
#d
"OLC EDIT"

Usage:  .<type> edit <vnum>

This command opens the OLC editor with the object (or mob, or whatever) with
the vnum you specified. If it's a new vnum, it opens a fresh editor and the
vnum will only exist if you .save the editor rather than .abort it when you're
done.

See also: OLC ABORT, OLC SAVE, VNUM
#d
"OLC EDITOR"

The .olc editor is the interface for making changes to objects, mobs, and
other in-game features. It has a simple menu, but doesn't take you out of the
game (except for the string editor). This means you can still access help files
and chat on public channels while editing.

You can open a new editor with ".o edit <vnum>" (for objects, for example).
You can close the editor with .save or .abort.

See also: OLC ABORT, OLC EDIT, OLC SAVE, STRING EDITOR, VNUM
#d
"OLC FREE"

Usage:  .<type> free <from vnum> <to vnum>

This command finds the first available vnum in a given range -- the opposite
of the olc 'list' command.

See also: OLC LIST, VNUM
#d
"OLC FULLSEARCH" FULLSEARCH

Usage:  .<type> fullsearch <arguments>

See the individual help files such as OEDIT FULLSEARCH.

Supported types:
  ability
  attack
  building (search designatable rooms with -flag ROOM)
  craft
  crop
  generic
  mobile
  object
  progress
  quest
  room template
  sector
  skill
  trigger
  vehicle

Unsupported types: adventure, augment, archetype, book, class, event, faction,
   global, morph, shop, social
#d
"OLC LIST" OLIST MLIST RLIST

Usage:  .<type> list <from vnum> [to vnum] [-d]

This command lists all objects (or mobs, or whatever) between two vnums
(inclusive). If the range is too long, it cuts off the list and you can try
again with a narrower range of vnums. If you provide the -d (--details)
argument, more information is shown per line.

Information provided by the -d flag:
 abilities: mastery
 adventure: mob/object/room count
 archetypes: skills, skill point total, and attribute total
 attacks: number of messages in the set
 augments: ability/skill, applies
 book: byline
 class: skill requirements
 craft: shows craft type
 generic: info based on generic type
 global: info based on global type
 mobiles: level range and many flags
 morph: ability/skill requirement
 objects: level range and some flags (quality, enchanted, scalable, binding)
 progress: type
 quests: level range and some flags (in-dev, daily, event, tutorial, group)
 rooms: some flags (outdoor, dark/light, no mob/teleport/loc, look out)
 sectors: climate and build-on flags
 skill: skill description
 social: shows in-dev and requirements, if any

To look up items by name, use the 'vnum' command.

To find unused vnums in a given range, use '.<type> free'.

See also: OLC FREE, VNUM
#d
"OLC MOBILES" MEDIT "MOBILE OLC" "MOBILE EDITOR" "MOB OLC" "MOB EDITOR" MEDIT

Usage:  .m <command>
        .<command>

The .olc mob editor is a tool for creating and editing mobiles. It provides a
simple in-game menu with contextual choices to allow you to easily create new
NPCs for your game.

All commands in the editor are highlighted in yellow/green and placed inside
<angle braces>. You can get help on these commands by typing:
  &yHELP MEDIT <COMMAND>&0

You can close an open editor with .abort or .save.

Example:
 > .m edit 74656
 > .sex male
 > .save

For notes on the mud's building rules, see HELP BUILDING GUIDE.

See also: OLC, OLC ABORT, OLC EDIT, OLC EDITOR, OLC SAVE
#d
"OLC OBJECTS" OEDIT "OBJECT OLC" "OBJECT EDITOR" OEDIT

Usage:  .o <command>
        .<command>

The .olc object editor is a powerful tool for creating and editing items. It
provides a simple in-game menu with contextual choices to design any type of
object.

All commands in the editor are highlighted in yellow/green and placed inside
<angle braces>. You can get help on these commands by typing:
  &yHELP OEDIT <COMMAND>&0

You can close an open editor with .abort or .save.

Example:
 > .o edit 11500
 > .name a massive hammer
 > .type weapon
 > .save

For notes on the mud's building rules, see HELP BUILDING GUIDE.

See also: OLC, OLC ABORT, OLC EDIT, OLC EDITOR, OLC SAVE
#d
"OLC QUESTS" QEDIT

Usage:  .q <command>
        .<command>

The .olc quest editor lets you build quests, both simple and complex. It
provides an in-game menu for controlling every detail of the quest.

All of the .olc commands are highlighted in yellow/green and placed inside
<angle braces>. You can get help on any of these by typing:
  &yHELP QEDIT <COMMAND>&0

You can close an open editor with .abort or .save.

For notes on the mud's building rules, see HELP BUILDING GUIDE.

See also: OLC, OLC ABORT, OLC EDIT, OLC EDITOR, OLC SAVE
#d
"OLC REMOVEINDEVELOPMENT" REMOVEINDEV "OLC REMOVE IN-DEVELOPMENT"

Usage:  .removeindev <adventure vnum>
        .removeindev <from vnum>-<to vnum>

This command removes the IN-DEVELOPMENT flag from an adventure and any craft
recipes in it, or from craft recipes over a given vnum range. It can be used
to quickly activate a zone.

The following types will have IN-DEVELOPMENT flags removed in the vnum range:
- the adventure (when targeting an adventure vnum)
- archetypes
- augments
- classes
- crafts
- factions
- generics (only used on MOON generics)
- globals
- morphs
- progress goals
- quests
- shops
- skills
- socials

See also: OLC CONTROLS, OLC ADVENTURES, ADVEDIT FLAGS, CEDIT FLAGS
#d
"OLC RESOURCES" "RESOURCE ADD" "RESOURCE CHANGE" "RESOURCE REMOVE" "RESOURCE MOVE"

Usage:  .resource add <type> <amount> <vnum/name>
        .resource change <number> <quantity | vnum | name | flags> <value>
        .resource remove <number | all>
        .resource move <number> <up | down>

Resource lists are used for crafting requirements, maintenance, and other
purposes. A resource list can contain objects, generic components, mana (and
other pools), coins, and liquids.

Specific syntaxes for adding:
  .resource add object <quantity> <vnum>
  .resource add component <quantity> <component name/vnum>
  .resource add liquid <number of units> <liquid vnum>
  .resource add coins <amount>
  .resource add pool <number of points> <pool type>
  .resource add action <amount> <type>
  .resource add currency <amount> <currency vnum>
  .resource add tool <amount> <tool type>

Valid pools are: health, mana, move, blood.

See also: COMPONENTS, OEDIT LIQUID, RESOURCE ACTIONS
See also: AUGEDIT RESOURCES, CEDIT RESOURCES, VEDIT RESOURCES, TOOL TYPES
#d
"OLC ROOM TEMPLATES" "OLC ROOMTEMPLATES" "OLC ROOMS" REDIT

Usage:  .r <command>
        .command

The .olc room template editor allows you to build rooms for adventure zones.
Each adventure zone contains a set of room templates, all with vnums between
its start and end numbers.

This is NOT the editor for designatable rooms -- use .build for that (see
HELP OLC BUILDINGS).

All commands in the editor are highlighted in yellow/green and placed inside
<angle braces>. You can get help on these commands by typing:
  &yHELP REDIT <COMMAND>&0

You can close an open editor with .abort or .save.

Example:
> .r edit 11253
> .title On the Shores of Maybe
> .save

For notes on the mud's building rules, see HELP BUILDING GUIDE.

See also: OLC, OLC ABORT, OLC EDIT, OLC EDITOR, OLC SAVE
#d
"OLC SAVE"

Usage:  .save

This command saves all the changes in your open editor, then closes the editor.
If you were editing a new vnum (or a copy), the vnum doesn't exist in the
database until after you .save your editor.

If you don't want to save your changes, you can close the editor with .abort
instead.

See also: OLC ABORT, VNUM
#d
"OLC SEARCH"

Usage:  .<type> search <vnum>

This command shows you all places that a certain vnum is used. It works for
most OLC types.

Examples:
 > .o search 1413
 > .t search 12
#d
"OLC SECTORS" SECTEDIT SECTOREDIT "SECTORS OLC" "SECTOR OLC"

Usage:  .sect <command>
        .<command>

The .olc sector editor allows you to add, edit, or remove entire setors
(terrains) from within the game. It provides an in-game menu for controlling
every detail of a sector, including how it evolves over time.

Sectors are also called terrain types, and essentially form the basis of the
world map.

All commands in the editor are highlighted in yellow/green and placed inside
<angle braces>. You can get help on any of these commands by typing:
  &yHELP SECTEDIT <COMMAND>&0

You can close an open editor with .abort or .save.

Example:
 > .sect edit 19
 > .evolution remove 4
 > .save

For notes on the mud's building rules, see HELP BUILDING GUIDE.

See also: OLC, OLC ABORT, OLC EDIT, OLC EDITOR, OLC SAVE
#d
"OLC TRIGGERS" "TRIGGER OLC" "OLC SCRIPTING" "SCRIPT OLC" TRIGEDIT

Usage:  .trig <command>
        .<command>

The .olc trigger editor allows you to add, edit, or remove triggers which can
be attached to scripts on mobs, objects, and other things. For each trigger,
you must set what it's meant to attach to (e.g. mobiles), which events it
triggers on (e.g. greeting), and then its command list.

When editing the trigger's command text, you can use * to put a comment on a
line, to help people reading the trigger understand what it's meant to do.

All of the .olc commands are highlighted in yellow/green and placed inside
<angle braces>. You can get help on any of these by typing:
  &yHELP TRIGEDIT <COMMAND>&0

You can close an open editor with .abort or .save.

For notes on the mud's building rules, see HELP BUILDING GUIDE.

See also: OLC, OLC ABORT, OLC EDIT, OLC EDITOR, OLC SAVE
See also: TRIGEDIT-TYPES
#d
"OLC VEHICLES" VEDIT "VEHICLE EDITOR" "VEHICLE OLC"

Usage:  .v <command>
        .<command>

The .olc vehicle editor gives you the freedom to create a wide range of
vehicles. It provides an in-game menu for controlling every detail of the
vehicle (except how to make one; that's the craft editor).

All of the .olc commands are highlighted in yellow/green and placed inside
<angle braces>. You can get help on any of these by typing:
  &yHELP VEDIT <COMMAND>&0

You can close an open editor with .abort or .save.

For notes on the mud's building rules, see HELP BUILDING GUIDE.

Example vehicle settings:
 cart: DRIVING SIT CONTAINER LEADABLE, capacity: 200, animals required: 1
 ship: SAILING SHIPPING, interior room: set
 chair: SIT IN DRAGGABLE CAN-PORTAL
 catapult: LEADABLE SIEGE-WEAPONS, animals required: 2

See also: BUILDING-VEHICLES, OLC, OLC ABORT, OLC EDIT, OLC EDITOR, OLC SAVE
#d
"OLC WORDCOUNT" "OLC WORD COUNT" WORDCOUNT "WORD COUNT"

Usage:  .<type> wordcount <from vnum> [to vnum]

This command counts all the words in the text for the various OLC types. For
example, an object counts all the words in its keywords, short desc, long desc,
look desc, extra descriptions, and custom messages.

If you use this on a single adventure, it will count all parts of the
adventure and provide a total.

See also: OLC LIST, VNUM
#d
"OLC WORKFORCE" "WORKFORCE OLC"

There are several ways to make an empire's workforce work a building:
- DIGGING function flag with DIG interactions
- FISHING function flag with FISH interactions
- MILL function (milling)
- MINE function - building must be on a can-mine tile; interactions come from
  the mine-data global, see HELP MINE DATA GLOBAL
- MINT function (minting)
- PRESS function (oilmaking)
- PRODUCTION/SKILLED-LABOR interactions: see HELP PRODUCTION INTERACTION
- SAW function (sawing, scraping)
- SMELT function (smelting)
- STABLE function (shearing)
- TAILOR function (weaving)
- TANNERY function (tanning)
- Any craft with the WORKFORCE type and "requiresfunction" set will work at
  buildings with a matching function (crafting).
#d
"PRODUCTION INTERACTION" "SKILLED-LABOR INTERACTION" "SKILLED LABOR INTERACTION"

Workforce will work any claimed building or vehicle with a PRODUCTION or
SKILLED-LABOR interaction on it. Both of these run under the "production"
chore.

The interaction's "quantity" is the depletion limit; workforce will produce the
item 1 at a time. Depletions are slightly random; set this number 25% higher
than the amount you want the player to get per year.

All production on a single tile or building will share the same depletion
counter unless you use the "-depletion <type>" option on each interaction. See
the help file on OLC DEPLETION.

The interaction's "percentage" is the chance per hour to produce the item.

See also: INTERACTIONS, OLC WORKFORCE, OLC DEPLETION
#d
PROGEDIT "OLC PROGRESSION" "PROGRESSION OLC" "PROGRESS OLC"

Usage:  .prog <command>
        .command

The .olc progression editor allows you to configure goals, which empires can
complete in exchange for rewards. Some goals are unlocked by completing tasks,
and others can be purchased for a cost.

All commands in the editor are highlighted in yellow/green and placed inside
<angle braces>. You can get help on these commands by typing:
  &yHELP PROGEDIT <COMMAND>&0

You can close an open editor with .abort or .save.

Example:
> .prog edit 123
> .name Test Goal
> .save

For notes on the mud's building rules, see HELP BUILDING GUIDE.

See also: OLC, OLC ABORT, OLC EDIT, OLC EDITOR, OLC SAVE
#d
"PROGEDIT COST"

Usage:  .cost <points>

This determines how many progress points it costs to buy this progression. You
only set the cost on goals marked PURCHASABLE. A purchasable goal should not
have any tasks (but can still have prerequisites).

See also: OLC PROGRESS, PROGEDIT VALUE, PROGEDIT FLAGS
#d
"PROGEDIT DESCRIPTION"

Usage:  .description

This command will open the string editor. The progress goal's description
should be short and concise. It should give the player a basic idea of how to
achieve the goal. It does not need to mention the reward.

See also: OLC PROGRESS, STRING EDITOR
#d
"PROGEDIT FLAGS"

Usage:  .flags [add | remove] <flags>

The following progress goal flags are available:
 &cIN-DEVELOPMENT&0 - Empires cannot start or complete this goal.
 &cPURCHASABLE&0 - This goal is purchased, not unlocked by tasks.
 &cNO-AUTOSTART&0 - Must be added or started by a script or quest.
 &cHIDDEN&0 - Will not show up in lists until completed.
 &cNO-ANNOUNCE&0 - Does not announce/log completion.
 &cNO-PREVIEW&0 - Mortals can't view this goal before starting it.
 &cNO-TRACKER&0 - Mortals can't see the detailed tracker while in-progress.

See also: OLC PROGRESS
#d
"PROGEDIT FULLSEARCH"

Usage:  .prog fullsearch -<field> <argument> <...>

This command allows you to search for progress goals matching certain criteria.
You can specify multiple fields if you want. Any arguments that don't start
with a dash (-) are matched to the goal's name and other text.

Fields:
  &c-cost&0 - match a specific cost
  &c-flagged&0, &c-unflagged&0 - see HELP PROGEDIT FLAGS
  &c-perks&0 - see HELP PROGEDIT PERKS
  &c-tasks&0 - see HELP REQUIREMENTS / HELP PROGEDIT TASKS
  &c-type&0 - see HELP PROGEDIT TYPE
  &c-value&0 - match a specific value
  &c-vmin&0, &c-vmax&0 - VNUM range limits

Examples:
 > .prog fullsearch -type PLAYER-TECH -ptech Swimming -vmin 10000 -vmax 10099
 > .prog fullsearch -flagged RANGED -flagged RANGED-ONLY

To search other fields, you can generally use the normal "search" option for
other OLC types. For example, to find all goals that require you to kill a
certain mob, use ".m search 12345", which will search the task field on all
goals for that mob.
#d
"PROGEDIT NAME"

Usage:  .name <name>

A progress goal needs a unique name, but it should also be simple enough for
a player to type.

Tips:
- Avoid starting with "A" or "The" if possible.
- Write the name like a book title: Every Word Capitalized
- No ending punctuation
- Do not start the name with "Buy", "Completed", or one of the type names as
  players may not be able to get info on those goals due to conflicts in the
  'progress' command.

See also: OLC PROGRESS, PROGEDIT TYPES
#d
"PROGEDIT PERKS"

Usage: perks add <type> <name/value>
       perks copy <from vnum>
       perks remove <number | all>

Perks are the rewards for unlocking a goal. Perks are permanent, and are never
lost even if the empire no longer qualifies for the goal that gave them.

Perk types:
 Technology - Grants an empire technology.
 City-points - Grants one or more city points.
 Craft - Grants a LEARNED craft recipe to the entire empire.
 Max-city-size - Increases how large the empire can upgrade its cities.
 Wealth-territory-per-100 - Increases territory-per-100-wealth.
 Greatness-territory - Increases territory per greatness point.
 Workforce-cap - Raises the maximum workforce cap.
 Territory - Directly adds to the total territory for an empire.
 Speak-language - All members can speak this language.
 Recognize-language - All members can recognize this language when spoken.

Note: To grant progress points for a goal, set the 'value' field instead.

See also: OLC PROGRESS, PROGEDIT VALUE
#d
"PROGEDIT PREREQS" "PROGEDIT PREREQUISITES"

Usage:  .prereqs add <vnum>
        .prereqs copy <from vnum>
        .prereqs remove <number | all>

This setting allows you to make some progression goals dependent upon others,
forming a "tree" of unlockable goals. You can require as many preqreqs as you
like, but if you require none, the goal will be open to all empires.

See also: OLC PROGRESS
#d
"PROGEDIT TASKS" "PROGEDIT REQUIREMENTS"

Usage:  .tasks add <type> <vnum> [group]
        .tasks change <number> <amount | group | vnum> <value>
        .tasks copy <from type> <from vnum> [tasks/prereqs (quests only)]
        .tasks remove <number | all>

These are the tasks that must be completed in order to unlock the progression
goal's rewards. This uses the same system of requirements as quests and
socials, but some of the tasks do not apply to progression goals.

See HELP REQUIREMENTS for more information about requirements. Just like with
other requirements, if you don't group tasks, a goal can be completed by
finishing any of them. Group names are always a single case-sensitive letter.

Task types that do not apply to empire progression:
 &rCOMPLETED-QUEST, NOT-COMPLETED-QUEST, NOT-ON-QUEST, SKILL-LEVEL-OVER,
 SKILL-LEVEL-UNDER, TRIGGERED, VISIT-BUILDING, VISIT-ROOM-TEMPLATE,
 VISIT-SECTOR, HAVE-ABILITY, REP-OVER, REP-UNDER, WEARING, WEARING-OR-HAS,
 GET-CURRENCY, CAN-GAIN-SKILL, LEVEL-UNDER, LEVEL-OVER, SPEAK-LANGUAGE,
 RECOGNIZE-LANGUAGE, COMPLETED-QUEST-EVER&0

See also: OLC PROGRESS, REQUIREMENTS
#d
"PROGEDIT TYPE"

Usage:  .type <type>

This sets the type (or tree) that this particular goal belongs to. The current
types are:

&cCommunity&0 - Goals related to city-building (stock goals are in the 1000 vnums)
&cIndustry&0 - Goals related to production (stock goals are in the 2000 vnums)
&cDefense&0 - Goals related to war and foritication (3000 vnum range)
&cPrestige&0 - Goals related to accomplishments (4000 vnum range)

Vnum ranges are given for reference. Adventure goals still belong in the
adventure's vnum block.

See also: OLC PROGRESS
#d
"PROGEDIT VALUE"

Usage:  .value <points>

This sets how many progress points the goal is worth when it is finished.
Only set this on progression goals that have tasks, not ones that are flagged
PURCAHSABLE.

See also: OLC PROGRESS, PROGEDIT COST, PROGEDIT FLAGS
#d
"QEDIT COMPLETEMESSAGE" "QEDIT COMPLETE MESSAGE"

Usage:  .completemessage

The complete message is shown to players when they turn in the quest. The
player types the command to turn in the completed quest and sees only this
message.

The message is set in the string editor. You should use /fi to format it
with indent inside the string editor if it's longer than one line (80 chars).

See also: OLC QUESTS, STRING EDITOR
#d
"QEDIT DAILYCYCLE" "QEDIT DAILY CYCLE" "DAILY CYCLE"

Usage:  .dailycycle <number>

When two or more daily quests have the same 'dailycycle' value, only one of
those quests will be available per day, at random. For the sake of cleanliness,
you should pick the vnum of 1 of those quests as the cycle id.

See also: OLC QUESTS, SHOW DAILYCYCLE
#d
"QEDIT DESCRIPTION"

Usage:  .description

The quest's description is shown to players when they start the quest, and on
request while they are on the quest. It should describe the quest briefly.

The message is set in the string editor. You should use /fi to format it
with indent inside the string editor if it's longer than one line (80 chars).

See also: OLC QUESTS, STRING EDITOR
#d
"QEDIT FLAGS" "QUEST FLAGS"

Usage:  .flags [add | remove] <flags>

The following quest flags are available:
 IN-DEVELOPMENT - Mortals cannot see or get the quest.
 REPEAT-PER-INSTANCE - Clears completion when the instance closes.
 EXPIRES-AFTER-INSTANCE - Fails the quest when the instance closes.
 EXTRACT-TASK-OBJECTS - Items and components required for tasks will be lost.
 DAILY - Quest counts as a daily.
 EMPIRE-ONLY - Can only start/finish with mob/room of matching empire (or
    matching not-in-empire).
 NO-GUESTS - Checks actual ownership on the room when you start/finish a quest.
 TUTORIAL - This quest will not appear if the player uses 'toggle tutorials'.
    Use this flag for basic tutorials only, like ones on common items.
 GROUP-COMPLETION - Will auto-finish the quest if a group member turns it in
    while in the same room.
 EVENT - Quest is marked as part of an event. If it's a daily quest, it is
    separate from non-event dailies.

See also: OLC QUESTS, DAILY QUEST
#d
"QEDIT FULLSEARCH" "QUEST FULLSEARCH"

Usage:  .q fullsearch -<field> <argument> <...>

This command allows you to search for quests matching certain criteria. You
can specify multiple fields if you want. Any arguments that don't start with a
dash (-) are matched to the quest's name and strings.

Fields:
  &c-flagged&0, &cunflagged&0 - see HELP QEDIT FLAGS
  &c-level&0, &clevelover&0, &clevelunder&0 - Search the level range of quests
  &c-dailycycle&0 - Search for a specific daily cycle id
  &c-nodailycycle&0 - Search for daily quests with no cycle
  &c-activedailycycle&0, &c-inactivedailycycle&0 - Dailies that are active or not
  &c-repeat&0, &crepeatover&0, &crepeatunder&0 - Search for specific repeat times
  &c-reward&0 - Search for 1 reward type; see HELP QEDIT REWARDS
  &c-prereq&0 - Search for 1 prerequisite type; see HELP REQUIREMENTS
  &c-task&0 - Search for 1 task type; see HELP REQUIREMENTS
  &c-vmin&0, &c-vmax&0 - VNUM range limits

Examples:
 > .q fullsearch -level 150
 > .q fullsearch -flagged EMPIRE-ONLY -task OWN-BUILDING
 > .q fullsearch -repeatover 1 -vmin 10000 -vmax 10099

To search other fields, you can generally use the normal "search" option for
other OLC types. For example, to find quests that reward a green knitted
stocking (object 16678), use ".o search 16678".
#d
"QEDIT MAXLEVEL" "QEDIT MAX LEVEL"

Usage:  .maxlevel <level>

This controls how high quest rewards can scale. Players can still complete
quests below their level.

See also: OLC QUESTS
#d
"QEDIT MINLEVEL" "QEDIT MIN LEVEL"

Usage:  .minlevel <level>

This controls what level a player must attain before being able to get this
quest.

See also: OLC QUESTS
#d
"QEDIT NAME"

Usage:  .name <name>

The quest's name should be distinctive, but reasonably short. As a general
rule, it shouldn't be longer than about 40 characters.

See also: OLC QUESTS
#d
"QEDIT REPEAT"

Usage:  .repeat <minutes>
        .repeat never
        .repeat immediately

You can set quests to be repeatable after a certain amount of time. This will
remove the quest from players' completion list, allowing them to pick up the
quest again.

See also: QEDIT PREREQS, QEDIT TASKS, OLC QUESTS
#d
"QEDIT REWARDS"

Usage:  .rewards add <type> <amount> <vnum/type>
        .rewards change <number> vnum <value>
        .rewards copy <from type> <from vnum>
        .rewards remove <number | all>
        .rewards move <number> <up | down>

Quest rewards are given to the player upon completion. You can add as many or
as few rewards as possible, and you can also use quest scripts to give more
complicated rewards instead.

Available reward types:
 &cBONUS-EXP&0 - Give the player additional bonus exp today.
 &cCOINS&0 - Give the player some coins (empire or misc).
 &cOBJECT&0 - Give the player items.
 &cSET-SKILL&0 - Set the player's skill to a specific level (usually 0, 50, 75,
    100). You should use prereqs to be sure what the player's skill is first.
 &cSKILL-EXP&0 - Give the player some skill experience and a chance for skill gain.
 &cSKILL-LEVELS&0 - Raise the player's skill level, if possible.
 &cQUEST-CHAIN&0 - Starts a player on another quest, if they meet the pre-reqs and
    are not already on it.
 &cREPUTATION&0 - Gain/lose faction reputation.
 &cCURRENCY&0 - Gives generic currency (e.g. tokens).
 &cEVENT-POINTS&0 - Points toward an event (only happens if the event is running).
 &cSPEAK-LANGUAGE&0 - Can now speak a language.
 &cRECOGNIZE-LANGUAGE&0 - Can now recognize a language (will not override one the
    player can already speak).
 &cGRANT-PROGRESS&0 - Player's empire completes a progress goal.
 &cSTART-PROGRESS&0 - Player's empire starts a NO-AUTOSTART progress goal.
 &cUNLOCK-ARCHETYPE&0 - Grants the player/account a locked archetype for new chars.

Note: If you set empire coins as the reward, but the mob is not part of an
empire, the player will receive misc coins instead.

See also: QEDIT PREREQS, QEDIT SCRIPTS, OLC QUESTS
#d
"QEDIT STARTS AT" "QEDIT ENDS AT"

Usage:  .<starts/ends> add <type> <vnum>
        .<starts/ends> change <number> vnum <value>
        .<starts/ends> copy <from type> <from vnum> [starts/ends]
        .<starts/ends> remove <number | all>

You can set the quest givers -- the people/places/things it starts and ends at.
Players can pick up the quest from any of the listed starts, and can turn it in
at any of the listed ends.

Available quest giver types:
 BUILDING - Quest starts in a building/room.
 MOBILE - Quest starts at a given mob.
 OBJECT - Quest starts at a given object (if not bound to someone else).
 ROOM-TEMPLATE - Quest starts at a given room template.
 TRIGGER - Quest is given by a trigger.
 QUEST - Starts from the rewards of another quest.
 VEHICLE - Quest starts at a vehicle.

NOTE: The "trigger" type is only used for tracking purposes. Unlike the other
types, it won't cause the trigger to automatically offer the quest. Instead,
this indicates that you will use the %quest% command to give or complete the
quest in that trigger. The "quest" type is similar, and you must put this
quest in the rewards list of that quest for it to start.

See also: %QUEST%, OLC QUESTS
#d
"REDIT DESCRIPTION"

Usage:  .description

All rooms need a good description. The description should be at least 3 full
lines, and should always be formatted with the /fi option in the string
editor. Generally descriptions should not run more than about 6 lines.

See also: OLC ROOM TEMPLATES, STRING EDITOR
#d
"REDIT EXITS"

Usage:  .exit add <dir> <room template vnum> [keywords if door]
        .exit change <number> <field> <value>
        .exit remove <number | all>

Room templates can exit only to other room templates -- never to real rooms
or world locations. The starting room of an adventure zone will also always
exit back to the place in the world it linked from (if it linked from a
building). Other exits can be added in any direction, or choose RANDOM and a
direction will be chosen for you.

If you wish to create a door that opens and closes, specify door keyword(s) at
the end of the exit add.

You can use 'change' to alter an exit's direction, target, or keywords.
Changing the keywords to 'none' removes the door.

Examples:
 > .exit add random 1234
 > .exit add down 1236 trapdoor door
 
You can use .matchexits to automatically create the exits back to other rooms
that link to the one you're currently editing.

See also: OLC ROOM TEMPLATES, REDIT MATCH EXITS, VNUM
#d
"REDIT FLAGS"

Usage:  .flags [add | remove] <flags>

The following room template flags are available:
 OUTDOOR - Affected by sun.
 DARK - Always requires a light. (By default, rooms are dark at night.)
 LIGHT - Never requires a light.
 !MOB - Mobs will not wander into the room (they may still be spawned there).
 PEACEFUL - No combat allowed.
 NEED-BOAT - Requires a boat, swimming, waterwalk, or fly.
 !TELEPORT - Cannot teleport in or out.
 LOOK-OUT - can see the map using "look out"
 !LOCATION - no location shown; disables "where"

See also: OLC ROOM TEMPLATES
#d
"REDIT FULLSEARCH"

Usage:  .r fullsearch -<field> <argument> <...>

This command allows you to search for room templates matching certain criteria.
You can specify multiple fields if you want. Any arguments that don't start
with a dash (-) are matched to the template's title and other text.

Fields:
  &c-affects&0 - see HELP REDIT AFFECTS
  &c-extradesc&0 - has a specific keyword in its extra descs
  &c-flagged -unflagged&0 - see HELP REDIT FLAGS
  &c-functions&0 - see HELP REDIT FUNCTIONS
  &c-interactions&0 - has a specific type, see HELP REDIT INTERACTION
  &c-vmin&0, &c-vmax&0 - VNUM range limits

Examples:
 > .r fullsearch -interactions DIG
 > .r fullsearch -unflagged LIGHT -function FORGE
 > .r fullsearch -flagged !MOB -flagged DARK -vmin 10000 -vmax 10099

To search other fields, you can generally use the normal "search" option for
other OLC types. For example, to find all templates that spawn a certain mob
vnum, use ".mob search 12345", which will search the spawns on all templates
for that mob.
#d
"REDIT MATCHEXITS" "REDIT MATCH EXITS"

Usage:  .matchexits

This command will look for other rooms in the same adventure zone that link
to this one, and attempt to create matching exits. This makes the other side
of exits easier to add.

The exit's flags and keywords, if any, are automatically copied.

Matched exits will always lead back in the opposite direction of the exit they
matched (an east exit links back west), unless you are using "random" exits,
in which case they will be random on both sides. When the adventure zone is
instantiated, matching random exits will be linked in the same logical
direction (a random exit linking to a random exit may, for example, go
north-south). They will not end up with wildly different random directions.

See also: OLC ROOM TEMPLATES, REDIT EXITS
#d
"REDIT TITLE"

Usage:  .title <title>

The title is shown above the room description. Like all titles, these should
be title-cased (Named Like a Book), should not have punctuation at the end,
and should be a reasonably short description of the room.

See also: OLC ROOM TEMPLATES
#d
"REDIT SPAWNS"

Usage:  .spawn add <type> <vnum> <percent> <limit>
        .spawn change <number> <vnum | percent | limit> <value>
        .spawn copy <from type> <from vnum>
        .spawn remove <number | all>

Spawn commands cause any OBJ, MOB, or VEH to load in the room whenever the
adventure zone is reset (if their percent check passes, and there aren't more
than the limit).

The limit is only for the current instance, so setting a limit of 3 means that
each copy of this adventure zone can have 3 of the thing at a time.

This is different from the spawn data set on crops, sectors, and buildings.

See also: OLC ROOM TEMPLATES, ADVEDIT RESET TIME, VNUM
#d
"REDIT SUBZONE" "REDIT SUB-ZONE" "REDIT SUB ZONE" SUBZONE SUB-ZONE "SUB ZONE"

Usage:  .subzone <vnum | none>

Room templates have an optional numerical property called subzone. This divides
an adventure up for commands like "where", "shout", and also %subecho%. It is
usually used with the !LOCATION flag, which indicates that a room is not "at"
the map location where the adventure instance is linked.

If you are using this property, you should set the subzone id to the vnum of a
room template in that subzone. All room templates with the same subzone id are
"in the same place". The same subzone can be used across multiple adventures,
if they are all conceptually "in the same non-map place".

An example of a subzone is the Portal to the Primeval adventure, which takes
place through a portal. All the room templates in the adventure are in the
"same place" but that place is not "at the map location where the portal
spawned".

Note: Without a !LOCATION flag, a room with a subzone will still share the
where/shout range of other areas around it as if it has no subzone. However,
the %subecho% command will still work as expected without the !LOCATION flag.

See also: REDIT FLAG, %SUBECHO%
#d
REQUIREMENTS "QEDIT TASKS" "QEDIT PREREQS" "QEDIT PREREQUISITES" "SOCEDIT REQUIREMENTS"

Usage:  .<field> add <type> <vnum> [group] [custom text]
        .<field> change <number> <amount | group | text | vnum> <value>
        .<field> copy <from type> <from vnum> [tasks/prereqs (quests only)]
        .<field> remove <number | all>

Requirement lists are used to determine if a character is eligible for some-
thing, or if they have completed it. Examples include quest prerequisites and
tasks.

A player only needs to meet 1 requirement from the list. However, you can
create requirement groups where all conditions on a group must be met. If
there is more than one group, the player only needs to meet all conditions from
any 1 group. Group names are always a single case-sensitive letter.

Custom text is optional and will replace the normal display text. If using
custom text, you MUST provide the [group] argument first, but it can be '-' or
"none".

Available tasks:
 &cCOMPLETED-QUEST&0 - Must complete a certain quest (some need same-instance).
 &cGET-COMPONENT&0 - Must have components.
 &cGET-OBJECT&0 - Must have items.
 &cKILL-MOB &r*&0&0 - Must kill a certain mob.
 &cKILL-MOB-FLAGGED &r*&0^ - Must kill mobs with certain flags.
 &cNOT-COMPLETED-QUEST&0 - Has not completed a certain quest.
 &cNOT-ON-QUEST&0 - Is not currently on a certain quest.
 &cOWN-BUILDING&0 - Empire has a certain building.
 &cOWN-BUILDING-FUNCTION&0^ - Empire has a building (or building-vehicle) with a given function flag.
 &cOWN-VEHICLE&0 - Empire has a certain vehicle (or building-vehicle).
 &cOWN-VEHICLE-FLAGGED&0^ - Empire has a vehicle (including building-vehicles) with specific flags.
 &cOWN-VEHICLE-FUNCTION&0^ - Empire has a non-building vehicle with specific functions.
 &cSKILL-LEVEL-OVER&0 - Player has a certain skill at least this high.
 &cSKILL-LEVEL-UNDER&0 - Player has a certain skill no higher than this.
 &cTRIGGERED &r*&0&0 - Activated by a %quest% command in a trigger.
 &cVISIT-BUILDING &r*&0&0 - Player must go to a certain building/room.
 &cVISIT-ROOM-TEMPLATE &r*&0&0 - Player must go to a certain room template.
 &cVISIT-SECTOR &r*&0&0 - Player must go to a certain terrain.
 &cHAVE-ABILITY&0 - Player must have a certain ability.
 &cREP-OVER&0 - Player must have at least this faction reputation.
 &cREP-UNDER&0 - Player must be at or below this faction reputation.
 &cWEARING&0 - Player has the item equipped
 &cWEARING-OR-HAS&0 - Player has the item either equipped or in inventory
    Note: item will not be extracted even if EXTRACT-TASK-OBJECTS is on
 &cGET-CURRENCY&0 - Player must have an amount of adventure currency.
 &cGET-COINS&0 - Player must get some miscellaneous coins.
 &cCAN-GAIN-SKILL&0 - Player is able to gain a point in a skill.
 &cCROP-VARIETY&0 - Needs produce from a number of different crops.
 &cOWN-HOMES&0 - Empire must have enough citizen homes (in buildings).
 &cOWN-SECTOR&0 - Empire must own enough tiles of this sector type.
 &cEMPIRE-WEALTH&0 - Empire must have a certain amount of wealth.
 &cEMPIRE-FAME&0 - Empire must have a certain amount of fame.
 &cEMPIRE-GREATNESS&0 - Empire must have a certain amount of greatness.
 &cDIPLOMACY&0 - Empire must have a number of matching diplomatic relations.
 &cHAVE-CITY&0 - Empire must have a number of cities (of any size).
 &cEMPIRE-MILITARY&0 - Empire must have a certain amount of military.
 &cEMPIRE-PRODUCED-OBJECT&0 - Empire has produced an amount of an item.
 &cEMPIRE-PRODUCED-COMPONENT&0 - Empire has produced an amount of a component.
 &cEVENT-RUNNING&0 - Only available while the event is running.
 &cEVENT-NOT-RUNNING&0 - Not available while the event is running.
 &cLEVEL-UNDER&0 - Composite/total level not higher than this.
 &cLEVEL-OVER&0 - Composite/total level not lower than this.
 &cSPEAK-LANGUAGE&0 - Player knows how to speak a language.
 &cRECOGNIZE-LANGUAGE&0 - Player can recognize or speak a language.
 &cCOMPLETED-QUEST-EVER&0 - Must complete a certain quest (ignoring same-instance).
 &cDAYTIME&0, &cNIGHTTIME&0 - Only valid during certain times of day (quests only).

&r*&0 Some types require a trackable quest, and cannot be used as prereqs.
^ If a type requires flags and you use more than one flag, you MUST put the
  flags in "quotation marks".

See also: COMPONENTS, MEDIT FLAG, %QUEST%
#d
"SECTEDIT BUILDFLAGS"

Usage:  .buildflags [add | remove] <flags>

The buildflags for a sector are checked against the buildon or buildfacing
flags of a building craft recipe, to determine if this sector is a valid place
to build. A building may be built on this sector if at least one flag from its
'buildon' appears in the sector's 'buildflags'.

Available flags:
 &cwater&0 - any type of water tile
 &cplains&0 - a flat, temperate sector like plains
 &cmountain&0 - a rough tile like a mountain
 &cfull-forest&0 - a temperate forest of various types
 &cdesert&0 - a flat, arid sector
 &criver&0 - a fresh-water sector
 &cjungle&0 - any jungle tile
 &cnot-player-made&0 - DO NOT SET on .buildflags
 &cocean&0 - a salt-water tile
 &coasis&0 - an arid water source
 &ccrops&0 - any crop tile, should ONLY be used for 'buildfacing'
 &cgrove&0 - an arid forest tile like a desert grove
 &cswamp&0 - a swamp-/marsh-type tile
 &cany-forest&0 - a broader category of forests usually used for 'buildfacing'
 &copen-building&0 - does not apply to buildflags -- do not use
 &cflat-terrain&0 - for buildings that can face any flat terrain
 &cshallow-sea&0 - the area around islands
 &ccoast&0 - the land on the ocean coastline
 &criverbank&0 - the land on the edge of rivers
 &cestuary&0 - where the river meets the sea
 &clake&0 - a lake tile
 &cbase-terrain-allowed&0 - *** do not set this on a sector

Note: When adding these flags to adventure linking rules, they all have to
be added in one line, so you can't type multiple words. Try abbreviating them
to one word, such as: "plains full desert" (the full stands for 'full forest').

See also: CEDIT BUILDON, CEDIT BUILDFACING, OLC SECTORS
#d
"SECTEDIT CHECKTEMPERATURE" "SECTEDIT CHECK TEMPERATURE"

Usage:  .checktemperature

Use this command while editing a sector to see what temperatures its climate
flags will give it during various parts of the year.

See also: SECTEDIT CLIMATE
#d
"SECTEDIT COMMANDS"

Usage:  .commands <list>
        .commands none

The commands list is shown below the map, and is meant to help newbies
understand how to use the sector. If the sector can be chopped down, list
'chop' as a command. If it has dig data, put 'dig' in the list.

The commands list is usually put in alphabetic order to look cleaner and less
scattered. The whole list is displayed in cyan, so you should not include any
color codes in the commands list.

Crop tiles will auto-generate their command lists if no sector commands are
set. For buildings, the commands list from the building data is used instead.

See also: OLC SECTORS
#d
"SECTEDIT EVOLUTIONS"

Usage:  .evolution add <type> [value] <percent> <becomes sector vnum>
        .evolution change <number> <type | value | percent | sector> <new value>
        .evolution remove <number | all>

This command lets you add or remove an evolution from a sector. Evolutions are
rules that describe how the sector changes over time. Some evolutions change
the world periodically on their own; others are triggered by player action.

Evolutions happen once per in-game day.

No matter how small you set the percentages on evolutions, if they run on their
own, they'll eventually succeed. Percentages may be set from 0.01 to 100.00.
Evolutions are automatically sorted by type and by percentage. Only one will
be called at a time -- the first one whose percentage check passes.

Available types ([value] isn't used unless specified):
 &cCHOPPED-DOWN&0 - Sector to become when chopped by a player; you should also add
    chop interactions.
 &cCROP-GROWS&0 - Sector to become when the crop finishes growing (Seeded -> Crop).
 &cADJACENT-ONE&0 - Called when this sector is next to a certain other sector
    (value is the sector vnum that it's adjacent to).
 &cADJACENT-MANY&0 - Called when this sector is next to at least 6 of another
    sector (value is the sector vnum that it's adjacent to many of).
 &cRANDOM&0 - Checked periodically and called it if passes.
 &cTRENCH-START&0 - Sector this one becomes if a person starts to excavate.
 &cTRENCH-FULL&0 - Sector this one becomes, if it's a trench, when it fills up.
 &cNEAR-SECTOR&0 - Checked when this sector is within 2 tiles of another sector
    (value is the sector vnum that must be nearby).
 &cPLANTS-TO&0 - Sector this one becomes when you start to plant a crop on it.
 &cMAGIC-GROWTH&0 - Sector this one becomes if it is magically forced to grow.
 &cNOT-ADJACENT&0 - No matching sector within 1 tile (value is the sector vnum).
 &cNOT-NEAR-SECTOR&0 - No matching sector within 2 tiles (value is the sector
    vnum).
 &cSPRING, SUMMER, AUTUMN, WINTER&0 - Triggers during this season.
 &cBURNS-TO&0 - Sector this tile becomes when burned down by a player.
 &cSPREADS-TO&0 - The opposite of adjacent-one: spreads from this tile to that one.
 &cHARVEST-TO&0 - Becomes this sector when a crop is removed, always. This also
    triggers if it's on a sector that a crop tile became, e.g. harvesting the
    crop returns it to a Scorched Plain, then calls HARVEST-TO evolutions on
    that Scorched Plain.
 &cDEFAULT-HARVEST-TO&0 - Becomes this sector if a crop is removed and there's
    no stored previous sector to return to.
 &cTIMED&0 - Occurs after the given number of minutes.
 &cOWNED&0 - Evolves if the tile is claimed.
 &cUNOWNED&0 - Evolves if the tile is not claimed.
 &cBURN-STUMPS&0 - Sector this tile becomes when burnt by workforce.
 &cADJACENT-SECTOR-FLAG&0 - Evolves when adjacent to a sector with this flag.
    Note: For multiple sector flags, use quotes like "CROP IRRIGATES-AREA".
 &cNOT-ADJACENT-SECTOR-FLAG&0 - ... NOT adjacent to a sector with this flag.
 &cNEAR-SECTOR-FLAG&0 - Evolves within 2 tiles of a sector with this flag.
 &cNOT-NEAR-SECTOR-FLAG&0 - ... NOT within 2 tiles of a sector with this flag.

Examples:
 Jungle: .evolution add CHOPPED-DOWN 1 50% 28
 Jungle: .evolution add CHOPPED-DOWN 1 100% 27
 Plains: .evolution add ADJACENT-MANY 4 .02% 1

See also: OLC SECTORS
#d
"SECTEDIT FLAGS"

Usage:  .flags [add | remove] <flags>

Available sector flags:
 &cLOCK-ICON&0 - a random icon is chosen when the terrain changes to this, and kept
 &cIS-ADVENTURE&0 - used only for adventure rooms
 &cNON-ISLAND&0 - won't be detected as part of an island by the island detection
    system.
 &cCHORE&0 - This sector may have a chore (required, or the chore will never trigger)
 &c!CLAIM&0 - Cannot be claimed.
 &cSTART-LOCATION&0 - A starting location for players; prevents combat here
 &cFRESH-WATER&0 - Requires a boat, counts as a river
 &cOCEAN&0 - Requires a boat, counts as ocean
 &cDRINK&0 - Provides drinkable water; can also be used from adjacent rooms
 &cHAS-CROP-DATA&0 - Has an associated crop (like a seeded field or a crop tile)
 &cCROP&0 - Is a crop (visually replaced by crop data); you should also set HAS-CROP-DATA
 &cLAY-ROAD&0 - The lay command here can be used to create a road
 &cIS-ROAD&0 - This tile is a road
 &cCAN-MINE&0 - The tile is mine-able; this allows the Prospect ability
 &cSHOW-ON-POLITICAL-MAPOUT&0 - Still appears on the political version of the graphical map
 &cMAP-BUILDING&0 - This sector represents a building on the map; shown using building data
 &cINSIDE-ROOM&0 - This sector represents an interior (designated) ROOM building
 &cLARGE-CITY-RADIUS&0 - This tile counts as in-city even in the outskirts
 &cOBSCURE-VISION&0 - Players can't be seen here; also blocks guard towers
 &cIS-TRENCH&0 - Sector counts as a trench and fills with water
 &cNO-GLOBAL-SPAWNS&0 - Won't use global spawn lists.
 &cROUGH&0 - This is rough, raised terrain, like a mountain
 &cSHALLOW-WATER&0 - The tile has water but requires no boat (like a swamp)
 &cNEEDS-HEIGHT&0 - Uses the 'height' property in some way and will set itself from
    nearby tiles if missing.
 &cKEEPS-HEIGHT&0 - Uses the 'height' property but won't change it (for roads etc).
 &cSEPARATE-NOT-ADJACENTS&0 - Runs each NOT-ADJACENT evolution separately rather
    than making sure the tile isn't adjacent to ANY of them.
 &cSEPARATE-NOT-NEARS&0 - Runs each NOT-NEAR-SECTOR evolution separately rather
    than making sure the tile isn't near ANY of them.
 &cINHERIT-BASE-CLIMATE&0 - Uses the climate flags of the base sector in addition
    to the ones set on this sector. For example, a road or building sector.
 &cIRRIGATES-AREA&0 - This flag is used to trigger irrigation evolutions.

See also: OLC SECTORS, TERRAIN HEIGHT
#d
"SECTEDIT FULLSEARCH" "SECTOR FULLSEARCH"

Usage:  .sector fullsearch -<field> <argument> <...>

This command allows you to search for sectors with certain criteria. You can
specify multiple fields if you want. Any arguments that don't start with a
dash (-) are matched to the sector's name, title, and commands.

Fields:
  &c-buildflagged&0 - see HELP SECTEDIT BUILDFLAGS
  &c-climate&0 - see HELP SECTEDIT CLIMATE
  &c-evolution&0 - has a certain evolution, see SECTEDIT EVOLUTIONS
  &c-extradesc&0 - has a specific keyword in its extra descs
  &c-flagged&0, &cunflagged&0 - see HELP SECTEDIT FLAGS
  &c-interaction&0 - has a specific type, see HELP SECTEDIT INTERACTION
  &c-mapout&0 - color name, see HELP SECTEDIT MAPOUT
  &c-roadsideicon&0 - has a certain icon letter - HELP SECTEDIT ROADSIDEICON
  &c-vmin&0, &c-vmax&0 - VNUM range limits

Examples:
 > .sect fullsearch -climate forest -evolution CHOPPED-DOWN
 > .sect fullsearch -flagged CHORE -flagged ROUGH
 > .sect fullsearch -interaction CHOP -vmin 10000 -vmax 10099

To search other fields, you can generally use the normal "search" option for
other OLC types. For example, to find all sectors that spawn a certain mob,
use ".m search <mob's vnum>".
#d
"SECTEDIT ICONS" "CROPEDIT ICONS"

Usage:  .icons add <type> <color code> <icon>
        .icons copy <from type> <from vnum>
        .icons change <number> <type | color | icon> <value>
        .icons remove <number | all>

EmpireMUD uses four different seasons and the biggest change between them is
that sectors look different at different times of year. You can also specify
an icon for ANY season. The <type> parameter is where you specify which season,
and a list of valid types is shown on the olc display for the sector.

If more than one icon is available for a given season (or from season + any),
one is chosen at random. If you want to have random icons available, but want
one pre-selected, set the LOCK-ICON sector flag. Be warned, however, that once
an icon is locked, it remains the same in any season.

For icons, the base color is separate from the icon, so the icon does not
need to start with a color code (unless it's different from the base you set).
You can also use the &&? color code to specify the base color.

The olc editor display shows the rendered (colored) icon, its base color code,
and then the icon with raw, unrendered && codes.

See additional info at HELP SPECIAL ICONS.

Example:
 > .icon add summer &&g .&&0[]&&?.

See also: OLC CROPS, OLC SECTORS
#d
"SECTEDIT MOVECOST" "SECTEDIT MOVE COST" "SECTEDIT MOVEMENT COST"

Usage:  .movecost <number>

Each sector has a movement cost when a player enters or leaves it. You can
look at other existing sectors for an idea of what an appropriate cost is.

The cost for a player to move from one sector to another is the average of the
costs of those two sectors. Open buildings have a cost that is the average of
their current sector (building) and the sector they were built upon (e.g.
mountain).

See also: OLC SECTORS
#d
"SECTEDIT NAME"

Usage:  .name <name>

The sector name is generally one word (sometimes two), singular (Hill not
Hills), and capitalized. It's important that it doesn't conflict with the
name of another sector, so you should try to make them unique. Sometimes, this
just means adding a second word to the name ("Sandy Trench" vs "Trench").

See also: OLC SECTORS
#d
"SECTEDIT ROADSIDEICON" "ROADSIDEICON" "ROADSIDE ICON" "ROAD SIDE ICON"

Usage:  .roadsideicon <character>

The roadside icon is a single-character icon that's used when map tiles are
built around things like roads. This should be a single character that looks
reasonably like the whole sector tile. It does not include a color code -- it
will use the color code of the full icon that would otherwise be displayed.

Examples:
 Plains (....): .
 Forest (^^^^): ^
 Mountain (/\/\): ^

See also: OLC SECTORS
#d
"SECTEDIT TITLE"

Usage:  .title <title>

The title is shown above the map on most sectors (except sectors which are
buildings or crops, where the title comes from one of those instead). Like all
titles, these should be title-cased (Named Like a Book), should not have
punctuation at the end, and should be a reasonably short description of the
sector.

See also: OLC SECTORS
#d
SECTOR SECTORS "SECTOR TYPE" "CURRENT SECTOR"

A "sector" is a terrain type, such as "Plains" or "Calamander Jungle". These
are configured in the sector editor (SECTEDIT), appear on "show sector", and
can be manually added to the map with MAPEDIT TERRAIN.

Each map room also has a BASE SECTOR and a NATURAL SECTOR. You can view all
three sector types on a room using "stat room".

See also: BASE SECTOR, MAPEDIT TERRAIN, NATURAL SECTOR, SECTEDIT, SHOW SECTORS
#d
SHOPEDIT "OLC SHOPS" "SHOP OLC"

Usage:  .shop <command>
        .command

The .olc shop editor allows you to configure shops, which can be attached to
mobs, objects, room templates, and buildings. Shops can sell items for coins
or for various adventure currencies (generics). However, shops are not
currently able to buy items.

All commands in the editor are highlighted in yellow/green and placed inside
<angle braces>. You can get help on these commands by typing:
  &yHELP SHOPEDIT <COMMAND>&0

You can close an open editor with .abort or .save.

Example:
> .shop edit 123
> .name Test Shop
> .save

For notes on the mud's building rules, see HELP BUILDING GUIDE.

See also: OLC, OLC ABORT, OLC EDIT, OLC EDITOR, OLC SAVE
#d
"SHOPEDIT CLOSES" "SHOPEDIT OPENS"

Usage:  .opens <hour>
        .closes <hour>

These commands allow you to set when the shop opens or closes. You can use
either 12- or 24-hour time ('4pm' or '16'). If a shop has the same time for
both opening and closing, it will be open all the time.

If the opening time is later than the closing time, the shop will be open
overnight: e.g. if it opens at 6pm and closes at 4am.

See also: OLC SHOPS
#d
"SHOPEDIT FLAGS" "SHOP FLAGS"

Usage:  .flags [add | remove] <flags>

Shop flags set various properties on shops.

Available flags:
 IN-DEVELOPMENT - Players can't use the shop.

See also: OLC SHOPS, OLC REMOVEINDEV
#d
"SHOPEDIT ITEMS"
Usage: .item add <vnum> <cost> <currency vnum | coins> [min reputation]
       .item change <number> <vnum | cost | currency | reputation> <value>
       .item move <number> <up | down>
       .item copy <from type> <from vnum>
       .item remove <number | all>

The shop's item list determines what it sells. Shops have an infinite number
of each item, and do not run out. Shopkeepers do not receive the coins or
currency that are paid to them; this is always lost.

The parameters for add/change are:
- vnum: The object vnum to sell.
- cost: The number of coins/currency.
- currency: Either the word 'coins' or the vnum of a generic currency. Coins
  will always be miscellaneous coins unless the shop's mob/room belong to an
  empire, in which case it will be empire coins.
- reputation: If the shop has allegiance to a faction, this is the lowest
  reputation that can buy the item (optional).

See also: SHOPEDIT ALLEGIANCE, OLC SHOPS, GENERIC CURRENCY, VNUM
#d
"SHOPEDIT LOCATIONS"

Usage:  .location add <type> <vnum>
        .location change <number> vnum <value>
        .location copy <from type> <from vnum>
        .location remove <number | all>

Locations are places where the shop appears. The same shop can have multiple
shopkeepers.

Available location types:
 BUILDING - Any copy of this building (or designated room) has the shop.
 MOBILE - A mob has the shop, wherever that mob is.
 OBJECT - An object has the shop. Be careful; this will work even if the object
   is in the player's inventory.
 ROOM-TEMPLATE - The shop is in a room template in an adventure.
 VEHICLE - A vehicle operates the shop, wherever that vehicle is.

Shop locations use the same system as the start/end locations of a quest, and
you can copy from those fields (and vice versa) with this syntax:
> .location copy quest <vnum> starts

See also: OLC QUESTS, OLC SHOPS
#d
"SHOPEDIT NAME"

Usage:  .name <name>

A shop's name is only used for internal purposes, such as 'vnum' or '.list'.
Players do not see the name. You should use something descriptive.

See also: OLC SHOPS
#d
SKILLEDIT "OLC SKILLS" "SKILL OLC"

Usage:  .skill <command>
        .command

The .olc skill editor allows you to set up player skills. The main purpose of
this is to choose which abilities that skill unlocks, and at what level. This
does not control what class a player becomes (see HELP CLASSEDIT), only which
powers they have access to and in which order.

All commands in the editor are highlighted in yellow/green and placed inside
<angle braces>. You can get help on these commands by typing:
  &yHELP SKILLEDIT <COMMAND>&0

You can close an open editor with .abort or .save.

Example:
> .skill edit 123
> .name Test Skill
> .save

For notes on the mud's building rules, see HELP BUILDING GUIDE.

See also: OLC, OLC ABORT, OLC EDIT, OLC EDITOR, OLC SAVE
#d
"SKILLEDIT ABBREVIATION"

Usage:  .abbrev <string>

The skill abbreviation is a short name used for some strings where there isn't
enough space for the full name. It must always be 3 letters and contain no
color codes.

See also: OLC SKILLS
#d
"SKILLEDIT DESCRIPTION"

Usage:  .description <text>

Skill descriptions are short phrases that appear when a player types "skills",
or when they get more info on a skill during character creation. These should
always be short -- 40 characters or so. Generally they are written as whole
sentences, but with no punctuation.

See also: OLC SKILLS
#d
"SKILLEDIT FLAGS" "SKILL FLAGS"

Usage:  .flags [add | remove] <flags>

Skill flags set various properties on skills.

Available flags:
 &cIN-DEVELOPMENT&0 - Players can't see or gain the skill.
 &cBASIC&0 - Always shows in the list for players, even at 0.
 &cNO-SPECIALIZE&0 - Players can't pass 50/75 except via script/quest.
 &cVAMPIRE&0 - Players with this skill are considered vampires.
 &cCASTER&0 - Players with this skill are spellcasters/mages.
 &cREMOVED-BY-PURIFY&0 - Lose this skill if hit by the purify spell.

See also: OLC SKILLS, OLC REMOVEINDEV
#d
"SKILLEDIT FULLSEARCH" "SKILL FULLSEARCH"

Usage:  .skill fullsearch -<field> <argument> <...>

This command allows you to search for skills matching certain criteria. You
can specify multiple fields if you want. Any arguments that don't start with a
dash (-) are matched to the skill's name and strings.

Fields:
  &c-flagged&0, &cunflagged&0 - see HELP SKILLEDIT FLAGS
  &c-maxlevel&0, &cmaxlevelover&0, &cmaxlevelunder&0 - Search the max-level setting
  &c-mindrop&0, &cmindropover&0, &cmindropunder&0 - Search the min-drop-level setting
  &c-vmin&0, &c-vmax&0 - VNUM range limits

Examples:
 > .skill fullsearch -maxlevel 75
 > .skill fullsearch -flag BASIC -flag CASTER
 > .skill fullsearch -flag CASTER -vmin 0 -vmax 99

To search other fields, you can generally use the normal "search" option for
other OLC types. For example, to find skills that have "Resurrect" (ability
219), use ".abil search 219".
#d
"SKILLEDIT MAXLEVEL" "SKILLEDIT MAX LEVEL"

Usage:  .maxlevel <level>

This is the maximum level the skill can go up to. Normally, it is set to 100.
However, you can also limit skills to 50 or 75, to create "minor skill trees".

You can choose numbers other than 50 or 75, but setting the maximum to 80
would still require the player to specialize past 75.

See also: OLC SKILLS
#d
"SKILLEDIT MINDROP" "SKILLEDIT MIN DROP" "SKILLEDIT MIN DROP LEVEL"

Usage:  .mindrop <level>

This is the lowest a player can voluntarily "skill drop" the skill to. For
example, the Vampire skill has a min-drop of 1 because the player can't get
rid of his vampire status this way.

See also: OLC SKILLS
#d
"SKILLEDIT NAME"

Usage:  .name <name>

A skill's name is what players see on their skill list, and what is shown in
many messages related to the skill. Skill names should be reasonably short and
very unique. Players will want to abbreviate them easily.

See also: OLC SKILLS
#d
"SKILLEDIT SHOWSYNERGIES" "SKILLEDIT SHOW SYNERGIES" "SKILLEDIT SHOWSYNERGY" "SKILLEDIT SHOW SYNERGY"

Usage:  .showsynergies

This command will hide/show the list of synergy abilities in the skill editor.
This toggle resets each time you log in.

See also: SKILLEDIT SYNERGY, OLC SKILLS
#d
"SKILLEDIT SHOWTREE" "SKILLEDIT SHOW TREE"

Usage:  .showtree

This command will hide/show the ability tree in the skill editor. This toggle
resets each time you log in.

See also: SKILLEDIT TREE, OLC SKILLS
#d
"SKILLEDIT SYNERGY" "SKILLEDIT SYNERGIES"

Usage:  .synergy <role | all> add <paired skill> <skill level> <ability>
        .synergy <role | all> change <ability> <skill | level> <value>
        .synergy <roll | all> remove <ability | all>
        .showsynergies  (shows/hides the list of synergies)

Synergy abilities are ones you get when this skill is at max level, and another
skill is at the given skill level. The "paired skill" parameter is the name
(or vnum) of the other required skill.

You cannot use normal skill tree abilities as synergy abilities. However, an
ability may appear in any number of synergy lists.

See also: SKILLEDIT SHOWSYNERGIES, OLC SKILLS
#d
"SKILLEDIT TREE"

Usage:  .tree add <ability> <level> [requires ability]
        .tree remove <ability | all>
        .tree change <ability> <level | requires> <new value>
        .showtree  (shows/hides the tree)

This command allows you to set up the skill tree -- the abilities players can
purchase. Each ability requires a level. You can also set a requirement that
they buy another ability first -- that's what makes it a tree.

Each ability may only be assigned to only one skill, and cannot be assigned to
both a skill and a class.

Players always get a fixed number of ability points in a skill, and you can
use the level and prerequisite abilities to help control how many of the
abilities a player can access.

See also: ABILITY POINTS, SKILLEDIT SHOWTREE, OLC SKILLS, VNUM
#d
"SPECIAL ICONS" "ICON CODES"

The following special codes may be used in icons:
 @. - show the roadside icon for the base tile type here
 @e - show the roadside icon for the tile to the east
 @w - show the roadside icon for the tile to the west
 @u - show a 'v' if the tile to the west is a wall
 @U - show a 'V' if the tile to the west is a wall
 @v - show a 'v' if the tile to the east is a wall
 @V - show a 'V' if the tile to the east is a wall

The following special colors may be used in icons:
 &&? - The tile color of the base terrain.
 &&# - Wall color (walls are colored by enchantments).
#d
SOCEDIT "OLC SOCIALS" "SOCIAL OLC" "SOCIAL EDITOR"

Usage:  .soc <command>
        .<command>

The .olc social editor is a tool for creating and editing social commands
(which are like pre-set emotes). It provides a simple in-game menu with
contextual choices to design all types of socials.

All commands in the editor are highlighted in yellow/green and placed inside
<angle braces>. You can get help on these by typing: &yHELP SOCEDIT <COMMAND>&0

You can close an open editor with .abort or .save.

Example:
 > .soc edit 10199
 > .name smile (with mask)
 > .command smile
 > .save

For notes on the mud's building rules, see HELP BUILDING GUIDE.

See also: OLC, OLC ABORT, OLC EDIT, OLC EDITOR, OLC SAVE
#d
"SOCEDIT COMMAND"

Usage:  .command <word>

This is the command which is typed to use the social. It must be one single
word (usually a verb), as any additional words would be interpreted as a
target.

Social commands never override regular game commands.

If more than one social has the same command, the one with the most matched
requirements will be used. If a player qualifies for two copies of a social
that have the same number of requirements, one is chosen at random.

See also: OLC SOCIALS
#d
"SOCEDIT FLAGS"

Usage:  .flags [add | remove] <flags>

Social flags are properties that affect how the social behaves.

Available flags:
 IN-DEV - Cannot be used by mortals.
 HIDE-IF-INVIS - No messages are shown to the room if the actor is not visible.
   (this is normally used for socials that are visual but silent, like 'smile')

See also: OLC SOCIALS
#d
"SOCEDIT MESSAGES" "SOCEDIT N2CHARACTER" "SOCEDIT N2OTHERS" "SOCEDIT S2CHARACTER" "SOCEDIT S2OTHERS" "SOCEDIT T2CHARACTER" "SOCEDIT T2VICTIM" "SOCEDIT T2OTHERS" "SOCEDIT TNOTFOUND"

Usage:  .n2char <message | none>
        .<type> <message | none>

These messages are the ones shown when the player uses the social. Some
messages are optional and may be left blank.

Messages when a social is typed without an argument ("grin"):
  No-arg to character <&yn2char&0>
  No-arg to others <&yn2other&0>  - leave blank if n2char is an error message
    about needing a target

Messages when a social is typed with an argument ("grin Gaia"):
  Targeted to character <&yt2char&0>  - this whole section may be blank
  Targeted to others <&yt2other&0>
  Targeted to victim <&yt2vict&0>
  Target not found <&ytnotfound&0>  - sent to the actor when target is invalid

Messages when the actor targets himself ("grin self"):
  Target-self to character <&ys2char&0>  - may be blank
  Target-self to others <&ys2other&0>  - may be blank (s2char must be blank)

See &cHELP DOLLAR SIGN CODES&0 for a list of codes that can be used in socials:
  $n, $m, $e, $s - used for the actor
  $N, $M, $E, $s - used for the target (targeted strings only)

See also: OLC SOCIALS
#d
"SOCEDIT NAME"

Usage:  .name <name>

The social name is text used internally, to distinguish between different
socials that share the same command. Players don't see the names of socials.

Examples:
 - Smile
 - Smile with Mask
 - Fangy Vampire Smile

See also: OLC SOCIALS
#d
"STRING EDITOR" "TEXT EDITOR" "STRING EDITING" ,

Note: If you are using the string editor in-game, you must begin commands with
a comma (,). Only text you type starting with a , will be added to the string.
You can enter full-string-edit mode using ,/, (or turn that mode off the same
way).

The string editor is used to edit player descriptions, board messages, mail
letters, and more. You can type '/h' inside the string editor for a list of
its commands.

When the string editor opens, it shows you the contents of the string and
then gives a ] prompt. You are inserting text on a new line at the end of the
existing string. You can type '/l' to see the current string at any time.

TIP: If your string is longer than 80 characters (normal telnet window width),
use '/fi' to format it with indentation. This puts the whole thing into a
single paragraph, indented 3 spaces, with each line no longer than 80
characters.
#
"TOGGLE ABILITY"

Abilities with the TOGGLE flag are ones the user can turn off at will,
generally by typing the ability's command again. This only applies to BUFF and
ROOM-AFFECT abilities.

These abilities have two additional custom messages available.
 &ctoggle-to-char&0 - Shown to the character. If missing, they see "Okay."
 &ctoggle-to-room&0 - Shown to the room. Nothing is shown if this is missing.

If the affect itself has a wearoff or wearoff2room message on its generic,
those are shown after the toggle messages.

See also: ABILEDIT CUSTOM MESSAGES, AFFECT GENERIC
#
"TRIGEDIT ARGUMENTS"

Usage:  .arguments <string>

This feature allows you to pass string arguments to the script.

See also: OLC TRIGGERS, TRIGEDIT NUMARG
#d
"TRIGEDIT ATTACHES"

Usage:  .attaches <type>

This determines what type of thing the trigger is meant to attach to. A trigger
that was designed for a mob probably wouldn't work very well attached to an
object.

The attach type also determines which event types you can choose.

You can find help files for different triggers at: &yMTRIG&0, &yOTRIG&0, &yRTRIG&0, &yVTRIG&0

See also: OLC TRIGGERS, TRIGEDIT TYPES
#d
"TRIGEDIT COMMANDS" TRIGEDIT-COMMANDS TRIG-COMMANDS TRIGGER-COMMANDS TRIGEDIT-COMMANDLISTS

Usage:  .commands

The "commands" section is the body of the script: the set of commands that will
run when the trigger fires. It can include statements like "if", variables,
and other scripting functions.

The commands are edited in the text editor. When you're done editing the
commands, you should format them with /f -- this will clean up the code, as
well as check it to help make sure it will run safely.

See also: MTRIG COMMANDS, OTRIG COMMANDS, RTRIG COMMANDS, VTRIG COMMANDS
See also: SCRIPT COMMANDS, OLC TRIGGERS, TEXT EDITOR
#d
"TRIGEDIT FULLSEARCH"

Usage:  .t fullsearch -<field> <argument> <...>

This command allows you to search for triggers matching certain criteria. You
can specify multiple fields if you want. Any leftover arguments are matched to
the trigger's name and command text.

Fields:
  &c-attaches&0 - see HELP TRIGEDIT ATTACHES
  &c-type&0 - see HELP MTRIG TYPES, etc.
  &c-vmin&0, &c-vmax&0 - VNUM range limits

Examples:
 > .t fullsearch -type Random -type Global
 > .t fullsearch i11234 -vmin 11200 -vmax 11299
 > .t fullsearch %force%
#d
"TRIGEDIT NAME"

Usage:  .name <name>

A trigger's name should be short and descriptive. This name is shown in many
lists, including the list of scripts when editing a mob or object.

Examples:
 > Cow behavior
 > Mob Fight - fireballs
 > Hestian Trinket recall

See also: OLC TRIGGERS
#d
"TRIGEDIT NUMARG" "TRIGEDIT NUMERIC ARGUMENT"

Usage:  .numarg <number>

The numeric argument (numarg) is a number that is passed to the script when
it runs.

See also: OLC TRIGGERS
#d
"TRIGEDIT TYPES" TRIGEDIT-TYPES TRIGGER-LIST TRIGGER-TYPES TRIG-TYPES

Usage:  .types [add | remove] <flags>

You can set trigger types this way. These determine which events will set off
the script. The available types are determined by what the trigger attaches to.

See also: MTRIG TYPES, OTRIG TYPES, RTRIG TYPES, VTRIG TYPES
See also: OLC TRIGGERS, TRIGEDIT ATTACHES
#d
"#n" "#e" "#a"

Mob names can use certain special codes in order to dynamically add names.
You can use these codes in the short description, long description, and
keywords.

- #n  Pick a random name from the chosen nameset. If the gender is left neutral,
      it will also pick a random gender.

- #e  Empire name. For this to work, you need to set the mob as a claimed-only
      spawn on the map.

- #a  Empire adjective. See notes on #e.

See also: MEDIT NAMESET
#d
"ARMOR ITEM" "ARMOR OBJECT"

The ARMOR item type is similar to WORN, except that it requires specific
abilities to use it. Armor items may be set to any wear locations, but there
is a worn-as-armor slot that must always be this item type. Armor items will
scale higher than non-armor items.

Mage armor is for casters and healers.

Light armor is for melee damage characters and should give damage traits.

Medium armor is for PVP or solo adventuring, and should give both DPS and
   tank traits on the same item.

Heavy armor should always include -WITS, -STRENGTH, or other melee penalties.
   It should only include tank traits otherwise.

Object values:
 0 - armor type (0 mage, 1 light, 2 medium, 3 heavy)
#d
"AMMO ITEM" "AMMO OBJECT" "ARROW ITEM" "ARROW OBJECT"

The AMMO item type is used to create stacks of ammunition for the MISSILE
WEAPON type. Its damage is added to the missile weapon's own damage. Arrows
normally come in stacks of 10 and are named as "a quiver of arrows".

If the ammo is scalable, its damage bonus will scale. Ammo only fires out of
the player's inventory.

If there are any applies, they will become debuffs on the enemy when hit by
the ammo. For example, a -1 STR on the ammo becomes -1 STR on the victim.
If there is an 'affect' generic with the same vnum as the ammo item, it will
be used for the debuff.

Object values:
 0 - remaining number of shots
 1 - damage bonus (scalable)
 2 - ammo type (must match type on the missile weapon)
#d
"BOARD ITEM" "BOARD OBJECT"

The BOARD item type is used only for in-game boards and cannot be set in OLC
because boards require code support as well.
#d
"BOOK ITEM" "BOOK OBJECT"

The BOOK type is used along with the bookedit interface and EmpireMUD's library
system. You can spawn books in adventures by writing them in the book editor,
then assigning their book ID to a book object in your adventure zone. The
data from the book editor will override your short description, long desc-
ription, and look description.

Object values:
 0 - vnum for the book text (from the book editor)
#d
BUILDING-VEHICLES "VEHICLE BUILDINGS" "ROOM BUILDINGS" "BUILDING ROOMS" "BUILDING VEHICLES" "BUILDINGS AS VEHICLES" "VEHICLES AS BUILDINGS" VEHICLE-BUILDINGS

There are two different ways to do buildings:
- Using the .build editor creates a buliding that replaces a map tile.
- Using the .vehicle editor with the BUILDING flag creates a building that sits
  in a map tile like a vehicle.

Most EmpireMUDs will combine the two systems. Some features, like walls and
fences, work best as whole-tile buildings. Others, like homes, work better as
vehicle-buildings.

Traits usually set on building-vehicles:
- Size: By default, rooms hold up to 4 total size.
- BUILDING and IN flags: Counts as a building (required), uses "in" strings.
- !BUILDING flag: Keeps this building from being put in another building.
- VISIBLE-IN-DARK flag: Allows players to see it in the dark.
- Icon: Causes it to show up on the map.
- NO-WORKFORCE-EVOS affect: Workforce won't do chores that would change the
  tile type (chopping, etc). For treehouses or similar.

Optional flags:
- CARRY-MOBS on the vehicle and HERD on the interior room: To herd animals
  inside, you need both these flags.

Some important notes:
- Building-vehicles are only claimed when the whole tile is claimed unless they
  have a movement flag like DRIVING, in which case they work like vehicles.
- Using '%load% vehicle <vnum>' to load a building-vehicle will automatically
  set its owner to the owner of the room.
- Be careful using %own% on building-vehicles. It's better to %own% the whole
  room and let the building-vehicles inside inherit this ownership, rather than
  setting them separately, which won't affect the room's owner.
#d
"COINS ITEM" "COINS OBJECT" "COIN ITEM" "COIN OBJECT"

The COINS type represents a pile of coins and will be converted from an object
to "real" coins when a player picks it up. Coins dropped by adventures should
always be "miscellaneous coins" rather than the coins of a specific empire, as
adventures should not rely on empires continuing to exist.

If your coin item is scalable, the coin value will be set by the scaling system
based on the player's level.

This should not be confused with the WEALTH item type.

Object values:
 0 - amount (scalable)
 1 - empire vnum (or -1 for misc coins)
#d
"CONTAINER ITEM" "CONTAINER OBJECT"

EmpireMUD does not use containers with the TAKE flag. These items should only
be used on the ground. If you want to raise inventory capacity, use the PACK
item type instead.

If you want to make a cart (or other movable container), use a vehicle instead.

Object values:
 0 - max contents
 1 - container flags (1 = closable, 2 = closed, 3 = both)
#d
"CORPSE ITEM" "CORPSE OBJECT"

EmpireMUD does not currently allow content builders to add actual corpse
objects. You can use the CONTAINER item type if you don't set it as take-able,
or else you can use OTHER but won't be able to put items inside the corpse.

This item type itself is reserved for code use. Use an OTHER item to make fake
corpses.

Object values:
 0 - idnum/vnum of the corpse (players are negative; npc vnums are positive)
 1 - corpse size
 2 - corpse flags (1 = eaten, 2 = skinned, 4 = human)
#d
"CROWD CONTROL" CROWD-CONTROL "LIMIT CROWD CONTROL" LIMIT-CROWD-CONTROL

The term "crowd control" refers to abilities that manage additional mobs in a
fight. For example, stunning a mob or transforming it into a form that doesn't
deal damage are forms of crowd control.

On abilities, the LIMIT-CROWD-CONTROL flag ensures only 1 mob is
crowd-controlled by that ability at a time. When the ability is used, all other
mobs in the room who are affected by it will return to normal.

See also: ABILEDIT FLAGS
#d
"CURRENCY ITEM" "CURRENCY OBJECT"

Currency items represent a pile of adventure currency. The name of the currency
is defined by a generic.

Object values:
 0 - amount
 1 - generic currency vnum

See also: GENERIC CURRENCY
#d
"DAMAGE TYPES" "DAMAGE TYPE"

The following damage types are available:
 &cphysical&0
 &cmagical&0
 &cfire&0
 &cpoison&0 - affected by Poison Immunity
 &cdirect&0 - not resisted by anything

See also: ATTACK TYPES
#d
"DRINKCON ITEM" "DRINKCON OBJECT" "DRINK ITEM" "DRINK OBJECT" "DRINK CONTAINER ITEM" "DRINK CONTAINER OBJECT"

This type represents two different things:

Some drink containers are kept in the player's inventory, like a canteen or
a cup. These should be relatively small in size, and you can set your item as
scalable in order to automatically determine how many drinks it will hold.

Other drink containers are like fountains, as no-take objects in the room
which can provide very large amounts of liquid to players. These shouldn't
be scalable, and you can set the capacity as high as you like.

If a drink container doesn't have TAKE (can't be taken) and is in the room,
players can 'fill' from it like a fountain.

Note: Unlike other items, if there is a 'timer' on a drink container, it will
only cause the liquid inside to go bad and be poured out, rather than purging
the whole container -- unless it has a 1-USE flag, in which case it the drink
container is also destroyed. Consuming the last liquid in a 1-USE drink
container will also cause it to be destroyed.

Object values:
 0 - max capacity (scalable)
 1 - current amount
 2 - generic liquid vnum

Custom messages:
 decays-on-char - shown when contents expire
 decays-in-room - shown when contents expire

Interactions:
 DECAYS-TO - only when a 1-USE drink container's timer expires
#d
"FOOD ITEM" "FOOD OBJECT"

The FOOD item type represents something edible which will sustain the player.
Usually food will be higher level, with a longer timer and mour hours of full-
ness, only if it's harder to make or acquire. Simple foods received from the
forage or pick command should be short-lived and low-fullness no matter what
they represent. Something that takes several ingredients and a Trade ability
could last much longer.

Object values:
 0 - hours of fullness
 1 - crop vnum (if plantable)
#d
"INSTRUMENT ITEM" "INSTRUMENT OBJECT"

The INSTRUMENT item type can be used with the "play" command, and you must be
able to HOLD the instrument to do this.

You need to set at least one 'instrument-to-char' and one 'instrument-to-room'
custom message for the item. You can set more if you like, and each one will
be displayed randomly every few action ticks.

See also: OEDIT CUSTOM
#d
"LIGHT ITEM" "LIGHT OBJECT"

The LIGHT item illuminates dark areas. Players need these items to work outside
at night, to explore dark caves, and sometimes for cooking food.

There is also a LIGHT object flag. Prefer to use the item type INSTEAD whenever
possible. Do not put both on the same item. The flag is for cases where a
scenery item needs to double as a light.

Object values:
 0 - hours of light remaining (or -1 for unlimited light)
 1 - is lit (1) or not (0)
 2 - light flags:
       LIGHT-FIRE - can be used like a LIGHTER item, when lit
       CAN-DOUSE - the player can put it out and re-light it
       JUNK-WHEN-EXPIRED - when it burns out, the item is lost
       COOKING-FIRE - the player can cook with it
       DESTROY-WHEN-DOUSED - item is lost if they player douses it

Light items also use these custom messages:
 decays-on-char - When the light burns out (or its timer expires) while worn or
   carried.
 decays-in-room - When the light burns out (or its timer expires) in a room.

Lights with the LIGHT-FIRE or COOKING-FIRE flags will help buffer the player
against cold (while lit).

Example lights:
- torch: 18 hours of light, LIGHT-FIRE, CAN-DOUSE, JUNK-WHEN-EXPIRED
- campfire: 24 hours of light, LIGHT-FIRE, JUNK-WHEN-EXPIRED, COOKING-FIRE,
            DESTROY-WHEN-DOUSED
- lantern: 24 hours of light, CAN-DOUSE

See also: LIGHTER OBJECT, OEDIT LIGHT HOURS, OEDIT LIGHT IS LIT,
   OEDIT LIGHT FLAGS, TEMPERATURE
#d
"LIGHTER ITEM" "LIGHTER OBJECT"

The LIGHTER item type can be used to light fires and torches. It can either
be unlimited (like firesteel) or have a specific number of uses (like a tinder
box).

Object values:
 0 - number of uses

Do not confuse LIGHTER with LIGHT. A lighter lights a light.

See also: LIGHT OBJECT, OEDIT USES
#d
"MAIL ITEM" "MAIL OBJECT"

The MAIL item type is used internally and can't be set in builder-created items
or adventures. However, you can use the OTHER type with a look-description or
extra-description to get the same effect.
#d
"MINIPET ITEM" "MINIPET OBJECT" "MINI-PET ITEM" "MINI-PET OBJECT" "MINI PET OBJECT" "MINI PET ITEM" "PET WHISTLE"

Minipets are a common cosmetic reward from adventure zones. They are taught
by a MINIPET item, and the player may get that item from a loot drop or a
shop.

Object values on a MINIPET item:
 0 - mob vnum to teach

Minipet mobs should have the following traits:
 - Locked to a low level like 1
 - Adorable custom messages (optional)

Minipets automatically gain the following when summoned:
 - Scaled to the player's level
 - Flags: SENTINEL SPAWNED !LOOT !EXPERIENCE (and ISNPC)
 - Affects: !ATTACK CHARMED

See also: OLC OBJECTS, MINIPET, GENERIC COOLDOWN
#d
"MISSILE WEAPON ITEM" "MISSILE WEAPON OBJECT"

The MISSILE WEAPON item type represents a bow, crossbow, or similar item. It
should always have the RANGED wear slot only, never wield or hold. In order to
use weapons of this type, players must also have matching AMMO items in their
inventory.

If the missile weapon is scalable, it will scale its own damage bonus.

Object values:
 0 - attack type (see ATTACK TYPES)
 1 - bonus damage (if scalable, this is the weight to scale the damage)
 2 - ammo type (must match type on the ammo object)

See also: AMMO ITEM
#d
"OTHER ITEM" "OTHER OBJECT"

This is used for items that don't have another applicable type. It has no
base requirements to use it, and can represent almost anything. This type also
gives you access to edit the object's 3 generic values, which may be useful
for scripting.

Object values:
 - does not use the values, but allows them to be used for scripting
 - if the item is PLANTABLE, value 1 is the crop vnum
#d
"PACK ITEM" "PACK OBJECT"

The PACK item type is used to increase how much players can carry. You should
always combine it with the PACK wear location, because it has no function in
any other slot.

Pack sizes are scalable, and you can also set various applies on the pack to
divert its scaling points to something other than inventory size. Like all
scaling options, the capacity and the applies will scale in proportion to
each other.

If you want items in other slots to add inventory capacity, use the INVENTORY
apply instead.

Object values:
 0 - inventory bonus (scalable)
#d
"PAINT ITEM" "PAINT OBJECT"

The PAINT item type is used by players to color their buildings. One paint item
is required per building, and the item is consumed when used by the 'paint'
command.

Object values:
 0 - paint color
     0 none
     1 Blue
     2 Red
     3 Yellow
     4 Green
     5 Orange
     6 Violet
     7 Azure
     8 Cyan
     9 Jade
    10 Lime
    11 Magenta
    12 Pink
    13 Tan
    14 White
#d
"POISON ITEM" "POISON OBJECT"

The POISON item is applied on successful weapon attacks. Each player may only
have one active poison at a time.

Each time a poison is applied to a target, the poison object loses 1 charge,
until it is used up and discarded completely.

Object values:
 1 - poison charges remaining
 2 - generic affect vnum (optional, defaults to 3004 poisoned)
#d
"PORTAL ITEM" "PORTAL OBJECT"

Portals allow players to enter them and transport them from place to place.
You can use portals in several ways:

Adventures can use portals as their entrance/exit. You don't have to set a
target room on these, as it will be set when the adventure instance spawns.

You can create fixed portals inside of your adventures. In this case, use the
room template that the portal leads to as its target, instead of a live world
vnum.

You could also spawn portals using scripts. In this case, you should usually
set the portal's destination using the script that spawns it.

Object values:
 0 - target room vnum (real vnum, not template)
     Note: for adventure portals, this is the room template vnum instead UNTIL
     the portal has been loaded into the world, when it becomes the real vnum
#d
"POTION ITEM" "POTION OBJECT"

Potions will put their applies and affects on a person when quaffed. Potions
also fire 'consume' triggers, so you can give them custom effects with scripts.

When you drink a potion, it will clear any affects from other potions that
share the same affect vnum. If you do not set a vnum, it will use the default
'potion' affect.

In order to make potions storable, you should set their min- and max-level to
the same number, e.g. 100-100. This allows them to be both scalable and
storable.

Note: Prior to EmpireMUD 2.0 b5.23, potions had a pre-determined list of
effects and used custom scaling.

Potions can only be used once, and then are lost.

Object values:
 0 - generic cooldown vnum (optional)
 1 - cooldown time in seconds (optional)
 2 - generic affect vnum (optional, defaults to 3102 potion)
#d
"RECIPE ITEM" "RECIPE OBJECT"

Recipes are single-use items that permanently teach a player a new craft. You
must also create the craft entry, which must have the LEARNED flag. Only
players who learn the recipe from an item can make that craft.

You can make recipes even faster with the quickrecipe command.

Object values:
 0 - craft vnum to learn from this recipe

See also: OEDIT QUICKRECIPE
#d
"RESOURCE ACTIONS" "RESOURCE ACTION TYPES"

Resource lists (like buildings and vehicles) can include "actions", which add
flavor to construction and take time, but don't cost anything. These will only
be visible for things that build over time (like buildings, maintenance,
vehicles, and repair) -- not things that take resources instantly (like forge).

You can add resource actions using generics. Here are some common ones:
  1000 dig                   1006 engrave
  1001 clear terrain         1007 magic words
  1002 tidy up               1008 organize
  1003 repair                1009 shovel soot
  1004 scout area            1010 repair walls
  1005 block water

See also: BEDIT RESOURCE, CEDIT RESOURCES, VEDIT RESOURCE, OLC GENERICS
#d
"SHIELD ITEM" "SHIELD OBJECT"

The SHIELD item type always needs the HOLD wear location, and in most cases it
should have the BLOCK apply set. Shields that don't have any BLOCK will be
ineffective at blocking, although this may be a desired effect.

Shields can only be used by players with the correct Battle ability and they
are primarily for tank characters, since they use up the off-hand hold slot.

If you want an off-hand item for casters, consider type OTHER.
#d
"SHIP ITEM" "SHIP OBJECT"

The SHIP item type represents large ships with interiors, which are piloted
around on water tiles by players inside. These cannot be built in OLC because
they still require code support to spawn them correctly. Future versions of
EmpireMUD will change this by using scripts to set up the interior; it is not
currently an option.
#d
"UNDEFINED ITEM" "UNDEFINED OBJECT"

The UNDEFINED item type should not be used for live items. If you need a
generic item, use type OTHER.
#d
"UPGRADE CRAFTS" "UPGRADES TO" UPGRADES-TO

Vehicles and buildings can be upgraded into other vehicles and buildings.

Step 1: Add an UPGRADES-TO-BLD or UPGRADES-TO-VEH relationship to a building or
vehicle, indicating which other building/vehicle it upgrades to.

Step 2: Make a craft for the upgrade:
- Players will see the name of the craft if a building/vehicle can be upgraded
  to more than one thing.
- Set the type to whatever seems appropriate. If it's a vehicle, be sure to
  also set the VEHICLE flag.
- Set the UPGRADE flag (this also hides it from normal build/craft commands).
- Set buildon flags, ability, requires-object, and/or level if appropriate
- Set any tools or resources you need.

See also: BEDIT RELATIONS, BUILDING-VEHICLES, OLC CRAFTS
#d
"VEDIT ANIMALSREQUIRED" "VEDIT ANIMALS REQUIRED"

Usage:  .animalsrequired <number>

This is the number of animals that can be harnessed to the vehicle. Players
cannot drag, lead, or drive a vehicle that doesn't have enough animals attached
to it.

See also: HARNESS, OLC VEHICLES
#d
"VEDIT CAPACITY"

Usage:  .capacity <number>

Vehicle capacity is used for both container storage, and for the amount moved
by the shipping system -- depending on which flags are set on the vehicle. It
has no purpose if you don't set either CONTAINER or SHIPPING. If the vehicle
has both flags, the shipping system will be limited by how many items are
stored in the vehicle as a container.

The capacity is measured in item size -- most items count as 1, except LARGE
items which count as 2. Items with other items inside of them count as the
total of all items inside.

See also: VEDIT FLAGS, OLC VEHICLES
#d
"VEDIT CUSTOM" "VEDIT CUSTOM MESSAGES"

Usage:  .custom add <type> <message>
        .custom change <number> <type | message> <value>
        .custom move <number> <up | down>
        .custom remove <number | all>
        .custom sort

You can set custom messages on vehicles.

If you set more than one message of the same type, one will be chosen at
random each time.

Message types:
 &cruins-to-room&0 - Shown when it falls into ruins (from decay).
 &cclimate-change-to-room&0 - Shown when ruined due to climate flag change.

See also: OLC VEHICLES, DOLLAR SIGN CODES
#d
"VEDIT DESIGNATE" "DESIGNATE FLAGS"

Usage:  .designate [add | remove] <flags>

Designate flags control what types of rooms may be added to a vehicle. This
only matters if the "extra rooms" property is set greater than 0 AND the
"interior room" property is set.

Rooms can be designated in vehicles that have a matching designate flag with
the room. If a room without a matching designate flag is somehow added to the
vehicle (for example, as the "interior room" or via a trigger), players will
not be able to change that room with redesignate.

See HELP DESIGNATE FLAGS for a list of valid flags.

See also: VEDIT EXTRA ROOMS, VEDIT INTERIOR ROOM, OLC VEHICLES
#d
"VEDIT EXTRAROOMS" "VEDIT EXTRA ROOMS"

Usage:  .extrarooms <number>

If this number is greater than 0, players may use the 'designate' command to
add additional rooms to the inside of the vehicle, with options based on what
you set with the '.designate' olc option.

Players will only be able to add these rooms if they can get inside the
vehicle, which means you MUST also set the '.interiorroom' property.

See also: VEDIT DESIGNATE, VEDIT INTERIOR ROOM, OLC VEHICLES
#d
"VEDIT FLAGS"

Usage:  .flags [add | remove] <flags>

Flags let you specify certain properties about the vehicle. Many different
types of vehicles can be constructed this way.

Available flags:
 *INCOMPLETE - vehicle is not fully constructed (triggered by crafting)
 DRIVING - vehicle moves on land**
 SAILING - vehicle moves on water**
 FLYING - vehicle moves through the air**
 ALLOW-ROUGH - drag/drive work on rough terrain (e.g. mountains)
 SIT - player can sit on the vehicle
 IN - changes text from "on" to "in", and "aboard" to "inside"
 BURNABLE - can be burnt using the "burn" command
 CONTAINER - items can be placed inside
 SHIPPING - can be used by the shipping system
 CUSTOMIZABLE - allows "customize vehicle"
 DRAGGABLE - players can move it on land with "drag"
 !BUILDING - cannot be dragged/driven into a building (e.g. too large)
 CAN-PORTAL - can be dragged/driven/led through portals
 LEADABLE - can be pulled around with the "lead" command
 CARRY-VEHICLES - vehicles can be put inside (usually via drag/lead)
 CARRY-MOBS - mobs can be put inside (usually via lead)
 SIEGE-WEAPONS - can fire on buildings and vehicles
 ON-FIRE - currently burning (via the "burn" command)
 !LOAD-ONTO-VEHICLE - cannot be loaded onto another vehicle
 VISIBLE-IN-DARK - can be seen at night without a light
 !CLAIM - cannot be claimed
 BUILDING - acts more like a building than a vehicle
 NEVER-DISMANTLE - can never be dismantled
 *PLAYER-NO-DISMANTLE - player has toggled no-dismantle on
 *DISMANTLING - is being dismantled
 *PLAYER-NO-WORK - player has toggled no-work on
 CHAMELEON - vehicle cannot be seen at a distance (when in good repair)
 INTERLINK - rooms can be interlinked with other interlink-flagged places
 IS-RUINS - counts as ruins for city status and building decay
 SLEEP - can sleep and rest in/on it
 !PAINT - cannot be painted
 *BRIGHT-PAINT - is brightly painted (set by the paint command)
 DEDICATE - can be dedicated
 RUIN-SLOWLY-FROM-CLIMATE - always ruins slowly no matter what climate change
 RUIN-QUICKLY-FROM-CLIMATE - always ruins quickly due to climate change
 OBSCURE-VISION - blocks tiles behind it on the map
 *INSTANCE - vehicle has an instance attached
 *TEMPORARY - vehicle will be removed when the instance ends

** The DRIVING/SAILING/FLYING flags each enable specific commands for moving
the vehicle. If it has more than one of these, each command will work. Usually
each of these flags enables a certain set of terrain, but vehicles with more
than one of these flags can be moved on any valid terrain with any of those
commands.

See also: OLC VEHICLES
#d
"VEDIT FORBIDCLIMATE" "VEDIT FORBID CLIMATE" "VEDIT REQUIRESCLIMATE" "VEDIT REQUIRES CLIMATE"

Usage:  .forbidclimate [add | remove] <flags>
        .requiresclimate [add | remove] <flags>

If a vehicle has required/forbidden climate types, it affects where the
vehicle can move (or even exist). If a vehicle is outside of these climates,
it will be destroyed. Any movement out of these climates is blocked.

Required climates are ones that must be present for the vehicle to enter.
Forbidden climates are ones the vehicle cannot enter. If you don't set either
type of climate flags on the vehicle, it is allowed to go anywhere.

Vehicles can always go into the inside of a building/vehicle (if their other
flags permit it) regardless of climate settings.

On the map, open buildings count as the sector they were built on.

See also: CLIMATE FLAGS
#d
"VEDIT FULLSEARCH"

Usage:  .veh fullsearch -<field> <argument> <...>

This command allows you to search for vehicles matching certain criteria. You
can specify multiple fields if you want. Any arguments that don't start
with a dash (-) are matched to the vehicle's name and other text.

Fields:
  &c-animalsrequired&0 - number required (or "any" for anything over zero)
  &c-capacity -capacityover -capacityunder&0 - specific capacity
  &c-depletion&0 - see HELP OLC DEPLETION
  &c-designate&0 - see HELP DESIGNATE FLAGS
  &c-extradesc&0 - has a specific keyword in its extra descs
  &c-fame -fameover -fameunder&0 - specific fame amount
  &c-flagged -unflagged&0 - see HELP VEDIT FLAGS
  &c-functions&0 - see HELP VEDIT FUNCTIONS
  &c-icon [any]&0 - match the text of the icon (or "any" to just require an icon)
  &c-interactions&0 - has a specific type, see HELP VEDIT INTERACTION
  &c-height -heightover -heightunder&0 - specific height amount
  &c-hitpoints -hitpointsover -hitpointsunder&0 - specific hitpoint amount
  &c-level&0 - matches anything where this level is within the range
  &c-military -militaryover -militaryunder&0 - specific military value
  &c-movetype&0 - see HELP VEDIT MOVETYPE
  &c-rooms -roomsover -roomsunder&0 - specific extra rooms value
  &c-sizeunder -sizeover&0 - check a range of sizes (inclusive)
  &c-speed&0 - see HELP VEDIT SPEED
  &c-vmin&0, &c-vmax&0 - VNUM range limits

Examples:
 > .veh fullsearch -level 125 -hitpointsover 50
 > .veh fullsearch wood -flagged BURNABLE -vmin 10000 -vmax 10099

To search other fields, you can generally use the normal "search" option for
other OLC types. For example, to find all vehicles that have a certain interior
room vnum, use ".b search 12345", which will search the vnum field on all
vehicles for that building/room.
#d
"VEDIT HEIGHT"

Usage:  .height <value>

Vehicle height is added to terrain height for the purpose of blocking the map
beyond it, or for seeing over other blocked tiles. Players who are in/on a
vehicle and looking out at the map will have the same height as the vehicle.
Players who are in the same map tile as a vehicle will have its height under
certain conditions (such as if there's no interior or they are sitting in/on
the vehicle).

Most vehicles should have height 0. Height 1 means it will block the view
of non-flying players, and is equivalent to the outer tiles of a mountain
range.

See also: OLC VEHICLES
#d
"VEDIT HITPOINTS" "VEDIT HEALTH"

Usage:  .hitpoints <value>

This number is how much damage a vehicle can take from a catapult or other
sources, before it is destroyed.

Vehicles like catapults deal 8 damage per 100 levels, per shot. Siege rituals
deal Intelligence + 1 damage. You can determine how many hitpoints to give a
building based on this.

Any damage over 10% of a vehicle's health will also add "1 year" of required
maintenance to the vehicle (or nails, if the vehicle requires no yearly work).
The repair command can be used to restore hitpoints.

Common hitpoint levels:
 furniture: 1 (if it requires no maintenance)
 small cart: 5
 large cart: 25
 small ship: 32
 medium ship: 96
 large ship: 128

See also: VEDIT YEARLY MAINTENANCE, FIRE, OLC VEHICLES, REPAIR, SIEGE RITUAL
#d
"VEDIT ICON"

Usage:  .icon <icon | none>

Vehicles usually don't appear on the world map, but they can be set to do so by
giving them an icon. In general, vehicle icons can lead to map clutter and
should be avoided. However, they can help players find ships or other large
vehicles on the map. Users in screen-reader mode will see the vehicle's name
next to the tile name, instead of its icon.

If more than one vehicle is in the same room, only the first vehicle in the
list is shown on the map (this is generally the last vehicle that entered the
room).

You should almost always start the icon with &&0 to clear the tile's base
color. There is no need to put a &&0 at the end of the icon.

Examples:
 > .icon &&0<&&u44&&0>

See also: COLOR, OLC VEHICLES
#d
"VEDIT INTERIORROOM" "VEDIT INTERIOR ROOM"

Usage:  .interiorroom <vnum | none>

This sets the room (actually, building) vnum that is used for the interior of
the vehicle. It must be a "building" (.b editor) with the ROOM flag, and cannot
be an adventure's room template.

If the interior room has the LOOK-OUT flag, players will see the world map
above the room description, and the room title will appear as the exterior room
rather than the one the player is standing in. In this case, the description
of the interior room should be short.

This property must be set for a player to be able to board/enter the vehicle.

See also: OLC BUILDINGS, OLC VEHICLES
#d
"VEDIT KEYWORDS"

Usage:  .keywords <keywords>

This command updates the keywords on a vehicle. The keywords are a list of
single words that can be used to target it. It should include any words from
the short or long description that identify the vehicle.

Usually the most significant keyword should be first. This keyword is retained
when the vehicle is renamed by players.

Example:
 name: a cart
 long description: A rickety cart is parked here
 keywords: cart rickety

See also: VEDIT SHORTDESCRIPTION, VEDIT LONGDESCRIPTION, OLC VEHICLES
#d
"VEDIT LONGDESCRIPTION" "VEDIT LONG DESCRIPTION"

Usage:  .longdescription <string>

The long description is the text you see when the vehicle is in the room. Its
name should appear somewhere near the beginning, and the rest should be a
complete sentence indicating that it is present.

Examples:
A cart is parked here.
A ship is floating in the water.

See also: VEDIT KEYWORDS, OLC VEHICLES
#d
"VEDIT LOOKDESCRIPTION" "VEDIT LOOK DESCRIPTION"

Usage:  .lookdescription

The look description is shown when a player looks at or examines the vehicle.
This can be any length, but "newbie" vehicles should include information on how
to use them.

The look description is set in the string editor. If it is less than 80
characters long, it will fit on one line and should not be indented. If it
goes any longer than that, you should use /fi to format it with indent inside
the string editor.

See also: OLC VEHICLES, STRING EDITOR
#d
"VEDIT MAXLEVEL" "VEDIT MAX LEVEL"

Usage:  .maxlevel <level>

This command determines the maximum level a vehicle will scale to. Players are
rated from level 1 to 100 based on their skills, plus a number based on their
gear.

If you set the maxlevel to 0, there will be no maximum and the vehicle can
scale to any level over the minimum.

See also: VEDIT MINLEVEL, OLC VEHICLES
#d
"VEDIT MINLEVEL" "VEDIT MIN LEVEL"

Usage:  .minlevel <level>

This command determines the minimum level a object will scale to. Players are
rated from level 1 to 100 based on their skills, plus a number based on their
gear.

If you set the minlevel to 0, there will be no lower limit and the vehicle can
scale to any level under the maximum.

See also: VEDIT MAXLEVEL, OLC VEHICLES
#d
"VEDIT MOVETYPE" "VEDIT MOVE TYPE"

Usage:  .movetype <type>

The move type determines what message is sent when the vehicle moves. The same
message is sent regardless of which movement command (drive, sail, pilot) is
used.

The same list of move types is used for mobs, so some types may not be
appropriate for vehicles.

See also: OLC VEHICLES
#d
"VEDIT RESOURCES" "VEDIT YEARLY MAINTENANCE"

Usage:  .resource add <type> <amount> <vnum/name>
        .resource change <number> <quantity | vnum | name | flags> <value>
        .resource remove <number | all>
        .resource move <number> <up | down>

This command adds materials to the vehicle's "yearly maintenance" list. These
are resources needed to maintain the vehicle each year. If you don't set any,
then the vehicle does not require maintenance.

This uses the ".resource" command to be consistent with other editors, but
these are not the resources needed to build the vehicle in the first place --
only to repair it.

If a vehicle takes damage from any source, and that damage is more than 10% of
its hitpoints, it will also add the yearly-maintenance resources to the repair
cost.

Vehicles with only 1 hitpoint will never get their yearly maintenance cost, as
even 1 year of decay will destroy them.

See HELP OLC RESOURCES for more information.

See also: VEDIT HITPOINTS, OLC VEHICLES, REPAIR, RESOURCE ACTIONS
#d
"VEDIT SHORTDESCRIPTION" "VEDIT SHORT DESCRIPTION"

Usage:  .shortdescription <string>

The 'short description' is the trait that's shown in lists, in action messages,
and almost everywhere else except when a player types 'look' in the room (where
the long description is shown instead). This should be short, should generally
begin with a/an/the unless it's a proper noun, and should not be capitalized
(again unless it's a proper noun).

Examples:
 the cart
 a carriage
 the Enterprise

See also: VEDIT KEYWORDS, VEDIT LONG DESCRIPTION, OLC VEHICLES
#d
"VEDIT SIZE" "VEHICLE SIZE"

Usage:  .size <number>

The SIZE trait determines how many vehicles can fit into a room together. For
vehicles that can move, this is usually 0. For building-vehicles, it is almost
always higher than 0.

By default, the total size of vehicles in a room cannot be greater than 4.
#d
"VEDIT SPEED"

Usage:  .speed
        .speed <number>

The SPEED trait indicates how many speed bonuses are granted to the player 
while sailing, piloting, or driving the selected vehicle.

Speeds are:
 Very Slow - cart, canoe
 Slow - carriage, caravel, cog
 Normal - caravan, carrack
 Fast - heroic caravan, heroic galleon
 Very Fast - reserved for high-level adventure rewards

See also: OLC VEHICLES
#d
"WEALTH ITEM" "WEALTH OBJECT"

The WEALTH type represents an object of value. These are not converted to money
like the COINS type is, but they can usually be minted into coins by players
with a mint. Wealth items contribute to an empire's total wealth when they are
stored.

This item type has no effect unless the item is stored in normal storage.

Object values:
 0 - treasure value
 1 - flags (1: automint, 2: no-mint)
#d
"WEAPON ITEM" "WEAPON OBJECT"

The WEAPON item type covers melee/caster weapons.

Notes:
- You should almost always set .wear WIELD.
- Small weapons, like daggers and swords, can also be .wear HOLD -- players
  will be able to use a second copy of the weapon in their hold slot, and
  may be able to attack with it in that slot if they have Dual Wield.
- The TWO-HANDED flag gives a weapon more scaling points and requires both
  hands, but only high-level players will be able to use it. Nobody below
  skill level 100 will have the correct ability.
- You must set the .weapontype property.
- You should set the .damage property to at least 1. If your item is scalable,
  this trait will scale along with the applies.
- Players usually prefer to enchant their own weapons, so you may wish to
  avoid pre-enchanted ones.
- The SLOW and FAST flags affect the rate of attack, but neither is really a
  bonus or penalty. They just help create more weapon diversity.

Object values:
 1 - bonus damage (if scalable, this is the weight to scale the damage)
 2 - attack type (see ATTACK TYPES)
#d
"WORN ITEM" "WORN OBJECT"

The WORN item type is for clothing (not armor). There are no requirements to
use clothing and it usually isn't used to give apply bonuses, although shoes
and some other worn items are an exception to this.

If you are going to use the worn-as-armor wear location, or are planning to
give the item good stats, you should usually be using the ARMOR item type
instead.
#d
"DOLLAR SIGN CODES" "DOLLARSIGN CODES" $$ $$n $$e $$v $$m $$p $$o $$p $$v $$k $$l

EmpireMUD uses the so-called dollar sign codes in a function called act(),
which is used to send action text to people in the game. Usually this only
appears in the code itself, but there are a few places where players encounter
it -- such as emotes and custom object messages.

Player variables:
 $n - actor's name                      $N - 2nd person's name
 $o - actor's real name                 $O - 2nd person's real name
 $e - he/she/it for the actor           $E - he/she/it for 2nd person
 $m - him/her/it for the actor          $M - him/her/it for 2nd person
 $s - his/her/its for the actor         $S - his/her/its for 2nd person
 $l - empire name for the actor         $L - empire name for the 2nd person
 $k - empire adjective for actor        $K - empire adjective for 2nd person

Item variables:
 $p - short desc for the 1st item       $P - short desc for the 2nd item
 $a - a/an for the 1st item             $A - a/an for the 2nd item

Vehicle variables:
 $v - short desc for the 1st vehicle
 $V - short desc for the 2nd vehicle

Misc variables (code only):
 $t - The obj parameter as a string
 $T - The vict_obj parameter as a string
 $f - The first word of a string passed to the obj parameter
 $F - The first word of a string passed to the vict_obj parameter
#d
$~
